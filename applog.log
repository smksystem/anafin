2019-08-18 20:26:35,294,294 INFO [plugin_fivesteps.py:13] Initialize of plugin_fivesteps
2019-08-18 20:26:35,294,294 INFO [packsel.py:19] Running Mode = xdebug
2019-08-18 20:26:35,294,294 INFO [packsel_model.py:11] Initialize log of packsel_model
2019-08-18 20:26:35,294,294 INFO [monitor.py:56] Initialize Pinkybot
2019-08-18 20:26:35,356,356 DEBUG [plugin_fivesteps.py:24] {'planname': <tkinter.StringVar object at 0x03C2D430>, 'rangeselect': <tkinter.StringVar object at 0x03C2D750>, 'monitorstock': <tkinter.StringVar object at 0x03C2D890>, 'initinvest': <tkinter.StringVar object at 0x03C2D930>, 'volumestep': <tkinter.StringVar object at 0x03C2D8F0>, 'profitstep': <tkinter.StringVar object at 0x03C2D450>, 'topvaluebuy': <tkinter.StringVar object at 0x03C2D490>, 'startvaluebuy': <tkinter.StringVar object at 0x03C53E50>, 'stopvaluebuy': <tkinter.StringVar object at 0x03C53F30>, 'floorvaluebuy': <tkinter.StringVar object at 0x03C53F90>, 'firstbuyflag': <tkinter.StringVar object at 0x03C53F50>, 'pluginfile': <tkinter.StringVar object at 0x03C53E30>, 'currentuseId': <tkinter.StringVar object at 0x03C53CF0>, 'floorvaluerange': <tkinter.StringVar object at 0x03C53D70>, 'topvaluerange': <tkinter.StringVar object at 0x03C53F70>, 'commonvaluestep': <tkinter.StringVar object at 0x03C53ED0>, 'runningmode': <tkinter.StringVar object at 0x03C5E550>, 'totalcostbuy': <tkinter.StringVar object at 0x03C5E090>, 'totalvolumebuy': <tkinter.StringVar object at 0x03C5E4F0>, 'stockpin': <tkinter.StringVar object at 0x03C5E150>, 'remaininvest': <tkinter.StringVar object at 0x03C5E690>}
2019-08-18 20:26:35,356,356 DEBUG [plugin_fivesteps.py:32] def setparameter print initial All monitorstock Parameter
2019-08-18 20:26:35,356,356 DEBUG [plugin_fivesteps.py:33] {'planname': <tkinter.StringVar object at 0x03C2D430>, 'rangeselect': <tkinter.StringVar object at 0x03C2D750>, 'monitorstock': <tkinter.StringVar object at 0x03C2D890>, 'initinvest': <tkinter.StringVar object at 0x03C2D930>, 'volumestep': <tkinter.StringVar object at 0x03C2D8F0>, 'profitstep': <tkinter.StringVar object at 0x03C2D450>, 'topvaluebuy': <tkinter.StringVar object at 0x03C2D490>, 'startvaluebuy': <tkinter.StringVar object at 0x03C53E50>, 'stopvaluebuy': <tkinter.StringVar object at 0x03C53F30>, 'floorvaluebuy': <tkinter.StringVar object at 0x03C53F90>, 'firstbuyflag': <tkinter.StringVar object at 0x03C53F50>, 'pluginfile': <tkinter.StringVar object at 0x03C53E30>, 'currentuseId': <tkinter.StringVar object at 0x03C53CF0>, 'floorvaluerange': <tkinter.StringVar object at 0x03C53D70>, 'topvaluerange': <tkinter.StringVar object at 0x03C53F70>, 'commonvaluestep': <tkinter.StringVar object at 0x03C53ED0>, 'runningmode': <tkinter.StringVar object at 0x03C5E550>, 'totalcostbuy': <tkinter.StringVar object at 0x03C5E090>, 'totalvolumebuy': <tkinter.StringVar object at 0x03C5E4F0>, 'stockpin': <tkinter.StringVar object at 0x03C5E150>, 'remaininvest': <tkinter.StringVar object at 0x03C5E690>}
2019-08-18 20:26:35,372,372 DEBUG [plugin_fivesteps.py:91] Print stock pin value
2019-08-18 20:26:35,372,372 DEBUG [plugin_fivesteps.py:92] 
2019-08-18 20:26:35,434,434 DEBUG [plugin_fivesteps.py:247] Finish Prepare
2019-08-18 20:26:37,852,852 INFO [tkconsole.py:800] Execute Login
2019-08-18 20:26:37,852,852 INFO [monitor.py:118] Start Login
2019-08-18 20:26:48,395,395 INFO [monitor.py:163] Login seem to be succeeded , start to refresh all data from database with refresh all condition
2019-08-18 20:26:48,399,399 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:26:48,399,399 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'all'}
2019-08-18 20:26:48,404,404 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:26:48,404,404 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'all'}
2019-08-18 20:26:49,274,274 DEBUG [packsel.py:615] Do full update refresh all with below data in var mytable
2019-08-18 20:26:49,275,275 DEBUG [packsel.py:616] [['465348', '20:26:06', 'WHA', 'B', '4.74', '100', '0', '0', '0', 'Pending(S)'], ['775219', '20:25:34', 'WHA', 'S', '4.82', '100', '0', '0', '0', 'Pending(S)'], ['576407', '20:25:33', 'WHA', 'S', '4.80', '100', '0', '0', '0', 'Pending(S)'], ['808729', '20:25:32', 'WHA', 'S', '4.78', '100', '0', '0', '0', 'Pending(S)'], ['419058', '20:25:31', 'WHA', 'S', '4.76', '100', '0', '0', '0', 'Matched(M)'], ['320855', '20:25:30', 'WHA', 'S', '4.74', '100', '0', '0', '0', 'Pending(S)'], ['813548', '20:24:52', 'WHA', 'B', '4.72', '1000', '0', '0', '0', 'Matched(M)']]
2019-08-18 20:26:49,275,275 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:49,275,275 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:26:49,280,280 DEBUG [packsel_model.py:390] Refresh each row case chkorderno already existing in database and status
2019-08-18 20:26:49,280,280 DEBUG [packsel_model.py:391] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:26:49,282,282 DEBUG [packsel_model.py:392] Pending(S)
2019-08-18 20:26:49,283,283 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:49,284,284 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:49,286,286 DEBUG [packsel_model.py:390] Refresh each row case chkorderno already existing in database and status
2019-08-18 20:26:49,286,286 DEBUG [packsel_model.py:391] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:49,287,287 DEBUG [packsel_model.py:392] Pending(S)
2019-08-18 20:26:49,287,287 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:49,288,288 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:49,289,289 DEBUG [packsel_model.py:390] Refresh each row case chkorderno already existing in database and status
2019-08-18 20:26:49,289,289 DEBUG [packsel_model.py:391] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:49,290,290 DEBUG [packsel_model.py:392] Pending(S)
2019-08-18 20:26:49,291,291 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:49,291,291 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:49,293,293 DEBUG [packsel_model.py:390] Refresh each row case chkorderno already existing in database and status
2019-08-18 20:26:49,293,293 DEBUG [packsel_model.py:391] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:49,294,294 DEBUG [packsel_model.py:392] Pending(S)
2019-08-18 20:26:49,295,295 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:49,295,295 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:26:49,296,296 DEBUG [packsel_model.py:390] Refresh each row case chkorderno already existing in database and status
2019-08-18 20:26:49,297,297 DEBUG [packsel_model.py:391] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:26:49,298,298 DEBUG [packsel_model.py:392] Matched(M)
2019-08-18 20:26:49,298,298 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:49,299,299 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:49,300,300 DEBUG [packsel_model.py:390] Refresh each row case chkorderno already existing in database and status
2019-08-18 20:26:49,300,300 DEBUG [packsel_model.py:391] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:49,301,301 DEBUG [packsel_model.py:392] Pending(S)
2019-08-18 20:26:49,302,302 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:49,303,303 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:26:49,304,304 DEBUG [packsel_model.py:390] Refresh each row case chkorderno already existing in database and status
2019-08-18 20:26:49,304,304 DEBUG [packsel_model.py:391] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:26:49,305,305 DEBUG [packsel_model.py:392] Matched(M)
2019-08-18 20:26:49,306,306 DEBUG [packsel.py:622] Get all data from database in var rowupdaterefresh
2019-08-18 20:26:49,306,306 DEBUG [packsel.py:623] [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}, {'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}, {'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]
2019-08-18 20:26:49,306,306 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:26:49,307,307 DEBUG [plugin_fivesteps.py:479] [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}, {'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}, {'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]
2019-08-18 20:26:49,307,307 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:26:49,307,307 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:26:49,307,307 DEBUG [plugin_fivesteps.py:728] +++ Case else with not match but order match def checkprocess2matchstatus
2019-08-18 20:26:49,307,307 DEBUG [plugin_fivesteps.py:729] [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}, {'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}, {'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]
2019-08-18 20:26:49,307,307 DEBUG [plugin_fivesteps.py:730] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:26:49,310,310 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:26:49,310,310 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}, {'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}, {'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}, {'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]}
2019-08-18 20:26:49,310,310 DEBUG [tkconsole.py:905] print repeatidx case of price == 0
2019-08-18 20:26:49,310,310 DEBUG [tkconsole.py:906] 0
2019-08-18 20:26:49,316,316 DEBUG [tkconsole.py:905] print repeatidx case of price == 0
2019-08-18 20:26:49,316,316 DEBUG [tkconsole.py:906] 0
2019-08-18 20:26:49,320,320 DEBUG [tkconsole.py:905] print repeatidx case of price == 0
2019-08-18 20:26:49,320,320 DEBUG [tkconsole.py:906] 0
2019-08-18 20:26:49,325,325 DEBUG [tkconsole.py:905] print repeatidx case of price == 0
2019-08-18 20:26:49,325,325 DEBUG [tkconsole.py:906] 0
2019-08-18 20:26:49,329,329 DEBUG [tkconsole.py:905] print repeatidx case of price == 0
2019-08-18 20:26:49,330,330 DEBUG [tkconsole.py:906] 0
2019-08-18 20:26:49,336,336 DEBUG [tkconsole.py:928] print repeatidx case of ignoreadd == False
2019-08-18 20:26:49,336,336 DEBUG [tkconsole.py:929] 1
2019-08-18 20:26:49,343,343 DEBUG [tkconsole.py:935] Check myvarasso in ignoreadd==FALSE
2019-08-18 20:26:49,343,343 DEBUG [tkconsole.py:936] [{'orderno': <tkinter.StringVar object at 0x05009E10>, 'startordertime': <tkinter.StringVar object at 0x05009CB0>, 'matchordertime': <tkinter.StringVar object at 0x050093B0>, 'targetvalue': <tkinter.StringVar object at 0x05009ED0>, 'symbole': <tkinter.StringVar object at 0x05009D50>, 'referorderno': <tkinter.StringVar object at 0x05009FD0>, 'orderside': <tkinter.StringVar object at 0x05009870>, 'volume': <tkinter.StringVar object at 0x05009AD0>, 'profit': <tkinter.StringVar object at 0x05009D10>, 'state': <tkinter.StringVar object at 0x05009FB0>}, {'orderno': <tkinter.StringVar object at 0x050297F0>, 'startordertime': <tkinter.StringVar object at 0x05029230>, 'matchordertime': <tkinter.StringVar object at 0x05029210>, 'targetvalue': <tkinter.StringVar object at 0x050293D0>, 'symbole': <tkinter.StringVar object at 0x05029430>, 'referorderno': <tkinter.StringVar object at 0x05029390>, 'orderside': <tkinter.StringVar object at 0x050295B0>, 'volume': <tkinter.StringVar object at 0x050293B0>, 'profit': <tkinter.StringVar object at 0x050293F0>, 'state': <tkinter.StringVar object at 0x05029410>}]
2019-08-18 20:26:49,343,343 DEBUG [tkconsole.py:905] print repeatidx case of price == 0
2019-08-18 20:26:49,343,343 DEBUG [tkconsole.py:906] 0
2019-08-18 20:26:54,197,197 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:54,198,198 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:26:54,202,202 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:54,202,202 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:54,206,206 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:54,207,207 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:54,209,209 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:54,210,210 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:54,212,212 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:54,213,213 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:26:54,216,216 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:54,216,216 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:54,220,220 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:54,221,221 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:26:54,223,223 DEBUG [plugin_fivesteps.py:436] print price_change from checkprocess2order to order next plugin_fivesteps.py line 239
2019-08-18 20:26:54,223,223 DEBUG [plugin_fivesteps.py:437] 4.72
2019-08-18 20:26:54,224,224 DEBUG [plugin_fivesteps.py:442] Print rt_table this value should be empty for first time buy
2019-08-18 20:26:54,224,224 DEBUG [plugin_fivesteps.py:443] []
2019-08-18 20:26:54,224,224 DEBUG [plugin_fivesteps.py:445] Print configval from def checkprocess2order before fist buy order
2019-08-18 20:26:54,224,224 DEBUG [plugin_fivesteps.py:446] {'planname': <tkinter.StringVar object at 0x03C2D430>, 'rangeselect': <tkinter.StringVar object at 0x03C2D750>, 'monitorstock': <tkinter.StringVar object at 0x03C2D890>, 'initinvest': <tkinter.StringVar object at 0x03C2D930>, 'volumestep': <tkinter.StringVar object at 0x03C2D8F0>, 'profitstep': <tkinter.StringVar object at 0x03C2D450>, 'topvaluebuy': <tkinter.StringVar object at 0x03C2D490>, 'startvaluebuy': <tkinter.StringVar object at 0x03C53E50>, 'stopvaluebuy': <tkinter.StringVar object at 0x03C53F30>, 'floorvaluebuy': <tkinter.StringVar object at 0x03C53F90>, 'firstbuyflag': <tkinter.StringVar object at 0x03C53F50>, 'pluginfile': <tkinter.StringVar object at 0x03C53E30>, 'currentuseId': <tkinter.StringVar object at 0x03C53CF0>, 'floorvaluerange': <tkinter.StringVar object at 0x03C53D70>, 'topvaluerange': <tkinter.StringVar object at 0x03C53F70>, 'commonvaluestep': <tkinter.StringVar object at 0x03C53ED0>, 'runningmode': <tkinter.StringVar object at 0x03C5E550>, 'totalcostbuy': <tkinter.StringVar object at 0x03C5E090>, 'totalvolumebuy': <tkinter.StringVar object at 0x03C5E4F0>, 'stockpin': <tkinter.StringVar object at 0x03C5E150>, 'remaininvest': <tkinter.StringVar object at 0x03C5E690>}
2019-08-18 20:26:54,226,226 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:26:54,226,226 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:26:56,369,369 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:26:56,369,369 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:26:57,267,267 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:57,267,267 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:26:57,270,270 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:57,270,270 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:57,272,272 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:57,273,273 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:57,275,275 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:57,275,275 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:57,277,277 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:57,277,277 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:26:57,279,279 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:57,279,279 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:26:57,281,281 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:26:57,282,282 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:26:57,285,285 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:26:57,285,285 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:26:57,285,285 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:26:57,285,285 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:26:57,290,290 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:26:57,290,290 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:26:59,398,398 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:26:59,398,398 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:26:59,404,404 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:26:59,404,404 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:00,248,248 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:00,248,248 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:00,251,251 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:00,252,252 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:00,254,254 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:00,255,255 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:00,257,257 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:00,257,257 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:00,259,259 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:00,259,259 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:00,262,262 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:00,262,262 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:00,264,264 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:00,264,264 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:00,266,266 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:00,266,266 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:00,266,266 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:00,267,267 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:00,280,280 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:00,280,280 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:03,251,251 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:03,252,252 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:03,255,255 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:03,255,255 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:03,258,258 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:03,258,258 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:03,260,260 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:03,260,260 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:03,262,262 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:03,263,263 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:03,265,265 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:03,265,265 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:03,268,268 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:03,268,268 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:03,270,270 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:03,271,271 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:03,271,271 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:03,271,271 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:03,274,274 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:03,274,274 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:05,457,457 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:05,458,458 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:06,274,274 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:06,274,274 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:06,277,277 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:06,277,277 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:06,279,279 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:06,279,279 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:06,281,281 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:06,282,282 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:06,284,284 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:06,284,284 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:06,286,286 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:06,287,287 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:06,291,291 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:06,291,291 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:06,294,294 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:06,295,295 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:06,295,295 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:06,295,295 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:06,297,297 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:06,297,297 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:08,472,472 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,473,473 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:08,478,478 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,478,478 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:08,484,484 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,484,484 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:08,489,489 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,489,489 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:08,495,495 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,495,495 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:08,500,500 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,501,501 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:08,506,506 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,506,506 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:08,512,512 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,512,512 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:08,517,517 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,517,517 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:08,523,523 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,523,523 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:08,528,528 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,528,528 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:08,534,534 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:08,534,534 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:09,436,436 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:09,436,436 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:09,439,439 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:09,439,439 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:09,442,442 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:09,442,442 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:09,444,444 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:09,445,445 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:09,447,447 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:09,447,447 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:09,449,449 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:09,450,450 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:09,452,452 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:09,452,452 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:09,455,455 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:09,456,456 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:09,458,458 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:09,459,459 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:09,461,461 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:09,461,461 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:09,463,463 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:09,464,464 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:09,466,466 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:09,466,466 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:09,466,466 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:09,466,466 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:09,469,469 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:09,469,469 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:11,485,485 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:11,486,486 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:11,491,491 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:11,492,492 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:11,497,497 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:11,497,497 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:12,319,319 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:12,319,319 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:12,322,322 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:12,322,322 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:12,328,328 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:12,328,328 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:12,332,332 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:12,332,332 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:12,334,334 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:12,335,335 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:12,337,337 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:12,337,337 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:12,341,341 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:12,341,341 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:12,345,345 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:12,346,346 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:12,349,349 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:12,349,349 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:12,352,352 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:12,352,352 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:12,355,355 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:12,356,356 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:12,359,359 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:12,359,359 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:12,359,359 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:12,359,359 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:12,362,362 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:12,362,362 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:14,495,495 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:14,496,496 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:15,356,356 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:15,357,357 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:15,360,360 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:15,360,360 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:15,363,363 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:15,363,363 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:15,366,366 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:15,366,366 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:15,368,368 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:15,368,368 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:15,370,370 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:15,371,371 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:15,373,373 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:15,373,373 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:15,375,375 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:15,376,376 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:15,378,378 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:15,378,378 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:15,381,381 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:15,381,381 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:15,383,383 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:15,383,383 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:15,385,385 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:15,385,385 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:15,385,385 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:15,385,385 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:15,388,388 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:15,388,388 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:17,512,512 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:17,512,512 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:17,518,518 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:17,518,518 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:18,373,373 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:18,373,373 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:18,376,376 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:18,376,376 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:18,379,379 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:18,379,379 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:18,381,381 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:18,381,381 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:18,384,384 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:18,384,384 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:18,386,386 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:18,386,386 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:18,388,388 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:18,389,389 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:18,391,391 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:18,392,392 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:18,395,395 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:18,396,396 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:18,398,398 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:18,398,398 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:18,401,401 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:18,401,401 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:18,403,403 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:18,403,403 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:18,403,403 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:18,403,403 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:18,407,407 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:18,408,408 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:19,306,306 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:19,306,306 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:19,309,309 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:19,309,309 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:19,311,311 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:19,311,311 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:19,314,314 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:19,314,314 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:19,316,316 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:19,316,316 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:19,318,318 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:19,319,319 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:19,321,321 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:19,321,321 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:19,323,323 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:19,324,324 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:19,328,328 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:19,328,328 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:19,332,332 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:19,333,333 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:19,335,335 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:19,336,336 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:19,338,338 DEBUG [plugin_fivesteps.py:436] print price_change from checkprocess2order to order next plugin_fivesteps.py line 239
2019-08-18 20:27:19,338,338 DEBUG [plugin_fivesteps.py:437] 4.74
2019-08-18 20:27:19,338,338 DEBUG [plugin_fivesteps.py:442] Print rt_table this value should be empty for first time buy
2019-08-18 20:27:19,338,338 DEBUG [plugin_fivesteps.py:443] []
2019-08-18 20:27:19,338,338 DEBUG [plugin_fivesteps.py:445] Print configval from def checkprocess2order before fist buy order
2019-08-18 20:27:19,338,338 DEBUG [plugin_fivesteps.py:446] {'planname': <tkinter.StringVar object at 0x03C2D430>, 'rangeselect': <tkinter.StringVar object at 0x03C2D750>, 'monitorstock': <tkinter.StringVar object at 0x03C2D890>, 'initinvest': <tkinter.StringVar object at 0x03C2D930>, 'volumestep': <tkinter.StringVar object at 0x03C2D8F0>, 'profitstep': <tkinter.StringVar object at 0x03C2D450>, 'topvaluebuy': <tkinter.StringVar object at 0x03C2D490>, 'startvaluebuy': <tkinter.StringVar object at 0x03C53E50>, 'stopvaluebuy': <tkinter.StringVar object at 0x03C53F30>, 'floorvaluebuy': <tkinter.StringVar object at 0x03C53F90>, 'firstbuyflag': <tkinter.StringVar object at 0x03C53F50>, 'pluginfile': <tkinter.StringVar object at 0x03C53E30>, 'currentuseId': <tkinter.StringVar object at 0x03C53CF0>, 'floorvaluerange': <tkinter.StringVar object at 0x03C53D70>, 'topvaluerange': <tkinter.StringVar object at 0x03C53F70>, 'commonvaluestep': <tkinter.StringVar object at 0x03C53ED0>, 'runningmode': <tkinter.StringVar object at 0x03C5E550>, 'totalcostbuy': <tkinter.StringVar object at 0x03C5E090>, 'totalvolumebuy': <tkinter.StringVar object at 0x03C5E4F0>, 'stockpin': <tkinter.StringVar object at 0x03C5E150>, 'remaininvest': <tkinter.StringVar object at 0x03C5E690>}
2019-08-18 20:27:19,341,341 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:19,341,341 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:21,726,726 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:21,726,726 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:21,731,731 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:21,731,731 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:21,737,737 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:21,737,737 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:22,606,606 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:22,606,606 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:22,609,609 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:22,609,609 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:22,611,611 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:22,611,611 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:22,614,614 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:22,614,614 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:22,617,617 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:22,618,618 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:22,621,621 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:22,621,621 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:22,624,624 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:22,624,624 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:22,627,627 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:22,627,627 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:22,630,630 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:22,631,631 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:22,633,633 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:22,633,633 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:22,636,636 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:22,636,636 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:22,638,638 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:22,638,638 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:22,638,638 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:22,638,638 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:22,640,640 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:22,640,640 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:24,740,740 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:24,740,740 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:25,599,599 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:25,599,599 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:25,602,602 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:25,602,602 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:25,604,604 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:25,605,605 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:25,607,607 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:25,607,607 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:25,609,609 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:25,610,610 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:25,612,612 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:25,612,612 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:25,615,615 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:25,615,615 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:25,617,617 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:25,617,617 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:25,619,619 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:25,619,619 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:25,622,622 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:25,622,622 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:25,624,624 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:25,624,624 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:25,626,626 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:25,626,626 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:25,627,627 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:25,627,627 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:25,627,627 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:25,627,627 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:27,773,773 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:27,773,773 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:27,779,779 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:27,779,779 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:28,661,661 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:28,662,662 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:28,665,665 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:28,665,665 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:28,668,668 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:28,668,668 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:28,670,670 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:28,670,670 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:28,673,673 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:28,673,673 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:28,675,675 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:28,675,675 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:28,677,677 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:28,677,677 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:28,679,679 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:28,680,680 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:28,682,682 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:28,682,682 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:28,684,684 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:28,685,685 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:28,687,687 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:28,687,687 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:28,689,689 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:28,689,689 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:28,689,689 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:28,689,689 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:28,693,693 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:28,693,693 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:30,784,784 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:30,784,784 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:31,650,650 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:31,651,651 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:31,653,653 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:31,654,654 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:31,656,656 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:31,656,656 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:31,658,658 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:31,658,658 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:31,661,661 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:31,661,661 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:31,664,664 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:31,664,664 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:31,667,667 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:31,667,667 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:31,669,669 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:31,669,669 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:31,672,672 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:31,672,672 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:31,674,674 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:31,675,675 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:31,677,677 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:31,677,677 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:31,679,679 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:31,680,680 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:31,680,680 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:31,680,680 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:31,680,680 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:31,680,680 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:33,970,970 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:33,970,970 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:34,851,851 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:34,851,851 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '419058'}]>
2019-08-18 20:27:34,895,895 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:34,895,895 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:34,898,898 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:34,898,898 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:34,900,900 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:34,901,901 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:34,903,903 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:34,904,904 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:34,906,906 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:34,906,906 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:34,909,909 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:34,909,909 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:34,911,911 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:34,912,912 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:34,914,914 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:34,914,914 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:34,916,916 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:34,917,917 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:34,919,919 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:34,919,919 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:34,921,921 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:34,921,921 DEBUG [plugin_fivesteps.py:479] [{'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]
2019-08-18 20:27:34,921,921 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:34,922,922 DEBUG [plugin_fivesteps.py:481] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:34,922,922 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:34,922,922 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-08-18 20:27:34,943,943 DEBUG [plugin_fivesteps.py:517] Match found do remove matchedordermonitor below data
2019-08-18 20:27:34,944,944 DEBUG [plugin_fivesteps.py:518] [{'orderno': '465348', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '419058'}, {'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:34,944,944 DEBUG [plugin_fivesteps.py:522] Set commonvaluestep from def checkprocess2matchstatus
2019-08-18 20:27:34,944,944 DEBUG [plugin_fivesteps.py:523] 0.02
2019-08-18 20:27:34,944,944 DEBUG [plugin_fivesteps.py:542] ---Print difvaluerange for topvaluerange - floorvaluerange in def checkprocess2matchstatus
2019-08-18 20:27:34,944,944 DEBUG [plugin_fivesteps.py:543] 2.9
2019-08-18 20:27:34,944,944 DEBUG [plugin_fivesteps.py:673] ---allvol == 100 to sell or buy by bot def checkprocess2matchstatus
2019-08-18 20:27:34,944,944 DEBUG [plugin_fivesteps.py:674] +++print buy or sell in def checkprocess2matchstatus
2019-08-18 20:27:34,944,944 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:34,944,944 DEBUG [plugin_fivesteps.py:675] B
2019-08-18 20:27:34,945,945 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '20:27:34', 'referorderno': 'None', 'matcheddate': '2019-08-18'}]}
2019-08-18 20:27:34,945,945 DEBUG [plugin_fivesteps.py:680] Bot price to order buy and chkresult[price]
2019-08-18 20:27:34,945,945 ERROR [monitor.py:174] Exception occurred
Traceback (most recent call last):
  File "D:\workspace\anafin\pinkybot\monitor.py", line 172, in mypinkylogin
    self.monitoring(mydriver,return_login)
  File "D:\workspace\anafin\pinkybot\packsel.py", line 368, in monitoring
    resultMatch =self.myplugins.checkprocess2matchstatus(result_refreshbtn,self.order)
  File "D:\workspace\anafin\pinkybot\plugin_fivesteps.py", line 681, in checkprocess2matchstatus
    self.log["applog"].debug(botprice,chkresult["price"])
UnboundLocalError: local variable 'botprice' referenced before assignment
2019-08-18 20:27:37,092,92 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:37,092,92 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:37,941,941 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:37,941,941 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:27:37,944,944 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:37,944,944 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:37,946,946 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:37,946,946 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:37,949,949 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:37,949,949 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:37,951,951 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:37,951,951 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:37,954,954 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:37,954,954 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:37,956,956 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:37,956,956 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:37,959,959 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:37,959,959 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:37,961,961 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:37,961,961 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:37,963,963 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:37,964,964 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:37,967,967 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:37,967,967 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:37,970,970 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:37,970,970 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:37,971,971 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:37,971,971 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:37,971,971 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:37,971,971 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:40,101,101 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:40,101,101 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:40,959,959 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:40,959,959 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:27:40,962,962 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:40,962,962 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:40,964,964 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:40,964,964 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:40,967,967 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:40,968,968 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:40,971,971 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:40,971,971 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:40,974,974 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:40,974,974 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:40,976,976 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:40,976,976 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:40,979,979 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:40,979,979 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:40,981,981 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:40,981,981 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:40,984,984 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:40,984,984 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:40,988,988 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:40,988,988 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:40,990,990 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:40,990,990 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:40,990,990 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:40,990,990 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:40,993,993 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:40,993,993 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:43,115,115 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:43,116,116 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:43,989,989 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:43,990,990 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:27:43,992,992 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:43,993,993 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:43,995,995 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:43,995,995 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:43,998,998 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:43,998,998 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:44,000,0 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:44,001,1 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:44,004,4 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:44,004,4 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:44,006,6 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:44,006,6 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:44,009,9 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:44,009,9 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:44,011,11 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:44,012,12 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:44,014,14 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:44,014,14 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:44,016,16 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:44,017,17 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:44,019,19 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:44,019,19 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:44,019,19 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:44,019,19 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:44,020,20 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:44,020,20 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:46,125,125 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:46,126,126 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:46,131,131 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:46,131,131 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:46,137,137 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:46,137,137 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:46,985,985 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:46,985,985 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:27:46,988,988 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:46,988,988 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:46,990,990 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:46,990,990 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:46,993,993 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:46,993,993 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:46,995,995 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:46,995,995 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:46,998,998 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:46,998,998 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:47,000,0 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:47,000,0 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:47,003,3 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:47,004,4 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:47,006,6 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:47,006,6 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:47,009,9 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:47,009,9 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:47,011,11 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:47,011,11 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:47,013,13 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:47,014,14 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:47,014,14 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:47,014,14 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:47,016,16 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:47,016,16 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:49,141,141 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:49,141,141 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:50,014,14 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:50,014,14 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:27:50,017,17 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:50,017,17 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:50,019,19 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:50,020,20 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:50,022,22 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:50,022,22 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:50,024,24 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:50,025,25 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:50,027,27 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:50,027,27 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:50,029,29 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:50,030,30 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:50,032,32 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:50,032,32 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:50,034,34 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:50,035,35 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:50,037,37 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:50,037,37 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:50,040,40 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:50,040,40 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:50,042,42 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:50,042,42 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:50,042,42 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:50,043,43 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:50,047,47 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:50,047,47 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:52,154,154 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:52,155,155 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:53,016,16 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:53,016,16 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:27:53,019,19 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:53,019,19 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:53,021,21 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:53,021,21 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:53,024,24 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:53,024,24 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:53,026,26 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:53,026,26 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:53,028,28 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:53,028,28 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:53,031,31 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:53,031,31 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:53,033,33 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:53,033,33 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:53,035,35 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:53,035,35 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:53,038,38 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:53,038,38 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:53,042,42 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:53,044,44 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:53,047,47 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:53,047,47 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:53,047,47 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:53,047,47 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:53,050,50 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:53,051,51 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:55,167,167 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:55,167,167 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:55,173,173 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:55,173,173 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:56,014,14 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:56,014,14 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:27:56,017,17 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:56,017,17 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:56,019,19 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:56,019,19 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:56,022,22 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:56,022,22 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:56,024,24 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:56,024,24 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:56,026,26 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:56,026,26 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:56,028,28 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:56,029,29 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:56,031,31 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:56,031,31 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:56,033,33 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:56,033,33 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:56,035,35 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:56,036,36 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:56,038,38 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:56,038,38 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:56,041,41 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:56,041,41 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:56,041,41 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:56,041,41 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:56,041,41 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:56,041,41 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:27:58,180,180 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:27:58,181,181 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:27:59,030,30 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:59,031,31 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:27:59,033,33 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:59,034,34 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:59,036,36 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:59,036,36 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:59,038,38 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:59,038,38 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:59,041,41 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:59,041,41 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:59,043,43 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:59,043,43 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:59,046,46 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:59,046,46 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:59,048,48 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:59,048,48 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:59,050,50 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:59,051,51 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:27:59,053,53 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:59,053,53 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:27:59,056,56 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:27:59,056,56 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:27:59,058,58 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:59,058,58 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:27:59,058,58 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:27:59,058,58 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:27:59,061,61 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:27:59,061,61 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:01,191,191 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:01,191,191 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:01,197,197 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:01,197,197 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:02,078,78 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:02,078,78 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:02,080,80 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:02,081,81 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:02,083,83 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:02,083,83 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:02,085,85 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:02,085,85 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:02,087,87 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:02,088,88 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:02,090,90 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:02,090,90 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:02,093,93 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:02,093,93 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:02,095,95 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:02,096,96 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:02,098,98 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:02,098,98 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:02,100,100 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:02,100,100 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:02,103,103 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:02,103,103 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:02,105,105 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:02,105,105 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:02,105,105 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:02,105,105 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:02,107,107 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:02,107,107 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:04,204,204 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:04,204,204 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:05,086,86 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:05,086,86 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:05,089,89 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:05,090,90 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:05,093,93 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:05,093,93 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:05,095,95 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:05,096,96 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:05,098,98 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:05,098,98 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:05,100,100 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:05,100,100 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:05,103,103 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:05,103,103 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:05,106,106 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:05,106,106 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:05,109,109 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:05,109,109 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:05,112,112 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:05,113,113 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:05,115,115 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:05,115,115 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:05,117,117 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:05,118,118 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:05,118,118 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:05,118,118 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:05,118,118 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:05,118,118 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:07,215,215 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:07,215,215 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:07,221,221 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:07,221,221 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:08,102,102 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:08,103,103 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:08,105,105 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:08,106,106 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:08,108,108 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:08,108,108 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:08,111,111 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:08,111,111 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:08,114,114 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:08,114,114 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:08,116,116 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:08,116,116 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:08,119,119 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:08,119,119 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:08,121,121 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:08,121,121 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:08,123,123 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:08,124,124 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:08,126,126 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:08,126,126 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:08,128,128 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:08,128,128 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:08,130,130 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:08,130,130 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:08,130,130 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:08,130,130 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:08,131,131 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:08,132,132 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:11,088,88 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:11,089,89 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:11,091,91 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:11,092,92 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:11,094,94 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:11,094,94 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:11,096,96 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:11,097,97 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:11,099,99 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:11,099,99 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:11,101,101 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:11,102,102 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:11,104,104 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:11,104,104 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:11,106,106 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:11,106,106 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:11,108,108 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:11,109,109 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:11,111,111 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:11,111,111 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:11,113,113 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:11,114,114 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:11,116,116 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:11,116,116 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:11,116,116 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:11,116,116 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:11,117,117 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:11,117,117 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:13,239,239 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:13,239,239 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:13,245,245 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:13,245,245 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:14,092,92 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:14,092,92 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:14,095,95 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:14,095,95 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:14,097,97 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:14,097,97 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:14,100,100 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:14,100,100 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:14,102,102 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:14,103,103 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:14,105,105 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:14,105,105 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:14,107,107 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:14,107,107 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:14,109,109 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:14,110,110 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:14,112,112 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:14,112,112 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:14,115,115 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:14,115,115 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:14,117,117 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:14,117,117 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:14,120,120 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:14,120,120 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:14,120,120 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:14,120,120 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:14,120,120 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:14,120,120 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:16,252,252 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:16,252,252 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:16,258,258 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:16,258,258 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:17,121,121 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:17,121,121 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:17,124,124 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:17,124,124 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:17,126,126 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:17,126,126 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:17,129,129 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:17,129,129 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:17,131,131 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:17,131,131 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:17,133,133 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:17,133,133 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:17,135,135 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:17,136,136 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:17,138,138 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:17,138,138 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:17,140,140 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:17,141,141 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:17,143,143 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:17,143,143 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:17,146,146 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:17,146,146 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:17,149,149 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:17,149,149 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:17,149,149 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:17,149,149 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:17,149,149 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:17,149,149 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:19,265,265 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:19,266,266 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:19,271,271 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:19,271,271 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:20,139,139 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:20,139,139 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:20,142,142 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:20,142,142 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:20,144,144 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:20,144,144 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:20,147,147 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:20,147,147 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:20,151,151 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:20,151,151 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:20,154,154 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:20,154,154 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:20,157,157 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:20,157,157 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:20,160,160 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:20,160,160 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:20,163,163 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:20,163,163 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:20,165,165 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:20,165,165 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:20,168,168 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:20,168,168 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:20,170,170 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:20,170,170 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:20,170,170 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:20,170,170 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:20,172,172 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:20,174,174 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:22,278,278 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:22,279,279 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:22,284,284 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:22,284,284 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:23,119,119 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:23,119,119 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:23,121,121 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:23,122,122 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:23,124,124 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:23,124,124 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:23,127,127 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:23,127,127 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:23,129,129 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:23,129,129 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:23,132,132 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:23,132,132 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:23,134,134 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:23,135,135 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:23,137,137 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:23,137,137 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:23,139,139 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:23,140,140 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:23,142,142 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:23,142,142 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:23,144,144 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:23,145,145 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:23,147,147 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:23,147,147 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:23,147,147 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:23,147,147 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:23,148,148 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:23,149,149 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:25,291,291 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:25,291,291 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:26,153,153 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:26,153,153 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:26,156,156 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:26,156,156 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:26,158,158 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:26,158,158 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:26,161,161 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:26,161,161 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:26,163,163 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:26,163,163 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:26,166,166 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:26,166,166 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:26,168,168 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:26,169,169 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:26,171,171 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:26,171,171 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:26,173,173 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:26,174,174 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:26,176,176 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:26,176,176 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:26,178,178 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:26,179,179 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:26,181,181 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:26,181,181 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:26,181,181 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:26,181,181 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:26,184,184 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:26,184,184 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:28,305,305 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:28,305,305 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:29,157,157 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:29,158,158 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:29,160,160 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:29,161,161 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:29,163,163 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:29,163,163 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:29,165,165 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:29,166,166 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:29,168,168 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:29,169,169 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:29,171,171 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:29,171,171 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:29,174,174 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:29,174,174 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:29,177,177 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:29,177,177 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:29,180,180 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:29,180,180 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:29,182,182 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:29,182,182 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:29,185,185 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:29,186,186 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:29,188,188 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:29,188,188 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:29,188,188 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:29,188,188 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:29,189,189 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:29,189,189 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:31,314,314 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:31,314,314 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:31,319,319 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:31,319,319 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:32,163,163 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:32,163,163 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:32,166,166 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:32,166,166 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:32,169,169 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:32,169,169 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:32,171,171 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:32,172,172 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:32,174,174 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:32,175,175 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:32,177,177 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:32,177,177 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:32,180,180 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:32,180,180 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:32,182,182 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:32,182,182 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:32,184,184 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:32,185,185 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:32,187,187 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:32,188,188 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:32,190,190 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:32,190,190 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:32,192,192 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:32,192,192 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:32,192,192 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:32,192,192 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:32,193,193 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:32,193,193 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:35,208,208 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:35,208,208 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:35,211,211 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:35,211,211 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:35,213,213 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:35,214,214 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:35,216,216 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:35,216,216 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:35,218,218 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:35,219,219 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:35,222,222 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:35,222,222 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:35,224,224 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:35,224,224 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:35,226,226 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:35,227,227 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:35,229,229 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:35,229,229 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:35,231,231 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:35,231,231 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:35,234,234 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:35,234,234 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:35,236,236 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:35,236,236 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:35,236,236 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:35,237,237 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:35,241,241 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:35,241,241 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:37,343,343 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:37,343,343 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:37,348,348 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:37,348,348 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:37,354,354 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:37,354,354 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:37,360,360 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:37,360,360 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:37,366,366 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:37,366,366 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:38,224,224 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:38,225,225 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:38,227,227 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:38,228,228 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:38,230,230 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:38,230,230 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:38,232,232 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:38,233,233 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:38,235,235 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:38,235,235 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:38,237,237 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:38,237,237 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:38,240,240 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:38,240,240 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:38,242,242 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:38,243,243 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:38,245,245 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:38,245,245 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:38,247,247 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:38,247,247 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:38,249,249 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:38,250,250 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:38,252,252 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:38,252,252 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:38,252,252 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:38,252,252 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:38,253,253 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:38,253,253 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:40,357,357 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:40,357,357 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:41,246,246 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:41,246,246 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:41,249,249 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:41,249,249 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:41,251,251 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:41,252,252 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:41,255,255 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:41,255,255 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:41,259,259 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:41,259,259 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:41,262,262 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:41,263,263 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:41,266,266 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:41,266,266 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:41,270,270 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:41,270,270 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:41,274,274 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:41,275,275 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:41,278,278 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:41,278,278 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:41,282,282 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:41,283,283 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:41,286,286 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:41,286,286 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:41,286,286 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:41,286,286 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:41,287,287 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:41,287,287 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:43,371,371 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:43,371,371 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:44,247,247 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:44,247,247 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:44,249,249 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:44,250,250 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:44,252,252 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:44,252,252 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:44,255,255 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:44,255,255 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:44,257,257 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:44,258,258 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:44,260,260 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:44,260,260 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:44,262,262 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:44,263,263 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:44,265,265 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:44,266,266 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:44,268,268 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:44,268,268 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:44,270,270 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:44,270,270 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:44,273,273 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:44,273,273 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:44,275,275 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:44,275,275 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:44,275,275 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:44,275,275 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:44,276,276 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:44,276,276 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:46,381,381 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:46,382,382 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:46,387,387 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:46,387,387 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:46,392,392 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:46,393,393 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:47,257,257 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:47,257,257 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:47,261,261 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:47,261,261 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:47,264,264 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:47,264,264 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:47,266,266 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:47,266,266 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:47,269,269 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:47,269,269 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:47,271,271 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:47,271,271 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:47,274,274 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:47,274,274 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:47,277,277 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:47,277,277 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:47,280,280 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:47,280,280 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:47,282,282 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:47,283,283 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:47,285,285 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:47,285,285 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:47,288,288 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:47,288,288 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:47,288,288 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:47,288,288 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:47,288,288 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:47,288,288 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:50,240,240 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:50,240,240 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:50,243,243 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:50,244,244 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:50,246,246 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:50,246,246 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:50,248,248 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:50,249,249 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:50,251,251 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:50,251,251 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:50,253,253 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:50,253,253 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:50,255,255 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:50,256,256 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:50,258,258 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:50,258,258 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:50,261,261 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:50,261,261 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:50,263,263 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:50,264,264 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:50,266,266 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:50,266,266 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:50,268,268 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:50,268,268 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:50,269,269 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:50,269,269 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:50,269,269 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:50,269,269 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:52,407,407 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:52,407,407 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:52,412,412 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:52,412,412 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:53,249,249 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:53,250,250 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:53,252,252 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:53,252,252 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:53,255,255 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:53,255,255 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:53,258,258 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:53,258,258 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:53,261,261 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:53,262,262 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:53,265,265 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:53,265,265 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:53,268,268 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:53,268,268 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:53,271,271 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:53,271,271 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:53,273,273 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:53,273,273 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:53,276,276 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:53,276,276 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:53,279,279 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:53,279,279 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:53,282,282 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:53,282,282 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:53,282,282 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:53,282,282 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:53,285,285 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:53,285,285 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:55,421,421 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:28:55,421,421 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:28:56,263,263 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:56,264,264 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:56,266,266 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:56,267,267 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:56,269,269 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:56,269,269 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:56,271,271 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:56,272,272 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:56,274,274 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:56,274,274 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:56,276,276 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:56,276,276 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:56,279,279 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:56,279,279 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:56,281,281 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:56,282,282 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:56,284,284 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:56,284,284 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:56,286,286 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:56,286,286 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:56,288,288 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:56,289,289 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:56,291,291 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:56,291,291 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:56,291,291 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:56,291,291 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:56,292,292 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:56,292,292 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:28:59,279,279 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:59,280,280 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:28:59,282,282 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:59,282,282 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:59,284,284 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:59,285,285 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:59,287,287 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:59,287,287 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:59,289,289 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:59,290,290 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:59,292,292 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:59,292,292 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:59,295,295 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:59,295,295 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:59,298,298 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:59,298,298 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:59,300,300 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:59,301,301 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:28:59,303,303 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:59,303,303 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:28:59,305,305 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:28:59,305,305 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:28:59,308,308 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:59,308,308 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:28:59,308,308 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:28:59,308,308 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:28:59,312,312 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:28:59,312,312 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:01,444,444 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:01,444,444 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:02,283,283 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:02,283,283 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:02,286,286 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:02,286,286 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:02,289,289 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:02,289,289 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:02,291,291 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:02,292,292 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:02,294,294 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:02,294,294 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:02,297,297 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:02,298,298 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:02,300,300 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:02,300,300 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:02,303,303 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:02,303,303 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:02,305,305 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:02,306,306 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:02,308,308 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:02,308,308 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:02,310,310 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:02,311,311 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:02,314,314 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:02,314,314 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:02,314,314 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:02,314,314 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:02,314,314 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:02,314,314 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:04,460,460 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:04,460,460 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:04,465,465 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:04,465,465 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:05,308,308 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:05,309,309 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:05,312,312 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:05,312,312 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:05,315,315 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:05,315,315 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:05,318,318 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:05,318,318 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:05,320,320 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:05,320,320 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:05,323,323 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:05,323,323 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:05,325,325 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:05,325,325 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:05,328,328 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:05,328,328 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:05,330,330 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:05,331,331 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:05,333,333 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:05,333,333 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:05,336,336 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:05,336,336 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:05,338,338 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:05,338,338 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:05,338,338 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:05,339,339 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:05,342,342 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:05,342,342 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:07,472,472 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:07,472,472 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:07,478,478 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:07,478,478 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:08,325,325 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:08,325,325 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:08,328,328 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:08,328,328 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:08,330,330 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:08,331,331 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:08,334,334 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:08,334,334 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:08,336,336 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:08,337,337 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:08,339,339 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:08,339,339 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:08,342,342 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:08,342,342 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:08,344,344 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:08,344,344 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:08,347,347 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:08,347,347 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:08,350,350 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:08,350,350 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:08,352,352 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:08,352,352 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:08,355,355 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:08,355,355 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:08,355,355 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:08,355,355 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:08,358,358 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:08,358,358 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:10,484,484 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:10,485,485 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:11,328,328 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:11,328,328 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:11,331,331 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:11,331,331 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:11,334,334 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:11,334,334 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:11,337,337 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:11,337,337 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:11,339,339 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:11,340,340 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:11,342,342 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:11,342,342 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:11,345,345 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:11,345,345 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:11,347,347 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:11,348,348 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:11,351,351 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:11,351,351 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:11,353,353 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:11,354,354 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:11,356,356 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:11,356,356 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:11,358,358 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:11,358,358 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:11,358,358 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:11,359,359 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:11,362,362 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:11,362,362 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:13,498,498 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:13,498,498 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:14,352,352 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:14,353,353 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:14,355,355 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:14,356,356 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:14,358,358 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:14,358,358 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:14,360,360 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:14,361,361 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:14,363,363 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:14,363,363 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:14,365,365 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:14,366,366 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:14,368,368 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:14,369,369 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:14,373,373 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:14,373,373 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:14,377,377 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:14,377,377 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:14,379,379 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:14,380,380 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:14,382,382 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:14,382,382 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:14,385,385 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:14,385,385 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:14,385,385 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:14,386,386 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:14,386,386 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:14,386,386 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:16,512,512 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:16,512,512 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:16,518,518 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:16,518,518 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:17,363,363 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:17,363,363 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:17,365,365 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:17,366,366 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:17,368,368 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:17,368,368 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:17,371,371 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:17,371,371 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:17,374,374 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:17,374,374 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:17,376,376 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:17,376,376 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:17,379,379 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:17,379,379 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:17,381,381 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:17,381,381 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:17,383,383 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:17,383,383 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:17,386,386 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:17,386,386 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:17,389,389 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:17,389,389 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:17,391,391 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:17,391,391 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:17,391,391 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:17,391,391 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:17,392,392 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:17,392,392 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:19,527,527 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,527,527 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,532,532 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,532,532 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,537,537 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,537,537 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,543,543 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,543,543 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,548,548 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,549,549 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,554,554 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,554,554 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,559,559 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,559,559 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,565,565 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,565,565 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,570,570 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,570,570 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,575,575 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,575,575 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,581,581 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,581,581 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,586,586 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,586,586 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,592,592 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,592,592 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,597,597 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,597,597 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,603,603 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,603,603 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,608,608 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,608,608 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,613,613 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,614,614 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,619,619 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,619,619 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,625,625 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,625,625 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,630,630 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,630,630 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,636,636 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,636,636 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,641,641 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,641,641 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,646,646 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,646,646 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,652,652 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,652,652 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,657,657 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,658,658 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,663,663 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,663,663 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,669,669 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,669,669 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,674,674 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,674,674 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,680,680 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,680,680 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,685,685 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,685,685 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,691,691 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,691,691 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,696,696 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,696,696 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,702,702 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,702,702 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,707,707 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,707,707 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,712,712 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,712,712 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,718,718 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,718,718 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,724,724 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,724,724 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,729,729 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,729,729 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,734,734 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,735,735 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,740,740 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,740,740 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,745,745 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,746,746 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,751,751 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,751,751 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,756,756 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,757,757 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,762,762 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,762,762 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,768,768 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,768,768 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,773,773 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,773,773 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,779,779 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,779,779 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,784,784 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,784,784 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,790,790 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,790,790 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,795,795 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,795,795 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,800,800 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,800,800 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,806,806 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,806,806 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,811,811 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,811,811 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,816,816 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,816,816 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,822,822 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,822,822 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,827,827 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,827,827 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,832,832 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,833,833 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,838,838 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,838,838 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,843,843 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,843,843 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,848,848 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,848,848 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,854,854 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,854,854 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,859,859 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,859,859 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,864,864 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,864,864 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,870,870 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,870,870 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,875,875 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,875,875 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,880,880 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,880,880 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,886,886 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,886,886 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,891,891 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,891,891 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,896,896 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,896,896 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,902,902 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,902,902 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,907,907 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,908,908 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,913,913 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,913,913 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,918,918 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,918,918 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,924,924 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,924,924 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,929,929 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,929,929 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,935,935 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,935,935 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,940,940 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,940,940 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,945,945 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,946,946 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,951,951 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,951,951 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,956,956 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,956,956 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,961,961 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,962,962 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,967,967 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,967,967 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,972,972 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,972,972 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,977,977 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,978,978 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,983,983 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,983,983 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,988,988 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,988,988 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,994,994 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,994,994 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:19,999,999 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:19,999,999 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,004,4 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,004,4 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,010,10 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,010,10 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,015,15 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,015,15 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,021,21 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,021,21 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,026,26 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,026,26 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,031,31 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,032,32 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,037,37 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,037,37 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,042,42 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,042,42 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,048,48 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,048,48 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,053,53 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,053,53 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,058,58 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,059,59 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,064,64 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,064,64 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,069,69 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,069,69 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,075,75 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,075,75 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,080,80 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,080,80 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,085,85 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,086,86 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,091,91 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,091,91 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,096,96 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,097,97 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,102,102 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,102,102 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,107,107 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,108,108 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,113,113 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,113,113 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,118,118 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,118,118 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,124,124 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,124,124 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,129,129 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,129,129 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,134,134 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,135,135 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,140,140 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,140,140 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,145,145 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,145,145 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,151,151 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,151,151 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,156,156 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,156,156 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,161,161 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,161,161 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,167,167 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,167,167 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,172,172 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,173,173 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,178,178 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,179,179 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,184,184 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,184,184 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,189,189 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,189,189 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,195,195 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,195,195 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,200,200 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,200,200 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,206,206 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,206,206 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,211,211 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,211,211 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,217,217 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,217,217 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,222,222 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,222,222 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,228,228 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,228,228 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,233,233 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,233,233 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,239,239 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,239,239 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,244,244 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,244,244 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,250,250 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,250,250 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,255,255 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,255,255 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,261,261 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,261,261 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,266,266 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,266,266 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,272,272 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,272,272 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,277,277 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,278,278 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,283,283 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,283,283 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,289,289 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,289,289 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,294,294 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,294,294 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,299,299 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,299,299 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,305,305 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,305,305 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,310,310 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,310,310 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,315,315 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,316,316 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,321,321 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,321,321 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,326,326 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,326,326 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,331,331 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,332,332 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,337,337 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,337,337 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,342,342 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,342,342 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,348,348 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,348,348 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,353,353 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,353,353 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,358,358 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,358,358 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,364,364 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,364,364 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,369,369 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,369,369 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,375,375 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,375,375 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,380,380 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,380,380 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,386,386 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,386,386 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,391,391 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,391,391 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,397,397 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,397,397 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,402,402 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,402,402 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,408,408 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,408,408 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,413,413 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,413,413 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,419,419 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,419,419 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,424,424 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,425,425 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,430,430 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,430,430 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,435,435 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,436,436 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,441,441 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,441,441 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,446,446 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,446,446 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,451,451 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,452,452 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,457,457 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,457,457 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,462,462 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,462,462 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,468,468 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,468,468 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,473,473 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,473,473 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,479,479 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,479,479 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,484,484 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,485,485 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,490,490 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,490,490 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,495,495 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,495,495 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,501,501 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,501,501 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,506,506 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,506,506 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,512,512 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,512,512 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,517,517 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,518,518 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,523,523 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,523,523 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,528,528 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,528,528 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,534,534 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,534,534 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,539,539 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,539,539 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,545,545 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,545,545 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,550,550 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,550,550 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,556,556 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,556,556 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,561,561 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,562,562 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,567,567 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,567,567 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,572,572 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,572,572 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,578,578 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,578,578 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,583,583 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,584,584 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,589,589 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,589,589 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,594,594 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,595,595 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,600,600 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,600,600 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,605,605 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,606,606 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,611,611 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,611,611 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,616,616 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,617,617 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,622,622 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,622,622 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,627,627 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,628,628 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,633,633 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,633,633 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,639,639 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,639,639 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,644,644 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,644,644 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,649,649 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,650,650 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,655,655 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,655,655 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,660,660 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,661,661 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,666,666 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,666,666 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,671,671 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,672,672 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,677,677 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,677,677 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,682,682 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,683,683 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,688,688 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,688,688 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,693,693 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,694,694 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,699,699 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,699,699 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,704,704 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,704,704 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,710,710 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,710,710 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,715,715 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,715,715 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,720,720 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,720,720 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,726,726 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,726,726 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,731,731 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,732,732 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,737,737 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,737,737 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,742,742 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,743,743 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,748,748 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,748,748 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,753,753 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,754,754 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,759,759 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,759,759 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,765,765 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,765,765 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,770,770 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,770,770 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,776,776 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,776,776 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,781,781 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,781,781 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,787,787 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,787,787 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,792,792 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,792,792 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,798,798 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,798,798 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,803,803 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,803,803 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,809,809 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,809,809 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,814,814 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,814,814 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,820,820 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,820,820 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,825,825 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,825,825 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,830,830 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,831,831 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,836,836 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,836,836 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,842,842 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,842,842 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,847,847 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,847,847 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,853,853 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,853,853 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,858,858 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,858,858 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,864,864 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,864,864 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,869,869 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,869,869 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,875,875 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,875,875 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,880,880 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,880,880 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,886,886 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,886,886 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,891,891 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,891,891 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,897,897 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,897,897 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,902,902 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,902,902 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,908,908 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,908,908 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,913,913 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,913,913 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,919,919 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,919,919 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,924,924 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,924,924 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,930,930 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,930,930 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,935,935 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,935,935 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,941,941 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,941,941 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,946,946 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,946,946 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,952,952 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,952,952 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,957,957 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,957,957 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,963,963 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,963,963 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,968,968 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,968,968 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,974,974 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,974,974 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,979,979 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,979,979 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,985,985 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,985,985 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,990,990 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,990,990 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:20,996,996 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:20,996,996 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,001,1 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,001,1 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,007,7 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,007,7 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,012,12 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,012,12 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,018,18 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,018,18 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,023,23 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,023,23 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,029,29 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,029,29 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,034,34 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,035,35 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,040,40 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,040,40 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,045,45 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,045,45 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,051,51 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,051,51 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,056,56 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,056,56 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,062,62 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,062,62 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,067,67 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,067,67 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,073,73 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,073,73 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,078,78 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,078,78 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,084,84 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,084,84 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,089,89 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,089,89 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,095,95 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,095,95 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,100,100 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,100,100 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,106,106 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,106,106 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,111,111 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,111,111 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,117,117 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,117,117 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,122,122 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,122,122 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,128,128 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,128,128 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,133,133 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,134,134 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,139,139 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,139,139 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,144,144 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,145,145 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,150,150 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,150,150 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,155,155 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,156,156 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,161,161 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,161,161 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,167,167 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,167,167 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,172,172 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,172,172 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,177,177 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,178,178 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,183,183 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,183,183 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,188,188 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,189,189 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,194,194 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,194,194 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,199,199 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,199,199 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,205,205 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,205,205 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,210,210 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,211,211 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,216,216 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,216,216 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,222,222 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,222,222 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,227,227 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,227,227 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,233,233 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,233,233 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,238,238 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,238,238 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,244,244 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,244,244 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,249,249 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,249,249 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,255,255 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,255,255 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,260,260 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,260,260 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,266,266 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,266,266 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,271,271 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,271,271 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,277,277 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,277,277 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,282,282 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,282,282 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,288,288 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,288,288 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,293,293 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,293,293 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,298,298 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,299,299 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,304,304 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,304,304 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,309,309 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,309,309 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,314,314 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,314,314 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,320,320 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,320,320 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,325,325 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,325,325 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,330,330 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,330,330 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,336,336 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,336,336 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,341,341 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,341,341 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,346,346 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,346,346 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,352,352 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,352,352 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,357,357 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,357,357 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,362,362 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,362,362 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,368,368 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,368,368 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,373,373 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,373,373 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,378,378 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,378,378 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,384,384 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,384,384 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,389,389 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,389,389 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,394,394 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,394,394 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,399,399 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,400,400 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,405,405 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,405,405 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,410,410 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,410,410 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,415,415 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,416,416 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,421,421 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,421,421 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,426,426 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,426,426 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,431,431 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,432,432 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,437,437 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,437,437 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,442,442 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,442,442 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,447,447 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,447,447 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,453,453 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,453,453 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,458,458 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,458,458 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,463,463 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,463,463 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,469,469 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,469,469 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,474,474 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,474,474 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,479,479 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,479,479 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,485,485 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,485,485 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,490,490 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,490,490 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,495,495 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,495,495 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,501,501 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,501,501 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,506,506 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,506,506 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,511,511 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,511,511 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,517,517 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,517,517 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,522,522 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,522,522 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,528,528 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,528,528 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,533,533 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,533,533 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,539,539 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,539,539 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,544,544 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,544,544 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,549,549 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,549,549 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,555,555 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,555,555 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,560,560 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,560,560 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,565,565 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,565,565 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,571,571 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,571,571 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,576,576 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,576,576 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,581,581 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,582,582 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,587,587 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,587,587 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,592,592 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,592,592 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,598,598 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,598,598 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,603,603 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,603,603 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,609,609 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,609,609 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,614,614 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,615,615 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,620,620 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,620,620 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,626,626 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,626,626 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,631,631 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,631,631 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,637,637 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,637,637 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,642,642 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,642,642 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,648,648 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,648,648 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,653,653 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,654,654 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,659,659 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,659,659 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,664,664 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,665,665 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,670,670 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,670,670 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,676,676 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,676,676 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,681,681 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,681,681 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,687,687 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,687,687 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,692,692 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,692,692 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,698,698 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,698,698 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,703,703 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,704,704 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,709,709 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,709,709 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,714,714 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,715,715 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,720,720 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,720,720 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,726,726 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,726,726 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,731,731 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,731,731 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,737,737 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,737,737 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,742,742 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,742,742 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,748,748 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,748,748 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,753,753 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,754,754 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,759,759 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,759,759 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,765,765 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,765,765 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,770,770 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,770,770 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,776,776 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,776,776 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,781,781 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,781,781 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,787,787 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,787,787 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,792,792 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,792,792 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,798,798 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,798,798 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,803,803 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,804,804 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,809,809 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,809,809 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,814,814 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,814,814 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,819,819 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,820,820 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,825,825 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,825,825 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,830,830 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,830,830 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,836,836 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,836,836 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,841,841 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,841,841 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,847,847 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,847,847 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,852,852 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,852,852 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,858,858 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,858,858 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,863,863 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,863,863 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,869,869 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,869,869 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,874,874 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,874,874 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,879,879 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,880,880 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,885,885 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,885,885 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,890,890 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,890,890 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,896,896 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,896,896 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,901,901 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,901,901 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,907,907 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,907,907 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,912,912 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,912,912 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,918,918 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,918,918 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,923,923 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,923,923 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,929,929 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,929,929 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,934,934 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,935,935 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,940,940 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,940,940 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,945,945 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,946,946 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,951,951 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,951,951 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,956,956 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,957,957 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,962,962 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,962,962 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,967,967 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,967,967 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,973,973 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,973,973 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,978,978 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,978,978 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,984,984 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,984,984 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,989,989 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,989,989 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:21,995,995 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:21,995,995 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,000,0 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,000,0 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,006,6 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,006,6 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,011,11 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,011,11 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,017,17 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,017,17 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,022,22 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,022,22 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,028,28 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,028,28 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,033,33 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,033,33 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,039,39 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,039,39 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,044,44 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,044,44 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,050,50 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,050,50 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,056,56 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,056,56 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,061,61 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,061,61 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,067,67 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,067,67 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,072,72 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,073,73 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,078,78 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,078,78 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,083,83 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,083,83 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,089,89 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,089,89 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,095,95 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,095,95 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,100,100 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,100,100 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,105,105 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,106,106 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,111,111 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,111,111 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,117,117 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,117,117 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,122,122 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,122,122 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,128,128 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,128,128 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,133,133 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,133,133 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,139,139 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,139,139 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,144,144 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,144,144 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,150,150 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,150,150 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,155,155 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,156,156 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,161,161 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,161,161 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,166,166 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,167,167 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,172,172 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,173,173 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,179,179 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,179,179 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,184,184 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,184,184 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,190,190 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,190,190 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,195,195 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,195,195 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,200,200 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,200,200 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,206,206 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,206,206 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,211,211 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,211,211 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,217,217 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,217,217 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,222,222 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,222,222 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,228,228 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,228,228 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,233,233 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,233,233 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,239,239 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,239,239 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,245,245 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,245,245 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,250,250 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,250,250 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,255,255 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,255,255 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,261,261 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,261,261 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,266,266 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,266,266 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,271,271 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,272,272 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,277,277 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,277,277 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,282,282 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,282,282 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,288,288 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,288,288 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,293,293 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,293,293 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,299,299 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,299,299 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,304,304 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,304,304 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,310,310 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,310,310 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,315,315 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,315,315 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,320,320 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,321,321 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,326,326 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,326,326 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,332,332 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,332,332 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,337,337 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,337,337 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,343,343 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,343,343 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,348,348 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,348,348 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,354,354 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,354,354 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,359,359 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,359,359 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,365,365 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,365,365 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,370,370 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,370,370 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,376,376 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,376,376 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,381,381 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,381,381 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,387,387 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,387,387 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,392,392 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,392,392 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,398,398 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,398,398 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,403,403 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,403,403 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,409,409 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,409,409 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,414,414 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,414,414 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,420,420 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,420,420 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,425,425 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,425,425 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,431,431 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,431,431 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,436,436 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,436,436 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,442,442 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,442,442 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,447,447 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,447,447 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,452,452 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,453,453 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,458,458 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,458,458 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,463,463 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,463,463 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,468,468 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,469,469 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,474,474 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,474,474 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,479,479 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,480,480 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,485,485 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,485,485 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,491,491 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,491,491 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,496,496 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,496,496 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,502,502 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,502,502 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,507,507 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,507,507 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,513,513 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,513,513 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,518,518 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,518,518 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,524,524 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,524,524 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,529,529 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,529,529 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,535,535 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,535,535 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,540,540 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,540,540 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,546,546 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,546,546 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,551,551 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,551,551 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,557,557 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,557,557 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,562,562 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,562,562 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,567,567 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,567,567 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,573,573 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,573,573 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,578,578 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,578,578 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,583,583 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,583,583 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,589,589 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,589,589 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,594,594 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,594,594 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,599,599 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,599,599 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,605,605 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,605,605 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,610,610 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,610,610 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,615,615 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,616,616 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,621,621 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,621,621 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,626,626 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,626,626 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,632,632 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,632,632 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,637,637 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,637,637 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,642,642 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,643,643 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,648,648 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,648,648 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,653,653 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,653,653 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,659,659 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,659,659 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,664,664 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,664,664 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,669,669 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,669,669 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,675,675 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,675,675 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,680,680 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,680,680 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,685,685 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,685,685 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,691,691 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,691,691 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,696,696 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,696,696 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,701,701 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,702,702 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,707,707 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,707,707 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,712,712 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,712,712 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,717,717 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,718,718 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,723,723 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,723,723 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,728,728 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,728,728 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,734,734 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,734,734 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,739,739 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,739,739 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,744,744 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,744,744 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,750,750 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,750,750 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,755,755 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,755,755 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,760,760 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,760,760 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,766,766 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,766,766 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,771,771 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,771,771 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,776,776 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,776,776 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,782,782 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,782,782 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,787,787 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,787,787 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,792,792 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,792,792 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,798,798 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,798,798 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,803,803 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,803,803 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,808,808 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,808,808 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,814,814 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,814,814 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,819,819 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,819,819 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,824,824 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,824,824 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,830,830 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,830,830 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,835,835 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,835,835 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,840,840 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,840,840 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,845,845 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,846,846 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,851,851 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,851,851 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,856,856 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,856,856 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,862,862 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,862,862 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,867,867 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,867,867 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,872,872 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,872,872 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,878,878 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,878,878 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,883,883 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,884,884 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,889,889 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,889,889 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,894,894 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,895,895 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,900,900 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,900,900 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,905,905 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,906,906 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,911,911 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,911,911 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,917,917 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,917,917 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,922,922 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,922,922 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,928,928 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,928,928 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,933,933 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,933,933 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,939,939 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,939,939 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,944,944 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,944,944 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,949,949 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,949,949 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,955,955 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,955,955 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,960,960 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,960,960 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,966,966 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,966,966 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,971,971 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,972,972 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,977,977 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,977,977 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,983,983 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,983,983 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,988,988 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,988,988 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,993,993 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,994,994 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:22,999,999 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:22,999,999 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,005,5 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,005,5 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,010,10 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,010,10 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,016,16 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,016,16 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,021,21 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,021,21 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,026,26 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,027,27 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,032,32 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,032,32 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,037,37 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,038,38 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,043,43 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,043,43 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,049,49 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,049,49 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,054,54 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,054,54 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,060,60 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,060,60 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,065,65 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,065,65 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,071,71 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,071,71 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,076,76 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,076,76 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,082,82 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,082,82 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,087,87 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,087,87 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,093,93 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,093,93 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,098,98 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,098,98 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,104,104 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,104,104 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,109,109 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,109,109 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,115,115 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,115,115 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,120,120 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,120,120 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,126,126 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,126,126 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,131,131 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,131,131 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,136,136 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,137,137 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,142,142 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,142,142 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,147,147 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,148,148 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,153,153 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,153,153 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,159,159 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,159,159 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,164,164 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,164,164 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,170,170 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,170,170 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,175,175 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,175,175 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,180,180 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,181,181 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,186,186 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,186,186 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,192,192 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,192,192 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,197,197 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,197,197 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,203,203 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,203,203 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,208,208 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,208,208 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,214,214 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,214,214 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,219,219 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,219,219 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,224,224 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,224,224 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,230,230 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,230,230 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,235,235 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,236,236 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,241,241 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,241,241 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,246,246 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,246,246 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,252,252 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,252,252 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,257,257 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,257,257 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,263,263 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,263,263 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,268,268 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,268,268 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,274,274 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,274,274 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,279,279 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,279,279 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,285,285 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,285,285 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,290,290 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,290,290 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,296,296 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,296,296 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,301,301 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,301,301 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,307,307 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,307,307 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,312,312 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,313,313 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,318,318 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,318,318 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,323,323 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,324,324 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,329,329 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,329,329 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,334,334 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,334,334 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,340,340 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,340,340 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,345,345 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,346,346 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,351,351 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,351,351 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,356,356 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,357,357 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,362,362 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,362,362 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,368,368 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,368,368 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,373,373 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,373,373 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,378,378 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,379,379 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,384,384 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,384,384 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,389,389 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,389,389 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,395,395 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,395,395 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,400,400 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,400,400 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,406,406 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,406,406 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,411,411 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,411,411 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,417,417 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,417,417 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,422,422 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,422,422 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,428,428 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,428,428 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,433,433 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,433,433 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,438,438 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,439,439 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,444,444 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,444,444 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,450,450 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,450,450 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,455,455 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,455,455 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,461,461 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,461,461 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,466,466 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,466,466 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,472,472 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,472,472 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,477,477 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,477,477 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,483,483 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,483,483 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,488,488 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,488,488 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,494,494 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,494,494 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,499,499 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,500,500 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,505,505 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,505,505 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,510,510 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,511,511 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,516,516 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,516,516 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,521,521 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,521,521 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,527,527 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,527,527 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,532,532 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,533,533 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,538,538 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,538,538 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,543,543 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,543,543 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,549,549 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,549,549 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,554,554 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,554,554 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,560,560 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,560,560 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,565,565 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,565,565 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,571,571 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,571,571 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,576,576 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,576,576 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,582,582 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,582,582 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,587,587 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,588,588 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,593,593 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,593,593 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,598,598 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,599,599 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,604,604 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,604,604 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,610,610 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,610,610 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,615,615 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,615,615 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,621,621 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,621,621 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,626,626 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,626,626 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,631,631 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,632,632 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,637,637 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,637,637 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,643,643 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,643,643 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,648,648 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,648,648 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,654,654 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,654,654 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,659,659 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,659,659 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,664,664 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,665,665 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,670,670 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,670,670 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,675,675 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,676,676 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,681,681 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,681,681 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,686,686 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,687,687 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,692,692 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,692,692 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,697,697 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,697,697 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,702,702 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,703,703 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,708,708 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,708,708 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,713,713 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,713,713 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,719,719 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,719,719 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,724,724 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,724,724 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,730,730 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,730,730 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,735,735 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,735,735 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,740,740 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,740,740 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,746,746 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,746,746 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,751,751 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,751,751 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,757,757 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,757,757 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,762,762 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,762,762 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,768,768 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,768,768 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,773,773 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,773,773 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,779,779 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,779,779 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,784,784 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,784,784 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,790,790 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,790,790 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,795,795 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,795,795 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,801,801 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,801,801 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,806,806 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,806,806 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,812,812 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,812,812 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,817,817 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,817,817 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,823,823 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,823,823 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,828,828 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,828,828 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,833,833 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,833,833 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,839,839 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,839,839 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,844,844 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,844,844 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,849,849 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,850,850 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,855,855 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,855,855 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,860,860 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,860,860 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,865,865 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,865,865 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,871,871 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,871,871 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,876,876 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,876,876 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,881,881 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,881,881 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,887,887 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,887,887 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,892,892 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,892,892 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,897,897 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,897,897 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,903,903 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,903,903 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,908,908 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,908,908 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,914,914 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,914,914 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,919,919 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,919,919 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,924,924 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,925,925 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,930,930 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,930,930 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,936,936 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,936,936 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,941,941 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,941,941 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,947,947 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,947,947 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,952,952 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,952,952 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,958,958 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,958,958 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,963,963 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,963,963 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,968,968 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,969,969 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,974,974 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,974,974 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,979,979 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,980,980 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,985,985 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,985,985 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,991,991 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,991,991 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:23,996,996 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:23,996,996 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,001,1 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,002,2 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,007,7 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,007,7 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,012,12 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,012,12 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,018,18 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,018,18 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,023,23 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,023,23 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,028,28 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,029,29 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,034,34 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,034,34 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,039,39 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,039,39 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,045,45 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,045,45 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,050,50 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,050,50 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,055,55 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,055,55 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,060,60 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,060,60 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,066,66 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,066,66 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,071,71 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,071,71 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,077,77 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,077,77 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,082,82 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,082,82 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,087,87 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,087,87 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,093,93 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,093,93 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,098,98 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,098,98 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,103,103 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,104,104 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,109,109 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,109,109 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,114,114 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,114,114 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,120,120 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,120,120 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,125,125 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,125,125 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,130,130 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,130,130 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,136,136 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,136,136 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,141,141 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,141,141 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,146,146 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,146,146 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,151,151 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,152,152 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,157,157 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,157,157 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,162,162 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,162,162 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,167,167 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,167,167 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,173,173 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,173,173 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,179,179 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,179,179 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,184,184 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,184,184 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,189,189 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,189,189 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,195,195 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,195,195 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,200,200 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,200,200 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,206,206 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,206,206 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,211,211 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,211,211 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,217,217 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,217,217 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,222,222 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,222,222 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,228,228 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,228,228 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,233,233 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,233,233 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,238,238 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,239,239 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,244,244 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,244,244 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,249,249 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,249,249 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,255,255 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,255,255 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,260,260 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,260,260 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,266,266 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,266,266 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,271,271 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,271,271 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,277,277 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,277,277 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,282,282 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,282,282 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,288,288 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,288,288 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,293,293 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,293,293 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,299,299 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,299,299 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,304,304 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,304,304 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,310,310 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,310,310 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,315,315 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,315,315 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,321,321 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,321,321 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,326,326 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,326,326 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,331,331 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,331,331 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,337,337 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,337,337 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,342,342 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,342,342 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,348,348 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,348,348 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,353,353 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,354,354 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,359,359 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,359,359 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,364,364 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,364,364 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,370,370 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,370,370 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,375,375 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,375,375 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,381,381 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,381,381 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,387,387 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,387,387 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,392,392 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,392,392 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,397,397 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,398,398 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,403,403 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,403,403 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,408,408 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,409,409 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,414,414 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,414,414 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,420,420 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,420,420 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,425,425 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,425,425 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,431,431 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,431,431 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,436,436 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,436,436 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,442,442 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,442,442 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,447,447 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,447,447 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,453,453 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,453,453 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,458,458 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,458,458 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,464,464 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,464,464 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,469,469 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,469,469 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,475,475 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,475,475 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,480,480 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,480,480 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,486,486 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,486,486 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,491,491 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,491,491 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,497,497 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,497,497 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,502,502 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,502,502 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,507,507 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,507,507 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,513,513 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,513,513 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,518,518 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,518,518 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,523,523 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,524,524 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,529,529 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,529,529 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,534,534 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,534,534 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,540,540 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,540,540 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,545,545 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,545,545 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,551,551 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,551,551 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,556,556 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,556,556 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,561,561 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,561,561 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,567,567 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,567,567 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,572,572 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,572,572 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,578,578 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,578,578 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,583,583 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,583,583 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,588,588 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,589,589 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,594,594 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,594,594 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,599,599 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,599,599 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,605,605 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,605,605 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,610,610 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,610,610 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,615,615 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,616,616 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,621,621 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,621,621 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,626,626 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,626,626 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,632,632 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,632,632 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,637,637 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,637,637 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,643,643 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,643,643 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,648,648 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,648,648 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,653,653 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,654,654 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,659,659 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,659,659 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,664,664 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,664,664 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,670,670 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,670,670 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,675,675 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,675,675 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,680,680 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,680,680 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,686,686 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,686,686 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,691,691 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,691,691 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,697,697 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,697,697 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,702,702 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,702,702 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,707,707 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,707,707 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,713,713 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,713,713 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,718,718 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,718,718 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,723,723 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,724,724 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,729,729 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,729,729 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,734,734 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,734,734 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,740,740 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,740,740 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,745,745 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,745,745 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,751,751 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,751,751 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,756,756 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,757,757 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,762,762 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,762,762 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,768,768 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,768,768 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,768,768 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:24,769,769 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:24,772,772 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:24,772,772 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:24,774,774 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,774,774 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,774,774 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:24,775,775 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:24,777,777 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:24,777,777 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:24,779,779 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:24,779,779 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:24,780,780 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,780,780 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,782,782 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:24,782,782 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:24,784,784 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:24,785,785 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:24,786,786 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,786,786 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,787,787 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:24,788,788 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:24,790,790 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:24,791,791 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:24,792,792 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,792,792 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,793,793 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:24,793,793 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:24,795,795 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:24,796,796 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:24,798,798 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:24,798,798 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:24,798,798 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:24,798,798 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:24,798,798 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,798,798 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:24,804,804 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:24,804,804 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:24,809,809 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:24,810,810 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,551,551 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,551,551 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,557,557 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,557,557 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,562,562 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,562,562 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,568,568 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,568,568 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,573,573 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,573,573 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,579,579 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,579,579 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,584,584 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,584,584 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,589,589 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,590,590 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,595,595 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,595,595 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,600,600 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,600,600 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,606,606 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,606,606 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,611,611 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,611,611 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,617,617 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,617,617 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,622,622 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,622,622 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,627,627 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,628,628 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,633,633 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,633,633 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,638,638 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,638,638 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,644,644 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,644,644 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,649,649 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,649,649 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,651,651 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:25,652,652 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:25,654,654 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:25,655,655 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:25,655,655 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,656,656 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,657,657 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:25,658,658 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:25,660,660 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:25,660,660 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:25,661,661 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,661,661 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,662,662 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:25,663,663 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:25,665,665 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:25,665,665 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:25,667,667 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,668,668 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,668,668 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:25,668,668 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:25,671,671 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:25,671,671 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:25,674,674 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,674,674 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,674,674 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:25,674,674 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:25,677,677 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:25,677,677 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:25,679,679 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:25,679,679 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:25,679,679 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,680,680 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,681,681 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:25,681,681 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:25,681,681 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:25,681,681 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:25,685,685 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:25,685,685 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:25,691,691 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:25,691,691 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:26,531,531 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:26,531,531 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:26,534,534 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:26,534,534 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:26,537,537 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:26,537,537 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:26,540,540 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:26,540,540 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:26,543,543 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:26,543,543 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:26,545,545 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:26,545,545 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:26,547,547 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:26,548,548 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:26,550,550 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:26,550,550 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:26,552,552 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:26,553,553 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:26,556,556 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:26,556,556 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:26,558,558 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:26,559,559 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:26,561,561 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:26,561,561 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:26,561,561 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:26,561,561 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:26,566,566 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:26,566,566 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:28,563,563 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:28,563,563 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:28,569,569 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:28,569,569 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:29,191,191 ERROR [monitor.py:174] Exception occurred
Traceback (most recent call last):
  File "D:\workspace\anafin\pinkybot\monitor.py", line 172, in mypinkylogin
    self.monitoring(mydriver,return_login)
  File "D:\workspace\anafin\pinkybot\packsel.py", line 364, in monitoring
    result_refreshbtn=self.refreshbtn(driver,"partial")
  File "D:\workspace\anafin\pinkybot\packsel.py", line 579, in refreshbtn
    myrow = row.text.split(" ")
  File "c:\Python36\lib\site-packages\selenium\webdriver\remote\webelement.py", line 76, in text
    return self._execute(Command.GET_ELEMENT_TEXT)['value']
  File "c:\Python36\lib\site-packages\selenium\webdriver\remote\webelement.py", line 628, in _execute
    return self._parent.execute(command, params)
  File "c:\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 314, in execute
    self.error_handler.check_response(response)
  File "c:\Python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 242, in check_response
    raise exception_class(message, screen, stacktrace)
selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document
  (Session info: chrome=76.0.3809.100)

2019-08-18 20:29:31,575,575 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:31,575,575 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:32,424,424 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:32,424,424 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:32,427,427 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:32,427,427 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:32,430,430 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:32,430,430 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:32,432,432 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:32,432,432 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:32,435,435 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:32,435,435 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:32,437,437 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:32,437,437 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:32,439,439 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:32,440,440 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:32,443,443 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:32,443,443 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:32,445,445 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:32,445,445 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:32,447,447 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:32,448,448 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:32,450,450 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:32,450,450 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:32,452,452 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:32,452,452 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:32,452,452 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:32,452,452 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:32,453,453 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:32,453,453 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:34,589,589 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:34,589,589 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:34,594,594 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:34,594,594 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:35,435,435 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:35,435,435 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:35,438,438 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:35,438,438 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:35,440,440 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:35,440,440 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:35,444,444 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:35,444,444 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:35,447,447 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:35,447,447 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:35,449,449 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:35,450,450 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:35,452,452 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:35,452,452 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:35,454,454 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:35,455,455 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:35,457,457 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:35,457,457 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:35,461,461 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:35,461,461 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:35,463,463 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:35,463,463 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:35,465,465 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:35,466,466 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:35,466,466 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:35,466,466 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:35,469,469 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:35,469,469 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:38,429,429 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:38,429,429 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:38,431,431 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:38,432,432 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:38,434,434 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:38,434,434 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:38,436,436 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:38,436,436 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:38,439,439 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:38,439,439 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:38,441,441 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:38,441,441 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:38,444,444 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:38,444,444 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:38,447,447 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:38,447,447 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:38,449,449 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:38,449,449 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:38,451,451 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:38,452,452 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:38,454,454 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:38,454,454 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:38,456,456 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:38,456,456 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:38,457,457 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:38,457,457 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:38,457,457 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:38,457,457 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:41,469,469 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:41,470,470 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:41,472,472 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:41,473,473 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:41,475,475 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:41,475,475 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:41,478,478 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:41,478,478 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:41,481,481 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:41,481,481 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:41,483,483 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:41,484,484 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:41,486,486 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:41,486,486 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:41,488,488 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:41,489,489 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:41,491,491 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:41,491,491 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:41,494,494 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:41,494,494 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:41,497,497 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:41,497,497 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:41,499,499 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:41,499,499 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:41,499,499 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:41,499,499 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:41,502,502 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:41,503,503 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:43,626,626 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:43,626,626 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:44,464,464 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:44,464,464 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:44,466,466 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:44,467,467 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:44,469,469 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:44,469,469 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:44,471,471 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:44,472,472 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:44,474,474 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:44,474,474 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:44,477,477 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:44,477,477 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:44,480,480 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:44,480,480 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:44,482,482 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:44,483,483 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:44,485,485 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:44,485,485 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:44,488,488 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:44,488,488 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:44,490,490 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:44,490,490 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:44,492,492 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:44,493,493 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:44,493,493 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:44,493,493 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:44,494,494 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:44,494,494 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:46,639,639 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:46,639,639 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:47,489,489 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:47,489,489 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:47,492,492 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:47,492,492 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:47,494,494 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:47,494,494 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:47,497,497 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:47,497,497 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:47,500,500 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:47,500,500 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:47,502,502 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:47,503,503 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:47,505,505 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:47,505,505 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:47,507,507 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:47,508,508 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:47,510,510 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:47,510,510 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:47,512,512 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:47,513,513 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:47,515,515 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:47,515,515 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:47,518,518 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:47,518,518 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:47,518,518 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:47,518,518 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:47,522,522 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:47,522,522 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:49,651,651 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:49,651,651 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:50,486,486 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:50,486,486 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2974, 'orderno': '465348', 'time': '20:26:06', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:27:34', 'referorderno': '419058'}]>
2019-08-18 20:29:50,489,489 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:50,489,489 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2973, 'orderno': '610502', 'time': '20:25:38', 'symbole': 'WHA', 'side': 'S', 'price': '4.90', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:50,491,491 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:50,492,492 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2972, 'orderno': '754886', 'time': '20:25:37', 'symbole': 'WHA', 'side': 'S', 'price': '4.88', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:50,494,494 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:50,494,494 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2971, 'orderno': '963703', 'time': '20:25:36', 'symbole': 'WHA', 'side': 'S', 'price': '4.86', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:50,496,496 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:50,497,497 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2970, 'orderno': '940810', 'time': '20:25:35', 'symbole': 'WHA', 'side': 'S', 'price': '4.84', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:50,500,500 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:50,500,500 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2969, 'orderno': '775219', 'time': '20:25:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.82', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:50,502,502 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:50,502,502 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2968, 'orderno': '576407', 'time': '20:25:33', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:50,505,505 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:50,505,505 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2967, 'orderno': '808729', 'time': '20:25:32', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:50,507,507 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:50,507,507 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2966, 'orderno': '419058', 'time': '20:25:31', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:26:06', 'referorderno': '813548'}]>
2019-08-18 20:29:50,509,509 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:50,510,510 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2965, 'orderno': '320855', 'time': '20:25:30', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 8, 18), 'matchedtime': 'matchtime', 'referorderno': '813548'}]>
2019-08-18 20:29:50,512,512 DEBUG [packsel_model.py:367] Result from query database filter by orderno
2019-08-18 20:29:50,512,512 DEBUG [packsel_model.py:368] <QuerySet [{'id': 2964, 'orderno': '813548', 'time': '20:24:52', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '1000', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 8, 18), 'matchedtime': '20:25:29', 'referorderno': 'None'}]>
2019-08-18 20:29:50,515,515 DEBUG [plugin_fivesteps.py:478] === Print check_params , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:50,515,515 DEBUG [plugin_fivesteps.py:479] []
2019-08-18 20:29:50,515,515 DEBUG [plugin_fivesteps.py:480] === Print self.matchedordermonitor , self.matchedordermonitor in def checkprocess2matchstatus
2019-08-18 20:29:50,515,515 DEBUG [plugin_fivesteps.py:481] [{'orderno': '775219', 'price': '4.82', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '576407', 'price': '4.80', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '808729', 'price': '4.78', 'status': 'Pending(S)', 'referorderno': '813548'}, {'orderno': '320855', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '813548'}]
2019-08-18 20:29:50,519,519 DEBUG [tkconsole.py:881] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-08-18 20:29:50,520,520 DEBUG [tkconsole.py:882] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-08-18 20:29:52,666,666 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:52,666,666 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:52,671,671 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:52,672,672 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:52,677,677 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:52,677,677 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:52,683,683 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:52,683,683 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:52,688,688 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:52,688,688 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:52,694,694 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:52,694,694 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-08-18 20:29:52,700,700 DEBUG [tkconsole.py:995] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-08-18 20:29:52,700,700 DEBUG [tkconsole.py:996] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
