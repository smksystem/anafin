2019-05-12 16:27:36,744,744 INFO [plugin_fivesteps.py:13] Initialize of plugin_fivesteps
2019-05-12 16:27:36,744,744 INFO [packsel_model.py:10] Initialize log of packsel_model
2019-05-12 16:27:37,228,228 DEBUG [plugin_fivesteps.py:33] Print initial All Stockname Parameter
2019-05-12 16:27:37,228,228 DEBUG [plugin_fivesteps.py:34] None
2019-05-12 16:27:38,133,133 INFO [monitor.py:117] Start Login
2019-05-12 16:27:38,133,133 DEBUG [monitor.py:127] Login Parameter
2019-05-12 16:27:38,133,133 DEBUG [monitor.py:128] {'mybrokeId': '013', 'myuser': '014xxxx', 'mypassword': ''}
2019-05-12 16:27:53,449,449 INFO [monitor.py:159] Login seem to be succeeded , start to refresh all data from database with refresh all condition
2019-05-12 16:27:53,454,454 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:27:53,454,454 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'all'}
2019-05-12 16:27:53,469,469 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:27:53,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'all'}
2019-05-12 16:27:54,132,132 DEBUG [packsel.py:615] Do full update refresh all with below data in var mytable
2019-05-12 16:27:54,134,134 DEBUG [packsel.py:616] []
2019-05-12 16:27:54,134,134 DEBUG [packsel.py:622] Get all data from database in var rowupdaterefresh
2019-05-12 16:27:54,134,134 DEBUG [packsel.py:623] []
2019-05-12 16:27:54,137,137 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:27:54,137,137 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:01,272,272 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:01,272,272 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:03,029,29 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:03,029,29 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:03,049,49 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:03,049,49 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-05-12 16:28:03,887,887 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:03,887,887 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:03,912,912 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:03,912,912 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:04,596,596 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:04,596,596 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': 'None'}]>
2019-05-12 16:28:04,604,604 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:04,604,604 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:06,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:06,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:06,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:06,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:07,581,581 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:07,581,581 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': 'None'}]>
2019-05-12 16:28:07,591,591 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:07,591,591 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:10,226,226 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:10,226,226 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:10,941,941 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:10,941,941 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': 'None'}]>
2019-05-12 16:28:10,959,959 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:10,961,961 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-05-12 16:28:13,224,224 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:13,224,224 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:13,234,234 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:13,234,234 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:13,244,244 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:13,244,244 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:13,254,254 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:13,254,254 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:13,964,964 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:13,966,966 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': 'None'}]>
2019-05-12 16:28:13,974,974 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:13,974,974 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:16,226,226 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:16,226,226 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:16,236,236 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:16,236,236 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:16,249,249 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:16,249,249 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:16,881,881 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:16,884,884 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': 'None'}]>
2019-05-12 16:28:16,896,896 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:16,896,896 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:19,566,566 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:19,566,566 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:19,589,589 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:19,589,589 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:20,296,296 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:20,296,296 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': 'None'}]>
2019-05-12 16:28:20,324,324 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:20,324,324 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:28:20', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:28:20,326,326 DEBUG [plugin_fivesteps.py:500] Match found do remove matchedordermonitor below data
2019-05-12 16:28:20,326,326 DEBUG [plugin_fivesteps.py:501] [{'orderno': '588314', 'price': '4.72', 'status': 'Open(O)', 'referorderno': 'None'}]
2019-05-12 16:28:20,346,346 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:20,346,346 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:28:20', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:28:22,039,39 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:22,041,41 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:22,054,54 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:22,054,54 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:22,071,71 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:22,074,74 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '588314'}]}
2019-05-12 16:28:22,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,591,591 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,591,591 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,601,601 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,601,601 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,629,629 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,629,629 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,639,639 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,639,639 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,649,649 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,649,649 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,659,659 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,659,659 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,669,669 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,669,669 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,691,691 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,691,691 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,701,701 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,701,701 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,711,711 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,711,711 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,721,721 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,721,721 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,731,731 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,731,731 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,769,769 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,769,769 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,779,779 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,779,779 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,789,789 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,789,789 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,854,854 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,854,854 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,894,894 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,894,894 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,904,904 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,904,904 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,914,914 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,914,914 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,954,954 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,956,956 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,964,964 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,964,964 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,974,974 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,974,974 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:22,991,991 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:22,991,991 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,001,1 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,001,1 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,011,11 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,011,11 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,021,21 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,021,21 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,031,31 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,031,31 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,041,41 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,041,41 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,084,84 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,084,84 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,094,94 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,094,94 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,104,104 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,104,104 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,116,116 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,119,119 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,126,126 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,126,126 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,136,136 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,136,136 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,146,146 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,146,146 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,156,156 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,156,156 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,166,166 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,166,166 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,176,176 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,179,179 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,186,186 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,186,186 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,196,196 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,196,196 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,206,206 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,206,206 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,216,216 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,216,216 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,226,226 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,226,226 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,239,239 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,239,239 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,249,249 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,249,249 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,259,259 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,259,259 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,269,269 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,269,269 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,279,279 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,279,279 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,289,289 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,289,289 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,301,301 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,301,301 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,311,311 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,311,311 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,321,321 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,321,321 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,331,331 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,331,331 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,341,341 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,341,341 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,349,349 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,349,349 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,364,364 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,364,364 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,374,374 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,374,374 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,384,384 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,384,384 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,394,394 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,394,394 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,401,401 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,401,401 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,411,411 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,411,411 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,421,421 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,421,421 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,431,431 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,431,431 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,439,439 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,439,439 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,449,449 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,449,449 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,459,459 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,459,459 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,469,469 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,469,469 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,476,476 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,476,476 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,486,486 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,486,486 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,496,496 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,496,496 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,504,504 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,504,504 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,514,514 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,514,514 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,524,524 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,524,524 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,531,531 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,531,531 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,541,541 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,541,541 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,551,551 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,551,551 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,561,561 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,561,561 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,571,571 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,571,571 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,581,581 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,581,581 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,589,589 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,589,589 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,609,609 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,609,609 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,619,619 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,619,619 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,629,629 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,629,629 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,639,639 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,639,639 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,649,649 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,649,649 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,659,659 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,659,659 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,669,669 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,669,669 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,679,679 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,679,679 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,689,689 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,689,689 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,694,694 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:23,694,694 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:23,696,696 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,699,699 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,704,704 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:23,706,706 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:23,711,711 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,711,711 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,711,711 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:23,714,714 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:23,726,726 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,729,729 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,754,754 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:23,754,754 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '588314'}]}
2019-05-12 16:28:23,771,771 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,771,771 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,781,781 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,781,781 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,791,791 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,791,791 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,801,801 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,801,801 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,811,811 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,811,811 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,821,821 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,821,821 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,831,831 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,831,831 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,841,841 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,841,841 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,851,851 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,851,851 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,881,881 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,881,881 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,894,894 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,894,894 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,904,904 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,904,904 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,914,914 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,914,914 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,921,921 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,924,924 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,931,931 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,931,931 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,941,941 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,941,941 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,951,951 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,951,951 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,961,961 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,961,961 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:23,971,971 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:23,971,971 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,004,4 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,004,4 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,024,24 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,024,24 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,034,34 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,034,34 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,044,44 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,044,44 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,054,54 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,054,54 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,064,64 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,064,64 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,074,74 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,074,74 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,084,84 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,084,84 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,094,94 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,094,94 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,104,104 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,104,104 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,134,134 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,136,136 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,144,144 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,144,144 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,154,154 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,154,154 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,164,164 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,164,164 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,174,174 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,174,174 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,184,184 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,184,184 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,194,194 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,194,194 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,201,201 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,204,204 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,211,211 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,211,211 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,221,221 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,221,221 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,249,249 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,249,249 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,259,259 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,259,259 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,269,269 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,269,269 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,279,279 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,279,279 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,289,289 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,289,289 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,314,314 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,314,314 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,324,324 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,324,324 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,334,334 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,334,334 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,344,344 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,344,344 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,354,354 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,354,354 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,381,381 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,381,381 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,391,391 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,391,391 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,401,401 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,401,401 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,411,411 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,411,411 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,474,474 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,476,476 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,484,484 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,484,484 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,494,494 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,494,494 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,504,504 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,504,504 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,514,514 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,514,514 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,524,524 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,524,524 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,534,534 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,534,534 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,544,544 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,544,544 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,569,569 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,571,571 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,581,581 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,581,581 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,591,591 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,591,591 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,601,601 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,601,601 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,644,644 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,646,646 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,654,654 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,656,656 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,664,664 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,664,664 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,676,676 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,676,676 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,686,686 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,686,686 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,696,696 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,696,696 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,706,706 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,706,706 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,716,716 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,716,716 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,726,726 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,726,726 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,736,736 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,736,736 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,746,746 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,746,746 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,756,756 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,756,756 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,766,766 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,766,766 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,776,776 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,776,776 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,786,786 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,786,786 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,799,799 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,799,799 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,809,809 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,809,809 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,819,819 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,819,819 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,826,826 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,826,826 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,836,836 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,836,836 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,846,846 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,846,846 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,864,864 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,864,864 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,874,874 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,874,874 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,879,879 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,879,879 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,886,886 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,886,886 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,896,896 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,896,896 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,906,906 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,906,906 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,914,914 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,914,914 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,924,924 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,924,924 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,934,934 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,934,934 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,944,944 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,944,944 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,951,951 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,951,951 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,961,961 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,961,961 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,971,971 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,971,971 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,986,986 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,986,986 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:24,996,996 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:24,996,996 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,006,6 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,006,6 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,024,24 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,024,24 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,034,34 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,034,34 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,041,41 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,041,41 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,051,51 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,051,51 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,061,61 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,061,61 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,071,71 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,071,71 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,081,81 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,081,81 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,091,91 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,091,91 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,101,101 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,101,101 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,111,111 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,111,111 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,121,121 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,121,121 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,131,131 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,131,131 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,141,141 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,141,141 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,151,151 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,151,151 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,161,161 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,161,161 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,171,171 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,171,171 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,181,181 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,181,181 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,191,191 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,191,191 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,201,201 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,201,201 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,211,211 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,211,211 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,221,221 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,221,221 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,231,231 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,231,231 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,241,241 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,241,241 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,251,251 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,251,251 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,261,261 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,261,261 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,271,271 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,271,271 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,271,271 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:25,271,271 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:25,281,281 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,281,281 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,284,284 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:25,286,286 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:25,291,291 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,291,291 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,291,291 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:25,291,291 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:25,299,299 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:25,299,299 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:25,309,309 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,309,309 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,319,319 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:25,319,319 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '588314'}]}
2019-05-12 16:28:25,336,336 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,336,336 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,346,346 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,346,346 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,376,376 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,376,376 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,386,386 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,389,389 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,396,396 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,396,396 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,406,406 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,406,406 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,441,441 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,441,441 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,451,451 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,451,451 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,461,461 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,461,461 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,471,471 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,471,471 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,481,481 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,481,481 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,491,491 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,491,491 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,501,501 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,501,501 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,511,511 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,511,511 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,521,521 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,521,521 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,531,531 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,531,531 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,541,541 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,541,541 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,566,566 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,566,566 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,576,576 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,576,576 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,586,586 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,586,586 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,596,596 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,596,596 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,651,651 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,651,651 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,661,661 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,661,661 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,684,684 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,684,684 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,694,694 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,704,704 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,704,704 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,714,714 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,714,714 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,724,724 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,724,724 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,734,734 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,734,734 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,754,754 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,754,754 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,764,764 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,764,764 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,774,774 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,774,774 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,784,784 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,784,784 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,809,809 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,811,811 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,821,821 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,821,821 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,831,831 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,831,831 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,841,841 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,841,841 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,851,851 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,851,851 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,871,871 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,871,871 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,881,881 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,881,881 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,891,891 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,891,891 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,901,901 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,901,901 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,911,911 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,911,911 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,936,936 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,936,936 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,946,946 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,946,946 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,956,956 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,956,956 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,966,966 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,966,966 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,976,976 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,976,976 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:25,999,999 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:25,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,009,9 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,029,29 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,039,39 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,039,39 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,096,96 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,096,96 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,149,149 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,149,149 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,159,159 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,159,159 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,201,201 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,201,201 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,211,211 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,211,211 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,219,219 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,219,219 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,236,236 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,239,239 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,246,246 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,246,246 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,256,256 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,256,256 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,266,266 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,266,266 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,276,276 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,276,276 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,286,286 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,286,286 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,324,324 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,324,324 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,334,334 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,334,334 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,344,344 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,344,344 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,351,351 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,351,351 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,391,391 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,391,391 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,401,401 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,401,401 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,409,409 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,409,409 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,421,421 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,421,421 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,431,431 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,431,431 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,441,441 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,441,441 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,449,449 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,449,449 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,459,459 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,459,459 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,469,469 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,469,469 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,484,484 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,486,486 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,494,494 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,494,494 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,504,504 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,504,504 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,514,514 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,514,514 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,521,521 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,521,521 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,531,531 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,531,531 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,546,546 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,546,546 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,556,556 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,556,556 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,566,566 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,566,566 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,576,576 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,576,576 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,594,594 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,594,594 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,609,609 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,609,609 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,619,619 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,619,619 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,629,629 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,629,629 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,636,636 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,636,636 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,646,646 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,646,646 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,656,656 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,656,656 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,671,671 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,671,671 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,681,681 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,681,681 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,691,691 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,691,691 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,701,701 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,701,701 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,709,709 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,709,709 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,719,719 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,719,719 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,729,729 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,729,729 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,739,739 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,739,739 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,766,766 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,766,766 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,776,776 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,776,776 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,786,786 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,786,786 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,796,796 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,796,796 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,806,806 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,806,806 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,814,814 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,814,814 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,824,824 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,834,834 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,844,844 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,844,844 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,851,851 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,851,851 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,861,861 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,861,861 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,871,871 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,871,871 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,881,881 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,881,881 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,909,909 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,909,909 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,919,919 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,936,936 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,936,936 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,946,946 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,946,946 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,956,956 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,956,956 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,966,966 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,966,966 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,976,976 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,976,976 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,986,986 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,986,986 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:26,996,996 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:26,996,996 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,006,6 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,006,6 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,016,16 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,016,16 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,026,26 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,026,26 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,036,36 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,036,36 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,046,46 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,046,46 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,056,56 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,056,56 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,066,66 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,066,66 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,076,76 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,076,76 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,086,86 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,086,86 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,096,96 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,096,96 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,106,106 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,106,106 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,114,114 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:27,114,114 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:27,116,116 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,116,116 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,126,126 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:27,126,126 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:27,126,126 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,134,134 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:27,134,134 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:27,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,141,141 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:27,141,141 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:27,146,146 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:27,149,149 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:27,149,149 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,151,151 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,161,161 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,161,161 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,176,176 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,179,179 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,186,186 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:27,186,186 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '588314'}]}
2019-05-12 16:28:27,206,206 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,206,206 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,216,216 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,216,216 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,246,246 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,246,246 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,256,256 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,256,256 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,266,266 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,266,266 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,276,276 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,276,276 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,286,286 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,286,286 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,296,296 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,296,296 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,306,306 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,306,306 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,316,316 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,316,316 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,326,326 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,326,326 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,336,336 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,336,336 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,346,346 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,346,346 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,376,376 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,376,376 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,386,386 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,386,386 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,396,396 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,396,396 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,406,406 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,406,406 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,416,416 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,416,416 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,426,426 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,426,426 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,436,436 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,436,436 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,446,446 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,446,446 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,456,456 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,456,456 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,466,466 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,466,466 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,499,499 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,499,499 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,539,539 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,539,539 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,549,549 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,549,549 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,559,559 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,559,559 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,569,569 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,569,569 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,579,579 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,579,579 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,589,589 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,589,589 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,629,629 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,631,631 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,639,639 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,641,641 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,649,649 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,649,649 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,659,659 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,659,659 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,686,686 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,686,686 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,696,696 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,696,696 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,706,706 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,706,706 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,716,716 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,716,716 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,726,726 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,726,726 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,769,769 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,769,769 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,779,779 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,779,779 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,806,806 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,806,806 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,816,816 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,816,816 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,826,826 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,826,826 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,836,836 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,836,836 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,846,846 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,846,846 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,869,869 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,869,869 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,876,876 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,876,876 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,886,886 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,886,886 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,896,896 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,896,896 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,906,906 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,906,906 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,931,931 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,931,931 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,941,941 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,941,941 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,951,951 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,951,951 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,961,961 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,961,961 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,971,971 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,971,971 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:27,996,996 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:27,996,996 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,006,6 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,006,6 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,016,16 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,016,16 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,026,26 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,026,26 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,091,91 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,091,91 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,101,101 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,101,101 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,111,111 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,111,111 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,121,121 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,121,121 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,131,131 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,131,131 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,141,141 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,141,141 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,151,151 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,151,151 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,204,204 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,204,204 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,214,214 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,214,214 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,249,249 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,249,249 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,259,259 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,259,259 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,269,269 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,269,269 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,279,279 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,279,279 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,319,319 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,319,319 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,329,329 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,329,329 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,339,339 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,339,339 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,359,359 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,359,359 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,369,369 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,369,369 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,379,379 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,379,379 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,389,389 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,389,389 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,399,399 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,399,399 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,409,409 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,409,409 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,421,421 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,421,421 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,429,429 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,429,429 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,439,439 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,439,439 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,449,449 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,449,449 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,459,459 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,459,459 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,469,469 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,469,469 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,486,486 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,486,486 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,496,496 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,496,496 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,506,506 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,506,506 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,516,516 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,516,516 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,526,526 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,526,526 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,536,536 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,536,536 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,546,546 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,549,549 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,556,556 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,556,556 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,566,566 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,566,566 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,576,576 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,576,576 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,586,586 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,586,586 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,594,594 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,594,594 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,636,636 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,636,636 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,646,646 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,646,646 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,656,656 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,656,656 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,669,669 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,669,669 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,679,679 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,679,679 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,689,689 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,689,689 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,699,699 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,699,699 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,706,706 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,706,706 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,716,716 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,716,716 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,726,726 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,726,726 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,736,736 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,736,736 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,754,754 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,754,754 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,764,764 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,764,764 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,771,771 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,771,771 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,781,781 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,781,781 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,791,791 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,791,791 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,801,801 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,801,801 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,811,811 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,811,811 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,821,821 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,821,821 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,831,831 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,831,831 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,841,841 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,841,841 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,849,849 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,849,849 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,859,859 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,859,859 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,869,869 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,869,869 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,879,879 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,879,879 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,906,906 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,909,909 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,916,916 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,916,916 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,926,926 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,926,926 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,936,936 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,936,936 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,946,946 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,946,946 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,956,956 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,956,956 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,966,966 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,966,966 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,989,989 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,991,991 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:28,999,999 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:28,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,009,9 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,029,29 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,039,39 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,039,39 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,049,49 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,049,49 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,059,59 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,059,59 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,066,66 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,066,66 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,076,76 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,076,76 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,086,86 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,086,86 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,096,96 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,096,96 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,106,106 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,106,106 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,114,114 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,114,114 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,124,124 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:29,124,124 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:29,124,124 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,136,136 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:29,136,136 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:29,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,141,141 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:29,144,144 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:29,149,149 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,149,149 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,149,149 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:29,151,151 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:29,156,156 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:29,156,156 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:29,159,159 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,159,159 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,164,164 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:29,164,164 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:29,179,179 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,179,179 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,189,189 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,189,189 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,199,199 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,199,199 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,209,209 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:29,209,209 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '588314'}]}
2019-05-12 16:28:29,246,246 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,246,246 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,256,256 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,256,256 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,266,266 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,266,266 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,276,276 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,276,276 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,286,286 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,286,286 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,316,316 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,316,316 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,326,326 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,326,326 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,336,336 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,336,336 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,346,346 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,346,346 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,356,356 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,356,356 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,366,366 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,366,366 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,376,376 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,376,376 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,386,386 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,386,386 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,396,396 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,396,396 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,406,406 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,406,406 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,431,431 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,431,431 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,441,441 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,441,441 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,451,451 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,451,451 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,461,461 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,461,461 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,469,469 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,469,469 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,479,479 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,479,479 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,489,489 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,489,489 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,499,499 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,499,499 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,559,559 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,559,559 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,569,569 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,569,569 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,579,579 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,579,579 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,589,589 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,589,589 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,609,609 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,609,609 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,619,619 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,619,619 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,629,629 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,629,629 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,639,639 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,639,639 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,649,649 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,649,649 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,679,679 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,679,679 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,689,689 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,689,689 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,699,699 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,699,699 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,709,709 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,709,709 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,719,719 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,719,719 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,754,754 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,754,754 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,764,764 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,764,764 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,774,774 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,774,774 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,804,804 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,804,804 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,814,814 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,814,814 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,824,824 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,834,834 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,842,842 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,842,842 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,852,852 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,852,852 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,872,872 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,964,964 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,964,964 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:29,999,999 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:29,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,009,9 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,029,29 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,047,47 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,047,47 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,067,67 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,067,67 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,077,77 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,077,77 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,132,132 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,132,132 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,142,142 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,142,142 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,152,152 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,152,152 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,169,169 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,169,169 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,179,179 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,179,179 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,189,189 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,189,189 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,197,197 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,229,229 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,229,229 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,239,239 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,239,239 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,249,249 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,249,249 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,259,259 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,259,259 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,267,267 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,267,267 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,277,277 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,277,277 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,302,302 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,302,302 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,312,312 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,312,312 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,322,322 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,322,322 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,329,329 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,329,329 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,339,339 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,339,339 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,354,354 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,354,354 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,364,364 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,364,364 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,374,374 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,374,374 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,384,384 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,384,384 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,394,394 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,394,394 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,404,404 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,404,404 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,419,419 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,422,422 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,429,429 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,429,429 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,439,439 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,439,439 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,449,449 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,449,449 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,457,457 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,457,457 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,467,467 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,467,467 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,489,489 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,489,489 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,499,499 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,499,499 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,527,527 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,527,527 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,542,542 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,544,544 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,552,552 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,552,552 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,562,562 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,589,589 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,589,589 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,609,609 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,609,609 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,619,619 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,619,619 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,627,627 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,627,627 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,637,637 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,637,637 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,647,647 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,647,647 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,657,657 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,657,657 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,667,667 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,667,667 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,677,677 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,677,677 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,687,687 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,687,687 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,697,697 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,697,697 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,707,707 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,707,707 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,717,717 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,717,717 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,727,727 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,727,727 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,737,737 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,737,737 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,747,747 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,747,747 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,757,757 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,757,757 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,767,767 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,767,767 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,777,777 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,777,777 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,787,787 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,787,787 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,797,797 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,797,797 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,807,807 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,827,827 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,827,827 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,837,837 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,837,837 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,847,847 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,847,847 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,857,857 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,857,857 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,867,867 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,867,867 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,877,877 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,877,877 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,879,879 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,879,879 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,907,907 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,907,907 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,917,917 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,927,927 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,927,927 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,937,937 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,937,937 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,947,947 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,947,947 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,954,954 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,954,954 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,964,964 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:30,964,964 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:30,967,967 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,967,967 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,977,977 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:30,979,979 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:30,984,984 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:30,984,984 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:30,984,984 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,987,987 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:30,989,989 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:30,992,992 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:30,994,994 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:30,997,997 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:30,997,997 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:30,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,002,2 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:31,002,2 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:31,007,7 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:31,007,7 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:31,007,7 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,009,9 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,029,29 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,052,52 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,052,52 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,062,62 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:31,062,62 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '588314'}]}
2019-05-12 16:28:31,082,82 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,082,82 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,092,92 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,092,92 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,099,99 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,099,99 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,109,109 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,109,109 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,119,119 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,119,119 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,149,149 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,149,149 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,182,182 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,184,184 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,194,194 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,194,194 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,204,204 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,204,204 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,214,214 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,214,214 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,224,224 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,224,224 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,232,232 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,232,232 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,242,242 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,242,242 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,252,252 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,252,252 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,262,262 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,262,262 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,272,272 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,272,272 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,304,304 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,304,304 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,314,314 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,314,314 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,324,324 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,324,324 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,334,334 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,334,334 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,369,369 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,369,369 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,379,379 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,379,379 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,389,389 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,389,389 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,399,399 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,399,399 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,429,429 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,429,429 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,439,439 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,439,439 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,449,449 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,449,449 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,459,459 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,459,459 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,469,469 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,469,469 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,479,479 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,479,479 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,489,489 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,489,489 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,499,499 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,499,499 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,554,554 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,554,554 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,564,564 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,564,564 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,624,624 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,624,624 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,634,634 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,634,634 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,644,644 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,644,644 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,654,654 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,654,654 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,679,679 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,679,679 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,689,689 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,689,689 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,699,699 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,699,699 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,709,709 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,709,709 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,719,719 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,719,719 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,769,769 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,769,769 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,779,779 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,779,779 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,839,839 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,839,839 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,849,849 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,849,849 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,859,859 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,859,859 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,869,869 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,869,869 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,877,877 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,877,877 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,887,887 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,887,887 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,897,897 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,897,897 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,934,934 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,934,934 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,944,944 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,944,944 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,952,952 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,952,952 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:31,962,962 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:31,962,962 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,024,24 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,024,24 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,034,34 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,034,34 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,047,47 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,047,47 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,067,67 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,067,67 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,074,74 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,074,74 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,084,84 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,084,84 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,094,94 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,094,94 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,104,104 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,104,104 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,114,114 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,114,114 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,124,124 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,124,124 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,132,132 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,132,132 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,142,142 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,142,142 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,152,152 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,152,152 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,167,167 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,167,167 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,177,177 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,187,187 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,187,187 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,197,197 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,204,204 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,204,204 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,214,214 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,214,214 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,232,232 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,232,232 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,239,239 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,239,239 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,249,249 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,249,249 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,259,259 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,259,259 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,267,267 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,267,267 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,277,277 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,277,277 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,302,302 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,302,302 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,312,312 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,312,312 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,319,319 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,319,319 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,329,329 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,329,329 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,339,339 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,339,339 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,354,354 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,354,354 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,364,364 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,364,364 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,374,374 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,374,374 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,384,384 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,384,384 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,392,392 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,392,392 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,402,402 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,402,402 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,412,412 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,412,412 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,422,422 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,422,422 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,432,432 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,432,432 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,462,462 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,462,462 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,472,472 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,492,492 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,492,492 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,502,502 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,502,502 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,512,512 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,512,512 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,522,522 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,522,522 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,539,539 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,539,539 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,549,549 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,549,549 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,559,559 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,559,559 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,569,569 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,569,569 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,579,579 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,579,579 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,589,589 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,589,589 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,607,607 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,607,607 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,617,617 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,617,617 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,627,627 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,627,627 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,637,637 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,637,637 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,647,647 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,647,647 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,654,654 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,654,654 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,664,664 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,664,664 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,674,674 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,674,674 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,684,684 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,684,684 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,694,694 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,702,702 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,702,702 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,712,712 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,712,712 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,722,722 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,722,722 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,732,732 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,732,732 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,742,742 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,742,742 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,752,752 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,752,752 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,762,762 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,762,762 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,772,772 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,772,772 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,792,792 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,792,792 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,802,802 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,802,802 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,812,812 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,812,812 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,822,822 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,822,822 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,832,832 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,832,832 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,842,842 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,842,842 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,852,852 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,852,852 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,869,869 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,869,869 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,879,879 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,879,879 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,909,909 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,909,909 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,912,912 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:32,912,912 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:32,919,919 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,922,922 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:32,924,924 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:32,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,929,929 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:32,932,932 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:32,937,937 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:32,937,937 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:32,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,942,942 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,944,944 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:32,944,944 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:32,949,949 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,949,949 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,952,952 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:32,952,952 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:32,957,957 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:32,959,959 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:32,959,959 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,962,962 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,964,964 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:32,964,964 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:32,982,982 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,982,982 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:32,992,992 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:32,992,992 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,002,2 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,002,2 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,012,12 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,012,12 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,022,22 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:33,022,22 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '588314'}]}
2019-05-12 16:28:33,052,52 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,052,52 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,062,62 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,062,62 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,072,72 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,072,72 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,082,82 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,082,82 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,089,89 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,089,89 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,122,122 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,122,122 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,132,132 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,132,132 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,142,142 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,142,142 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,152,152 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,152,152 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,162,162 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,162,162 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,172,172 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,172,172 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,182,182 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,182,182 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,192,192 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,192,192 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,202,202 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,202,202 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,212,212 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,212,212 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,239,239 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,239,239 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,247,247 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,247,247 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,257,257 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,257,257 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,267,267 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,267,267 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,277,277 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,277,277 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,307,307 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,307,307 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,317,317 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,317,317 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,327,327 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,327,327 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,337,337 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,337,337 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,362,362 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,362,362 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,372,372 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,372,372 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,382,382 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,382,382 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,392,392 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,392,392 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,402,402 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,402,402 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,412,412 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,412,412 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,422,422 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,422,422 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,432,432 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,432,432 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,462,462 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,462,462 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,507,507 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,507,507 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,517,517 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,517,517 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,527,527 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,527,527 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,552,552 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,552,552 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,562,562 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,602,602 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,602,602 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,652,652 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,712,712 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,712,712 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,722,722 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,722,722 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,732,732 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,732,732 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,742,742 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,742,742 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,752,752 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,752,752 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,762,762 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,762,762 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,772,772 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,772,772 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,779,779 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,827,827 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,834,834 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,869,869 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,879,879 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,879,879 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,949,949 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,949,949 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,959,959 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,959,959 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,974,974 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,974,974 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,984,984 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,984,984 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:33,994,994 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:33,994,994 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,004,4 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,004,4 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,024,24 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,024,24 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,037,37 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,037,37 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,047,47 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,047,47 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,064,64 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,064,64 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,074,74 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,074,74 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,084,84 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,084,84 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,099,99 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,099,99 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,109,109 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,109,109 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,119,119 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,119,119 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,137,137 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,137,137 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,147,147 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,147,147 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,162,162 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,162,162 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,172,172 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,172,172 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,182,182 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,182,182 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,189,189 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,189,189 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,199,199 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,199,199 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,209,209 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,209,209 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,224,224 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,224,224 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,234,234 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,234,234 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,244,244 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,244,244 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,252,252 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,252,252 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,262,262 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,262,262 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,272,272 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,272,272 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,284,284 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,284,284 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,294,294 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,294,294 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,304,304 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,304,304 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,312,312 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,312,312 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,322,322 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,322,322 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,332,332 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,332,332 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,339,339 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,339,339 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,349,349 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,349,349 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,359,359 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,359,359 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,367,367 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,367,367 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,377,377 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,377,377 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,387,387 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,387,387 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,397,397 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,397,397 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,407,407 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,407,407 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,417,417 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,417,417 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,424,424 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,424,424 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,434,434 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,434,434 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,444,444 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,444,444 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,454,454 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,454,454 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,464,464 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,464,464 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,474,474 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,474,474 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,484,484 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,484,484 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,494,494 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,494,494 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,504,504 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,504,504 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,514,514 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,514,514 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,524,524 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,524,524 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,534,534 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,534,534 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,544,544 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,544,544 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,554,554 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,554,554 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,564,564 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,564,564 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,594,594 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,594,594 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,602,602 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,604,604 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,652,652 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,662,662 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,672,672 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,672,672 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,682,682 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,692,692 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,692,692 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,702,702 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,702,702 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,712,712 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,712,712 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,722,722 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,722,722 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,732,732 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,732,732 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,742,742 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,742,742 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,752,752 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,752,752 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,762,762 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,762,762 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,772,772 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,772,772 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,792,792 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,792,792 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,802,802 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,802,802 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,812,812 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,812,812 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,822,822 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,822,822 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,832,832 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,832,832 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,869,869 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,869,869 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,879,879 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,879,879 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,907,907 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,907,907 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,917,917 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:34,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,919,919 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:34,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,927,927 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:34,927,927 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:34,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,934,934 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:34,934,934 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:34,942,942 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:34,942,942 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:34,942,942 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,944,944 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,949,949 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:34,949,949 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:34,954,954 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,954,954 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,954,954 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:34,957,957 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:34,962,962 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:34,962,962 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:34,969,969 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:34,969,969 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:34,977,977 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:34,977,977 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:34,979,979 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,982,982 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:34,992,992 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:34,992,992 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,002,2 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,002,2 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,012,12 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,012,12 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,022,22 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,022,22 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,047,47 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:35,047,47 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '588314'}]}
2019-05-12 16:28:35,069,69 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,069,69 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,079,79 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,079,79 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,089,89 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,089,89 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,117,117 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,117,117 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,127,127 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,127,127 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,137,137 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,137,137 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,147,147 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,147,147 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,177,177 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,187,187 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,187,187 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,197,197 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,237,237 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,237,237 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,247,247 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,247,247 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,254,254 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,257,257 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,264,264 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,264,264 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,274,274 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,274,274 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,317,317 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,317,317 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,327,327 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,327,327 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,337,337 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,337,337 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,347,347 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,347,347 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,357,357 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,357,357 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,367,367 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,367,367 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,377,377 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,377,377 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,387,387 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,387,387 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,397,397 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,397,397 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,427,427 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,427,427 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,437,437 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,437,437 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,447,447 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,447,447 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,457,457 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,457,457 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,507,507 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,507,507 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,517,517 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,517,517 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,544,544 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,544,544 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,552,552 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,552,552 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,562,562 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,602,602 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,602,602 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,669,669 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,669,669 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,679,679 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,679,679 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,689,689 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,689,689 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,699,699 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,699,699 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,709,709 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,709,709 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,767,767 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,767,767 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,827,827 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,827,827 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,864,864 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,864,864 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,874,874 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,874,874 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,884,884 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,884,884 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,894,894 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,894,894 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,909,909 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,909,909 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,919,919 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,949,949 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,949,949 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,959,959 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,959,959 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:35,999,999 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:35,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,009,9 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,032,32 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,032,32 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,042,42 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,042,42 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,052,52 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,052,52 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,059,59 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,059,59 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,069,69 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,069,69 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,079,79 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,079,79 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,094,94 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,094,94 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,104,104 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,104,104 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,114,114 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,114,114 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,122,122 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,122,122 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,132,132 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,132,132 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,142,142 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,142,142 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,157,157 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,157,157 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,167,167 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,167,167 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,177,177 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,184,184 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,184,184 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,194,194 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,194,194 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,204,204 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,204,204 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,219,219 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,219,219 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,229,229 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,229,229 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,239,239 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,239,239 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,247,247 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,247,247 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,257,257 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,257,257 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,267,267 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,267,267 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,284,284 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,284,284 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,302,302 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,302,302 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,312,312 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,312,312 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,322,322 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,322,322 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,329,329 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,329,329 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,344,344 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,344,344 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,354,354 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,354,354 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,364,364 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,364,364 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,374,374 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,374,374 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,384,384 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,384,384 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,394,394 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,394,394 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,404,404 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,404,404 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,414,414 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,414,414 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,424,424 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,424,424 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,434,434 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,434,434 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,444,444 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,444,444 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,454,454 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,454,454 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,464,464 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,464,464 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,474,474 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,474,474 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,484,484 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,484,484 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,494,494 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,494,494 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,502,502 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,502,502 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,512,512 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,512,512 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,522,522 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,522,522 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,532,532 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,532,532 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,542,542 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,542,542 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,552,552 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,552,552 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,562,562 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,589,589 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,589,589 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,609,609 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,609,609 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,619,619 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,619,619 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,629,629 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,629,629 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,639,639 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,639,639 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,647,647 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,647,647 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,657,657 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,657,657 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,667,667 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,667,667 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,677,677 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,677,677 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,687,687 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,687,687 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,694,694 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,704,704 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,704,704 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,714,714 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,714,714 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,724,724 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,724,724 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,734,734 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,734,734 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,754,754 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,754,754 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,764,764 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,764,764 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,774,774 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,774,774 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,784,784 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,784,784 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,794,794 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,794,794 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,804,804 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,804,804 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,814,814 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,814,814 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,824,824 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,834,834 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,844,844 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,844,844 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,854,854 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,854,854 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,864,864 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,864,864 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,874,874 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,874,874 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,879,879 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,879,879 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,909,909 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,909,909 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,919,919 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,949,949 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,949,949 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,959,959 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,959,959 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,969,969 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,969,969 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,979,979 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,979,979 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,989,989 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,989,989 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:36,999,999 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:36,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,009,9 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,027,27 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,027,27 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,037,37 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,037,37 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,047,47 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,047,47 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,062,62 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:37,062,62 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:37,067,67 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,067,67 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,074,74 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:37,074,74 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:37,077,77 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,079,79 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,089,89 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:37,089,89 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:37,099,99 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,099,99 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,102,102 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:37,104,104 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:37,109,109 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,109,109 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,119,119 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,119,119 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,122,122 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:37,122,122 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:37,129,129 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:37,129,129 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:37,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,132,132 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,142,142 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,142,142 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,142,142 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:37,142,142 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:37,154,154 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:37,154,154 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:37,162,162 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,162,162 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,169,169 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:37,169,169 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:37,172,172 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,172,172 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,182,182 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:37,182,182 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:37,182,182 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,184,184 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,194,194 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,194,194 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,204,204 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,204,204 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,232,232 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,232,232 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,242,242 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,242,242 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,252,252 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,252,252 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,262,262 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:37,262,262 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '588314'}, {'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': '588314'}, {'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': '588314'}, {'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': '588314'}, {'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': '588314'}, {'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': '588314'}, {'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': '588314'}, {'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': '588314'}]}
2019-05-12 16:28:37,282,282 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,282,282 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,302,302 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,302,302 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,312,312 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,312,312 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,322,322 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,322,322 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,332,332 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,332,332 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,374,374 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,374,374 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,384,384 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,384,384 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,394,394 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,394,394 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,404,404 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,404,404 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,412,412 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,412,412 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,422,422 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,422,422 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,432,432 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,432,432 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,479,479 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,479,479 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,489,489 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,489,489 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,499,499 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,499,499 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,547,547 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,547,547 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,557,557 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,557,557 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,567,567 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,567,567 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,577,577 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,594,594 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,594,594 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,604,604 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,604,604 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,624,624 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,624,624 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,634,634 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,634,634 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,644,644 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,644,644 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,669,669 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,669,669 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,679,679 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,679,679 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,689,689 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,689,689 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,699,699 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,699,699 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,709,709 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,709,709 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,719,719 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,719,719 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,729,729 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,729,729 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,739,739 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,739,739 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,769,769 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,769,769 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,794,794 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,794,794 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,804,804 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,804,804 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,814,814 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,814,814 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,824,824 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,869,869 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,937,937 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,937,937 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,947,947 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,947,947 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,957,957 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,957,957 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,967,967 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,967,967 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,977,977 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,977,977 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,987,987 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,987,987 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:37,997,997 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:37,997,997 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,007,7 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,007,7 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,049,49 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,049,49 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,059,59 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,059,59 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,069,69 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,069,69 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,079,79 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,079,79 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,122,122 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,122,122 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,132,132 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,132,132 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,154,154 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,154,154 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,164,164 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,164,164 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,174,174 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,174,174 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,182,182 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,182,182 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,192,192 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,192,192 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,202,202 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,202,202 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,234,234 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,234,234 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,244,244 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,244,244 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,254,254 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,254,254 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,264,264 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,264,264 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,279,279 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,279,279 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,289,289 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,289,289 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,297,297 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,297,297 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,307,307 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,307,307 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,317,317 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,317,317 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,327,327 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,327,327 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,362,362 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,362,362 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,372,372 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,372,372 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,382,382 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,382,382 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,392,392 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,392,392 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,407,407 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,407,407 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,417,417 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,417,417 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,427,427 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,427,427 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,434,434 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,434,434 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,444,444 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,444,444 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,454,454 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,454,454 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,469,469 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,469,469 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,479,479 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,479,479 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,507,507 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,507,507 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,514,514 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,514,514 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,524,524 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,524,524 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,534,534 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,534,534 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,544,544 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,544,544 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,554,554 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,554,554 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,564,564 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,564,564 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,594,594 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,594,594 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,604,604 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,604,604 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,652,652 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,662,662 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,672,672 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,672,672 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,682,682 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,692,692 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,692,692 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,702,702 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,702,702 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,709,709 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,709,709 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,719,719 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,719,719 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,729,729 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,729,729 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,739,739 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,739,739 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,747,747 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,747,747 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,757,757 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,757,757 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,767,767 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,767,767 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,777,777 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,777,777 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,787,787 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,787,787 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,797,797 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,797,797 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,807,807 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,827,827 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,827,827 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,834,834 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,844,844 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,844,844 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,854,854 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,854,854 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,864,864 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,864,864 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,874,874 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,874,874 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,884,884 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,884,884 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,894,894 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,894,894 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,904,904 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,904,904 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,914,914 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,914,914 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,924,924 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,924,924 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,934,934 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,934,934 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,944,944 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,944,944 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,954,954 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,954,954 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,964,964 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,964,964 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,972,972 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,972,972 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,982,982 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,982,982 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:38,992,992 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:38,992,992 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,002,2 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,002,2 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,012,12 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,029,29 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,039,39 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,039,39 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,049,49 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,049,49 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,059,59 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,059,59 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,069,69 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,069,69 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,079,79 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,079,79 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,089,89 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,089,89 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,099,99 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,099,99 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,109,109 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,109,109 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,119,119 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,119,119 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,132,132 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:39,132,132 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:39,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,147,147 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:39,147,147 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:39,154,154 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:39,157,157 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:39,162,162 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,162,162 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,164,164 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:39,164,164 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:39,172,172 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:39,172,172 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:39,172,172 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,174,174 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,177,177 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:39,179,179 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:39,184,184 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,184,184 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,187,187 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:39,187,187 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:39,192,192 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:39,194,194 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:39,194,194 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,199,199 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:39,199,199 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:39,207,207 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:39,207,207 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:39,214,214 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:39,214,214 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:39,222,222 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,222,222 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,232,232 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,232,232 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,242,242 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,242,242 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,252,252 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,252,252 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,262,262 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,262,262 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,302,302 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,302,302 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,312,312 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:39,312,312 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '588314'}]}
2019-05-12 16:28:39,327,327 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,327,327 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,357,357 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,357,357 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,367,367 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,367,367 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,377,377 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,377,377 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,387,387 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,387,387 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,422,422 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,422,422 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,432,432 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,432,432 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,462,462 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,462,462 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,472,472 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,489,489 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,489,489 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,499,499 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,502,502 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,542,542 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,542,542 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,552,552 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,552,552 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,562,562 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,604,604 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,604,604 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,624,624 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,624,624 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,634,634 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,634,634 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,644,644 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,644,644 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,652,652 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,662,662 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,672,672 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,672,672 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,682,682 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,692,692 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,692,692 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,702,702 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,702,702 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,729,729 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,729,729 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,739,739 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,739,739 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,767,767 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,767,767 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,777,777 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,777,777 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,787,787 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,787,787 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,797,797 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,797,797 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,807,807 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,827,827 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,827,827 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,852,852 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,852,852 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,872,872 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,932,932 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:39,949,949 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:39,949,949 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,002,2 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,002,2 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,009,9 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,047,47 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,047,47 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,067,67 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,067,67 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,074,74 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,074,74 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,092,92 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,092,92 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,102,102 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,102,102 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,109,109 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,109,109 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,119,119 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,119,119 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,142,142 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,142,142 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,174,174 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,187,187 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,187,187 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,197,197 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,239,239 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,239,239 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,249,249 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,249,249 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,257,257 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,257,257 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,267,267 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,267,267 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,277,277 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,277,277 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,287,287 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,287,287 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,297,297 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,297,297 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,307,307 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,307,307 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,317,317 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,317,317 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,327,327 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,327,327 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,342,342 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,342,342 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,352,352 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,352,352 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,362,362 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,362,362 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,369,369 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,369,369 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,379,379 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,379,379 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,389,389 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,389,389 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,402,402 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,402,402 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,412,412 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,412,412 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,422,422 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,422,422 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,432,432 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,432,432 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,462,462 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,462,462 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,472,472 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,492,492 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,492,492 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,502,502 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,502,502 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,512,512 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,512,512 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,524,524 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,524,524 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,534,534 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,534,534 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,542,542 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,542,542 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,552,552 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,552,552 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,562,562 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,579,579 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,579,579 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,589,589 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,589,589 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,609,609 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,609,609 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,617,617 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,617,617 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,627,627 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,627,627 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,637,637 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,637,637 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,644,644 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,644,644 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,654,654 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,654,654 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,664,664 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,664,664 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,674,674 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,674,674 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,684,684 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,684,684 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,694,694 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,704,704 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,704,704 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,714,714 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,714,714 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,724,724 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,724,724 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,734,734 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,734,734 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,754,754 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,754,754 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,764,764 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,764,764 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,774,774 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,774,774 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,784,784 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,784,784 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,794,794 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,794,794 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,804,804 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,804,804 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,814,814 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,814,814 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,824,824 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,834,834 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,844,844 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,844,844 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,854,854 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,854,854 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,864,864 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,864,864 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,874,874 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,874,874 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,884,884 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,884,884 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,894,894 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,894,894 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,904,904 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,904,904 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,914,914 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,914,914 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,922,922 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,922,922 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,932,932 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,932,932 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,942,942 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,942,942 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,952,952 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,952,952 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,962,962 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,962,962 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,972,972 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,972,972 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,979,979 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,979,979 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,989,989 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,989,989 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:40,999,999 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:40,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,009,9 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,017,17 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,017,17 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,027,27 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,027,27 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,037,37 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,037,37 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,047,47 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,047,47 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,067,67 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,067,67 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,074,74 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,074,74 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,084,84 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,084,84 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,094,94 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,094,94 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,104,104 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,104,104 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,114,114 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,114,114 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,124,124 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,124,124 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,134,134 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,134,134 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,144,144 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,144,144 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,154,154 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,154,154 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,162,162 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,162,162 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,172,172 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,172,172 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,182,182 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,182,182 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,192,192 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,192,192 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,202,202 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,202,202 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,209,209 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,212,212 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,219,219 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,219,219 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,229,229 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,229,229 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,239,239 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,239,239 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,249,249 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,249,249 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,259,259 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,259,259 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,267,267 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,267,267 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,277,277 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,277,277 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,287,287 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,287,287 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,297,297 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,297,297 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,307,307 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,307,307 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,314,314 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,314,314 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,317,317 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,319,319 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:41,324,324 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,324,324 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,332,332 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,334,334 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:41,339,339 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,339,339 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:41,347,347 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,347,347 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:41,347,347 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,349,349 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,352,352 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,352,352 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:41,359,359 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,359,359 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,359,359 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,359,359 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:41,367,367 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,367,367 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:41,369,369 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,369,369 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,374,374 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,374,374 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:41,379,379 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,379,379 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:41,379,379 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,382,382 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,387,387 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,387,387 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:41,392,392 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,392,392 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,394,394 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,394,394 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:41,399,399 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:41,402,402 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:41,414,414 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,414,414 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,424,424 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,424,424 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,434,434 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,434,434 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,444,444 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,444,444 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,477,477 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,477,477 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,504,504 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,504,504 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,517,517 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,517,517 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,527,527 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,527,527 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,537,537 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:41,537,537 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '588314'}]}
2019-05-12 16:28:41,554,554 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,554,554 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,564,564 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,564,564 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,602,602 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,602,602 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,694,694 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,704,704 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,704,704 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,714,714 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,714,714 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,724,724 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,724,724 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,734,734 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,734,734 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,752,752 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,752,752 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,762,762 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,762,762 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,772,772 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,772,772 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,792,792 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,792,792 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,802,802 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,802,802 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,812,812 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,812,812 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,822,822 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,822,822 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,832,832 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,832,832 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,842,842 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,842,842 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,849,849 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,849,849 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,859,859 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,859,859 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,869,869 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,869,869 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,877,877 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,877,877 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,887,887 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,887,887 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,897,897 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,897,897 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,907,907 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,907,907 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,914,914 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,914,914 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,924,924 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,924,924 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,934,934 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,934,934 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,944,944 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,944,944 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,952,952 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,952,952 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,962,962 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,962,962 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,972,972 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,972,972 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,982,982 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,982,982 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:41,992,992 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:41,992,992 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,002,2 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,002,2 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,012,12 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,012,12 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,022,22 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,022,22 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,032,32 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,032,32 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,042,42 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,042,42 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,052,52 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,052,52 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,062,62 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,062,62 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,072,72 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,072,72 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,082,82 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,082,82 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,092,92 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,092,92 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,102,102 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,102,102 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,114,114 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,114,114 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,124,124 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,124,124 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,134,134 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,134,134 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,144,144 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,144,144 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,154,154 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,154,154 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,164,164 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,164,164 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,174,174 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,174,174 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,184,184 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,184,184 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,194,194 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,194,194 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,204,204 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,204,204 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,214,214 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,214,214 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,224,224 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,224,224 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,234,234 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,234,234 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,244,244 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,244,244 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,254,254 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,254,254 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,264,264 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,264,264 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,274,274 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,274,274 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,284,284 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,284,284 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,294,294 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,294,294 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,304,304 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,304,304 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,314,314 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,314,314 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,324,324 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,324,324 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,334,334 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,334,334 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,344,344 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,344,344 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,354,354 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,354,354 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,364,364 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,364,364 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,374,374 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,374,374 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,384,384 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,384,384 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,394,394 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,394,394 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,404,404 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,404,404 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,414,414 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,414,414 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,424,424 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,424,424 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,434,434 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,434,434 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,444,444 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,462,462 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,462,462 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,472,472 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,492,492 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,492,492 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,502,502 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,502,502 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,512,512 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,512,512 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,539,539 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,539,539 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,549,549 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,549,549 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,559,559 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,559,559 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,569,569 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,569,569 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,579,579 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,579,579 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,589,589 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,589,589 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,609,609 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,609,609 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,619,619 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,619,619 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,627,627 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,627,627 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,637,637 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,637,637 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,647,647 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,647,647 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,657,657 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,657,657 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,664,664 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,664,664 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,674,674 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,674,674 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,684,684 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,684,684 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,692,692 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,692,692 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,702,702 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,702,702 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,712,712 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,712,712 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,719,719 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,719,719 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,729,729 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,729,729 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,739,739 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,739,739 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,769,769 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,769,769 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,779,779 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,779,779 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,789,789 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,789,789 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,799,799 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,799,799 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,807,807 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,827,827 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,827,827 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,837,837 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,837,837 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,847,847 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,847,847 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,857,857 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,857,857 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,867,867 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,867,867 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,874,874 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,874,874 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:42,877,877 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,877,877 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,879,879 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,879,879 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:42,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,887,887 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,887,887 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:42,892,892 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,892,892 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:42,897,897 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,897,897 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:42,902,902 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,902,902 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:42,904,904 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,904,904 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,907,907 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,907,907 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:42,914,914 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,914,914 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,914,914 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,914,914 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:42,919,919 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,922,922 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:42,924,924 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,924,924 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,927,927 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,927,927 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:42,932,932 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,932,932 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:42,934,934 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,934,934 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,939,939 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:42,939,939 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:42,944,944 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,944,944 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,964,964 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,967,967 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,974,974 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,974,974 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,984,984 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,984,984 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:42,994,994 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:42,994,994 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,004,4 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:43,004,4 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:43,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,024,24 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,024,24 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,034,34 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,034,34 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,044,44 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,044,44 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,054,54 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,054,54 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,064,64 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,064,64 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,074,74 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,074,74 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,084,84 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,084,84 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,092,92 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,092,92 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,102,102 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,102,102 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,112,112 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,112,112 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,119,119 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,119,119 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,172,172 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,172,172 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,182,182 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,182,182 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,192,192 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,192,192 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,202,202 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,202,202 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,212,212 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,212,212 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,222,222 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,222,222 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,232,232 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,232,232 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,242,242 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,242,242 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,252,252 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,252,252 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,262,262 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,262,262 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,272,272 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,272,272 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,282,282 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,282,282 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,302,302 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,302,302 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,312,312 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,312,312 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,322,322 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,322,322 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,374,374 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,374,374 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,384,384 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,384,384 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,394,394 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,394,394 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,404,404 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,404,404 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,414,414 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,414,414 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,424,424 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,424,424 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,434,434 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,434,434 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,444,444 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,444,444 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,454,454 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,462,462 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,462,462 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,472,472 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,492,492 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,492,492 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,502,502 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,502,502 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,539,539 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,539,539 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,547,547 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,547,547 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,557,557 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,557,557 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,567,567 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,567,567 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,594,594 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,594,594 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,604,604 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,604,604 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,624,624 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,624,624 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,634,634 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,634,634 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,644,644 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,644,644 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,654,654 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,654,654 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,664,664 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,664,664 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,674,674 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,674,674 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,684,684 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,684,684 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,694,694 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,704,704 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,704,704 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,714,714 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,714,714 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,724,724 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,724,724 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,734,734 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,734,734 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,754,754 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,754,754 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,764,764 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,764,764 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,774,774 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,774,774 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,784,784 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,784,784 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,794,794 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,794,794 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,804,804 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,804,804 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,814,814 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,814,814 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,824,824 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,834,834 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,844,844 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,844,844 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,852,852 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,852,852 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,872,872 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,902,902 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,902,902 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,909,909 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,912,912 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,919,919 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,949,949 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,949,949 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,959,959 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,959,959 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,969,969 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,969,969 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,979,979 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,979,979 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,989,989 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,989,989 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:43,999,999 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:43,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,009,9 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,029,29 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,039,39 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,039,39 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,049,49 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,049,49 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,059,59 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,059,59 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,069,69 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,069,69 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,077,77 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,077,77 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,097,97 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,097,97 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,107,107 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,107,107 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,117,117 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,117,117 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,127,127 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,127,127 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,137,137 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,137,137 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,147,147 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,147,147 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,157,157 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,157,157 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,167,167 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,167,167 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,177,177 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,187,187 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,187,187 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,197,197 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,237,237 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,237,237 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,247,247 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,247,247 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,254,254 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,254,254 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:44,257,257 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,257,257 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,262,262 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,262,262 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:44,269,269 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,272,272 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:44,277,277 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,277,277 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:44,279,279 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,282,282 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,284,284 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,284,284 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:44,292,292 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,294,294 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:44,294,294 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,297,297 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,299,299 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,302,302 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:44,307,307 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,307,307 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,309,309 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,309,309 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:44,317,317 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,317,317 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:44,317,317 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,319,319 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,324,324 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,324,324 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:44,332,332 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,332,332 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:44,339,339 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,339,339 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,339,339 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:44,342,342 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:44,349,349 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,349,349 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,359,359 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,359,359 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,369,369 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,369,369 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,379,379 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,379,379 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,399,399 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,402,402 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,409,409 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:44,409,409 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:44,419,419 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,419,419 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,429,429 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,429,429 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,439,439 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,439,439 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,449,449 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,449,449 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,459,459 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,459,459 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,469,469 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,469,469 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,479,479 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,479,479 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,489,489 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,489,489 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,499,499 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,499,499 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,539,539 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,539,539 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,549,549 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,549,549 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,559,559 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,559,559 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,569,569 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,569,569 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,604,604 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,604,604 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,624,624 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,624,624 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,657,657 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,657,657 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,667,667 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,667,667 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,677,677 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,677,677 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,684,684 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,684,684 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,694,694 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,704,704 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,704,704 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,714,714 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,714,714 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,722,722 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,722,722 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,732,732 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,732,732 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,742,742 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,742,742 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,752,752 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,752,752 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,762,762 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,762,762 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,772,772 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,772,772 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,792,792 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,792,792 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,799,799 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,799,799 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,809,809 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,809,809 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,819,819 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,819,819 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,827,827 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,827,827 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,837,837 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,837,837 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,847,847 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,847,847 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,854,854 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,854,854 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,864,864 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,864,864 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,874,874 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,874,874 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,902,902 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,902,902 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,912,912 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,912,912 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,919,919 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,947,947 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,947,947 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,957,957 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,957,957 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,967,967 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,967,967 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,974,974 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,974,974 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,984,984 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,984,984 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:44,994,994 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:44,994,994 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,002,2 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,002,2 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,027,27 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,027,27 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,037,37 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,037,37 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,047,47 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,047,47 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,067,67 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,067,67 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,077,77 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,077,77 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,097,97 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,097,97 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,107,107 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,107,107 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,117,117 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,117,117 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,127,127 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,127,127 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,134,134 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,137,137 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,144,144 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,144,144 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,154,154 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,154,154 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,164,164 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,164,164 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,174,174 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,174,174 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,184,184 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,184,184 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,194,194 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,194,194 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,204,204 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,204,204 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,214,214 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,214,214 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,224,224 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,224,224 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,234,234 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,234,234 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,242,242 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,242,242 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,252,252 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,252,252 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,262,262 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,262,262 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,272,272 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,272,272 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,282,282 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,282,282 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,289,289 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,289,289 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,299,299 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,299,299 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,309,309 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,309,309 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,319,319 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,319,319 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,327,327 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,327,327 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,337,337 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,337,337 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,347,347 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,347,347 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,357,357 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,357,357 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,364,364 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,364,364 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,374,374 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,374,374 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,384,384 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,384,384 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,394,394 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,394,394 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,402,402 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,402,402 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,412,412 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,412,412 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,422,422 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,422,422 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,432,432 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,432,432 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,449,449 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,459,459 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,459,459 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,469,469 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,469,469 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,479,479 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,479,479 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,507,507 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,507,507 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,514,514 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,514,514 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,524,524 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,524,524 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,534,534 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,534,534 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,544,544 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,544,544 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,554,554 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,554,554 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,564,564 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,564,564 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,594,594 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,594,594 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,604,604 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,604,604 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,624,624 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,624,624 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,632,632 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,632,632 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:45,634,634 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,634,634 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,644,644 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,644,644 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,647,647 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,647,647 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:45,654,654 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,654,654 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,659,659 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,659,659 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:45,664,664 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,667,667 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,674,674 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,674,674 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:45,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,682,682 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,682,682 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,682,682 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:45,689,689 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,692,692 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:45,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,697,697 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,699,699 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,699,699 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:45,707,707 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,707,707 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:45,714,714 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,714,714 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,714,714 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,717,717 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:45,724,724 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,724,724 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:45,724,724 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,727,727 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,729,729 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,732,732 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:45,737,737 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,737,737 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,739,739 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:45,739,739 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:45,747,747 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,747,747 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,757,757 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,757,757 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,789,789 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,789,789 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,799,799 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,799,799 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,809,809 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:45,809,809 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': 'None'}, {'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': 'None'}, {'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-05-12 16:28:45,839,839 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,839,839 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,859,859 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,859,859 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,869,869 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,869,869 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,879,879 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,879,879 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,902,902 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,902,902 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,912,912 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,912,912 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,922,922 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,922,922 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,977,977 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,977,977 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,987,987 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,987,987 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:45,997,997 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:45,997,997 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,007,7 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,007,7 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,024,24 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,024,24 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,034,34 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,034,34 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,042,42 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,042,42 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,052,52 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,052,52 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,062,62 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,062,62 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,072,72 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,072,72 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,082,82 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,082,82 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,092,92 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,092,92 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,102,102 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,102,102 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,112,112 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,112,112 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,122,122 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,122,122 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,149,149 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,149,149 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,159,159 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,159,159 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,169,169 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,169,169 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,179,179 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,179,179 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,189,189 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,189,189 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,199,199 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,199,199 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,209,209 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,209,209 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,219,219 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,219,219 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,237,237 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,237,237 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,247,247 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,247,247 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,257,257 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,257,257 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,267,267 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,267,267 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,274,274 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,274,274 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,284,284 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,284,284 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,294,294 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,294,294 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,304,304 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,304,304 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,314,314 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,314,314 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,324,324 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,324,324 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,334,334 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,334,334 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,344,344 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,344,344 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,354,354 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,354,354 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,364,364 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,364,364 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,374,374 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,374,374 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,384,384 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,384,384 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,394,394 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,394,394 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,404,404 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,404,404 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,414,414 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,414,414 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,424,424 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,424,424 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,434,434 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,434,434 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,444,444 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,444,444 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,454,454 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,454,454 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,464,464 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,464,464 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,474,474 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,474,474 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,484,484 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,484,484 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,494,494 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,494,494 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,504,504 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,504,504 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,514,514 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,514,514 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,524,524 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,524,524 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,534,534 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,534,534 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,544,544 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,544,544 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,554,554 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,554,554 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,564,564 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,564,564 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,602,602 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,602,602 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,652,652 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,662,662 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,672,672 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,672,672 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,682,682 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,692,692 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,692,692 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,699,699 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,699,699 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,709,709 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,709,709 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,719,719 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,719,719 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,729,729 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,729,729 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,739,739 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,739,739 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,769,769 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,769,769 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,777,777 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,777,777 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,787,787 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,787,787 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,797,797 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,797,797 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,807,807 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,824,824 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,834,834 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,844,844 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,844,844 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,854,854 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,854,854 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,864,864 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,864,864 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,872,872 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,902,902 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,902,902 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,912,912 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,912,912 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,922,922 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,922,922 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,932,932 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,932,932 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,942,942 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,942,942 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,952,952 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,952,952 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,962,962 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,962,962 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,972,972 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,972,972 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,979,979 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,979,979 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,989,989 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,989,989 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:46,999,999 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:46,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,009,9 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,029,29 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,039,39 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,039,39 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,049,49 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,049,49 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,059,59 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,059,59 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,069,69 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,069,69 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,079,79 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,079,79 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,089,89 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,089,89 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,099,99 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,099,99 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,107,107 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,109,109 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,117,117 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,117,117 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:47,119,119 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,119,119 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,122,122 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,124,124 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:47,129,129 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,129,129 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:47,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,132,132 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,134,134 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,134,134 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:47,139,139 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,139,139 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:47,144,144 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,144,144 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:47,149,149 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,149,149 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,149,149 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,149,149 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:47,154,154 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,154,154 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:47,159,159 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,159,159 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,162,162 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,162,162 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:47,167,167 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,167,167 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:47,169,169 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,169,169 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,172,172 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,172,172 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:47,179,179 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:47,179,179 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:47,179,179 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,182,182 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,192,192 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,192,192 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,237,237 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:47,237,237 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:47,244,244 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,244,244 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,254,254 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,254,254 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,264,264 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,264,264 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,272,272 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,272,272 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,282,282 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,282,282 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,302,302 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,302,302 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,312,312 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,312,312 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,352,352 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,352,352 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,362,362 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,362,362 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,369,369 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,369,369 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,379,379 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,379,379 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,389,389 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,389,389 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,397,397 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,397,397 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,407,407 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,407,407 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,417,417 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,417,417 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,427,427 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,427,427 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,437,437 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,437,437 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,447,447 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,447,447 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,457,457 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,457,457 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,467,467 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,467,467 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,477,477 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,477,477 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,507,507 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,507,507 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,517,517 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,517,517 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,527,527 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,527,527 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,537,537 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,537,537 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,547,547 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,547,547 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,557,557 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,557,557 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,567,567 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,567,567 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,577,577 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,577,577 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,587,587 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,587,587 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,597,597 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,597,597 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,607,607 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,607,607 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,617,617 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,617,617 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,627,627 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,627,627 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,637,637 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,637,637 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,647,647 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,647,647 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,657,657 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,657,657 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,667,667 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,667,667 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,677,677 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,677,677 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,687,687 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,687,687 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,697,697 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,697,697 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,707,707 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,707,707 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,717,717 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,717,717 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,727,727 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,727,727 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,737,737 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,737,737 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,747,747 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,747,747 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,757,757 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,757,757 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,767,767 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,767,767 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,777,777 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,777,777 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,787,787 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,787,787 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,797,797 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,797,797 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,807,807 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,827,827 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,827,827 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,837,837 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,837,837 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,847,847 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,847,847 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,857,857 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,857,857 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,867,867 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,867,867 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,877,877 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,877,877 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,884,884 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,887,887 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,894,894 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,894,894 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,904,904 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,904,904 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,914,914 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,914,914 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,924,924 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,924,924 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,934,934 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,934,934 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,944,944 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,944,944 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,954,954 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,954,954 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,964,964 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,964,964 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,974,974 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,974,974 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,984,984 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,984,984 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:47,994,994 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:47,994,994 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,004,4 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,004,4 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,024,24 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,024,24 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,034,34 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,034,34 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,044,44 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,044,44 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,054,54 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,054,54 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,064,64 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,064,64 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,074,74 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,074,74 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,084,84 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,084,84 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,092,92 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,092,92 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,102,102 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,102,102 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,112,112 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,112,112 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,122,122 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,122,122 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,132,132 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,149,149 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,149,149 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,159,159 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,159,159 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,169,169 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,169,169 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,177,177 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,187,187 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,187,187 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,197,197 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,224,224 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,224,224 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,234,234 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,234,234 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,244,244 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,244,244 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,254,254 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,254,254 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,264,264 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,264,264 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,272,272 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,272,272 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,282,282 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,282,282 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,302,302 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,302,302 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,312,312 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,312,312 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,337,337 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,337,337 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,347,347 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,347,347 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,357,357 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,357,357 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,367,367 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,367,367 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,377,377 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,377,377 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,387,387 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,387,387 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,394,394 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,394,394 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,404,404 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,404,404 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,414,414 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,414,414 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,424,424 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,424,424 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,432,432 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,432,432 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,462,462 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,462,462 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,472,472 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,489,489 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,489,489 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,499,499 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,499,499 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,527,527 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,527,527 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,537,537 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,537,537 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,547,547 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,547,547 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,554,554 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,554,554 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,564,564 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,564,564 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,594,594 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,594,594 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,599,599 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,602,602 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:48,604,604 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,604,604 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,607,607 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,607,607 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:48,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,614,614 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,614,614 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:48,619,619 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,619,619 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:48,624,624 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,624,624 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,624,624 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,627,627 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:48,632,632 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,632,632 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:48,639,639 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,639,639 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:48,644,644 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,644,644 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,644,644 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,644,644 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:48,649,649 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,649,649 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:48,654,654 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,654,654 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,657,657 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,657,657 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:48,662,662 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,662,662 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:48,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,664,664 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,667,667 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:48,667,667 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:48,674,674 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,674,674 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,684,684 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,684,684 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,704,704 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,707,707 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,714,714 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,714,714 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,724,724 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:48,724,724 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:48,734,734 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,734,734 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,742,742 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,742,742 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,752,752 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,752,752 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,762,762 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,762,762 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,772,772 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,772,772 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,789,789 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,789,789 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,799,799 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,799,799 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,809,809 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,809,809 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,847,847 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,847,847 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,857,857 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,857,857 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,867,867 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,867,867 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,877,877 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,877,877 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,902,902 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,902,902 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,912,912 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,912,912 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,922,922 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,922,922 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,932,932 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,932,932 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,942,942 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,942,942 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,952,952 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,952,952 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,962,962 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,962,962 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,972,972 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,972,972 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,982,982 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,982,982 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:48,992,992 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:48,992,992 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,002,2 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,002,2 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,012,12 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,012,12 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,022,22 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,022,22 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,032,32 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,032,32 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,042,42 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,042,42 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,052,52 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,052,52 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,062,62 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,062,62 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,072,72 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,072,72 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,082,82 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,082,82 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,092,92 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,092,92 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,102,102 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,102,102 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,112,112 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,112,112 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,122,122 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,122,122 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,132,132 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,132,132 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,142,142 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,142,142 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,152,152 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,152,152 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,162,162 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,162,162 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,172,172 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,172,172 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,182,182 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,182,182 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,192,192 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,192,192 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,202,202 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,202,202 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,212,212 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,212,212 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,222,222 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,222,222 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,232,232 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,232,232 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,242,242 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,242,242 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,252,252 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,252,252 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,262,262 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,262,262 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,272,272 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,272,272 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,282,282 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,282,282 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,302,302 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,302,302 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,309,309 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,312,312 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,322,322 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,322,322 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,332,332 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,332,332 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,342,342 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,342,342 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,352,352 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,352,352 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,362,362 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,362,362 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,372,372 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,372,372 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,379,379 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,382,382 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,389,389 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,389,389 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,399,399 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,399,399 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,409,409 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,409,409 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,419,419 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,419,419 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,429,429 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,429,429 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,439,439 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,439,439 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,449,449 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,449,449 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,459,459 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,459,459 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,469,469 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,469,469 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,479,479 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,479,479 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,489,489 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,489,489 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,499,499 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,499,499 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,539,539 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,539,539 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,549,549 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,549,549 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,559,559 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,559,559 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,567,567 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,569,569 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,577,577 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,579,579 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,587,587 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,587,587 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,597,597 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,597,597 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,607,607 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,607,607 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,617,617 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,617,617 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,627,627 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,627,627 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,637,637 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,637,637 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,647,647 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,647,647 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,657,657 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,657,657 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,667,667 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,667,667 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,677,677 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,677,677 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,687,687 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,687,687 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,694,694 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,704,704 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,704,704 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,714,714 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,714,714 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,724,724 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,724,724 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,734,734 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,734,734 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,754,754 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,754,754 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,764,764 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,764,764 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,774,774 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,774,774 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,784,784 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,784,784 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,794,794 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,794,794 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,804,804 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,804,804 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,814,814 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,814,814 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,824,824 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,834,834 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,844,844 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,844,844 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,852,852 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,852,852 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,872,872 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,909,909 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,909,909 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,919,919 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,937,937 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,937,937 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,947,947 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,947,947 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,954,954 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:49,957,957 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:49,957,957 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,959,959 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,962,962 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:49,962,962 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:49,967,967 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:49,967,967 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:49,967,967 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,969,969 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,972,972 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:49,972,972 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:49,977,977 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:49,977,977 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:49,979,979 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,979,979 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,982,982 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:49,984,984 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:49,987,987 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:49,989,989 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:49,989,989 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,989,989 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:49,992,992 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:49,994,994 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:49,999,999 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:49,999,999 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:49,999,999 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:49,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,004,4 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:50,004,4 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:50,009,9 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:50,009,9 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:50,014,14 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:50,014,14 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:50,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,029,29 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,039,39 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,039,39 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,049,49 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:50,049,49 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:50,059,59 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,059,59 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,077,77 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,079,79 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,097,97 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,097,97 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,107,107 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,107,107 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,114,114 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,114,114 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,124,124 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,124,124 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,134,134 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,134,134 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,144,144 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,144,144 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,154,154 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,154,154 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,162,162 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,164,164 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,172,172 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,172,172 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,182,182 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,182,182 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,242,242 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,242,242 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,252,252 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,252,252 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,262,262 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,262,262 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,272,272 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,272,272 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,282,282 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,282,282 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,302,302 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,302,302 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,312,312 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,312,312 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,322,322 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,322,322 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,332,332 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,332,332 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,342,342 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,342,342 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,352,352 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,352,352 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,362,362 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,362,362 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,372,372 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,372,372 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,382,382 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,382,382 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,392,392 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,392,392 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,402,402 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,402,402 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,412,412 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,412,412 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,422,422 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,422,422 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,432,432 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,432,432 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,462,462 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,462,462 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,472,472 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,492,492 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,492,492 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,502,502 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,502,502 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,512,512 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,512,512 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,522,522 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,522,522 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,532,532 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,532,532 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,542,542 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,542,542 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,552,552 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,552,552 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,562,562 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,602,602 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,602,602 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,652,652 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,662,662 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,672,672 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,672,672 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,682,682 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,692,692 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,692,692 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,702,702 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,702,702 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,712,712 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,712,712 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,722,722 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,722,722 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,732,732 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,732,732 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,739,739 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,739,739 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,769,769 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,769,769 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,792,792 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,792,792 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,802,802 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,802,802 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,812,812 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,812,812 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,822,822 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,822,822 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,832,832 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,832,832 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,842,842 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,842,842 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,852,852 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,852,852 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,872,872 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,902,902 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,902,902 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,909,909 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,909,909 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,919,919 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,949,949 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,949,949 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,959,959 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,959,959 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,969,969 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,969,969 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,979,979 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,979,979 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,989,989 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,989,989 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:50,999,999 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:50,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,009,9 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,029,29 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,037,37 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,037,37 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,047,47 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,047,47 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,067,67 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,067,67 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,077,77 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,077,77 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,094,94 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,094,94 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,104,104 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,104,104 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,114,114 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,114,114 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,124,124 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,124,124 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,134,134 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,134,134 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,144,144 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,144,144 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,152,152 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,152,152 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,162,162 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,162,162 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,172,172 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,172,172 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,179,179 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,179,179 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,189,189 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,189,189 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,199,199 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,199,199 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,234,234 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,234,234 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,244,244 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,244,244 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,254,254 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,254,254 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,264,264 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,264,264 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,274,274 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,274,274 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,284,284 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,284,284 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,294,294 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,294,294 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,302,302 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,302,302 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:51,304,304 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,304,304 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,307,307 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,309,309 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:51,314,314 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,314,314 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:51,322,322 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,322,322 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:51,327,327 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,329,329 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:51,332,332 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,332,332 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,334,334 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,334,334 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:51,339,339 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,339,339 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:51,342,342 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,342,342 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,344,344 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,347,347 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:51,352,352 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,352,352 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:51,352,352 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,352,352 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,357,357 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,357,357 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:51,362,362 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,362,362 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:51,362,362 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,364,364 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,367,367 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:51,367,367 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:51,387,387 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,389,389 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,397,397 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,397,397 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,407,407 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,407,407 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,417,417 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:51,417,417 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:51,427,427 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,427,427 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,434,434 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,434,434 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,454,454 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,462,462 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,462,462 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,472,472 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,492,492 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,492,492 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,502,502 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,502,502 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,512,512 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,512,512 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,539,539 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,539,539 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,547,547 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,549,549 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,557,557 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,557,557 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,649,649 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,649,649 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,659,659 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,659,659 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,669,669 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,669,669 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,679,679 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,679,679 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,689,689 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,689,689 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,699,699 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,699,699 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,709,709 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,709,709 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,719,719 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,719,719 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,729,729 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,729,729 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,739,739 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,739,739 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,769,769 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,769,769 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,779,779 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,779,779 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,789,789 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,789,789 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,802,802 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,802,802 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,812,812 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,812,812 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,822,822 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,822,822 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,832,832 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,832,832 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,842,842 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,842,842 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,852,852 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,852,852 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,872,872 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,909,909 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,909,909 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,919,919 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,947,947 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,947,947 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,957,957 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,957,957 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,967,967 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,967,967 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,977,977 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,977,977 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,987,987 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,987,987 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:51,997,997 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:51,997,997 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,007,7 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,007,7 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,017,17 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,017,17 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,027,27 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,037,37 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,037,37 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,047,47 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,047,47 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,067,67 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,067,67 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,077,77 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,077,77 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,097,97 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,097,97 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,107,107 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,107,107 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,117,117 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,117,117 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,127,127 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,127,127 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,137,137 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,137,137 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,147,147 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,147,147 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,157,157 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,157,157 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,167,167 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,167,167 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,177,177 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,187,187 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,187,187 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,197,197 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,237,237 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,237,237 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,247,247 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,247,247 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,257,257 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,257,257 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,267,267 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,267,267 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,277,277 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,277,277 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,287,287 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,287,287 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,297,297 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,297,297 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,307,307 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,307,307 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,317,317 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,317,317 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,327,327 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,327,327 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,337,337 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,337,337 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,347,347 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,347,347 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,357,357 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,357,357 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,367,367 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,367,367 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,377,377 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,377,377 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,384,384 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,384,384 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,394,394 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,394,394 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,404,404 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,404,404 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,414,414 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,414,414 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,424,424 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,424,424 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,432,432 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,432,432 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,462,462 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,462,462 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,472,472 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,492,492 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,492,492 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,499,499 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,499,499 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,539,539 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,539,539 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,549,549 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,549,549 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,559,559 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,559,559 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,569,569 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,569,569 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,579,579 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,579,579 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,589,589 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,589,589 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,607,607 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,607,607 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,617,617 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,617,617 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,627,627 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,627,627 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,637,637 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,637,637 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,647,647 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,647,647 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,657,657 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,657,657 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,667,667 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,667,667 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,677,677 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,677,677 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,687,687 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,687,687 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,697,697 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,697,697 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,707,707 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,707,707 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,717,717 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,717,717 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,727,727 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,727,727 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,734,734 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,737,737 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:52,737,737 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,739,739 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,742,742 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,742,742 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:52,747,747 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,747,747 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:52,752,752 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,752,752 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:52,757,757 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,757,757 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:52,762,762 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,762,762 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,762,762 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,762,762 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:52,769,769 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,769,769 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:52,772,772 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,772,772 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,774,774 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,774,774 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:52,779,779 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,782,782 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:52,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,784,784 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,787,787 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,787,787 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:52,792,792 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,794,794 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:52,794,794 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,797,797 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,799,799 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:52,799,799 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:52,807,807 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,824,824 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,837,837 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,844,844 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:52,844,844 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:52,854,854 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,854,854 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,864,864 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,864,864 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,887,887 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,887,887 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,897,897 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,897,897 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,907,907 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,907,907 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,917,917 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,924,924 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,924,924 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,934,934 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,934,934 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,944,944 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,944,944 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,954,954 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,954,954 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,964,964 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,964,964 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,974,974 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,974,974 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,984,984 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,984,984 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:52,994,994 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:52,994,994 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,029,29 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,039,39 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,039,39 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,049,49 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,049,49 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,059,59 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,059,59 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,069,69 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,069,69 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,077,77 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,077,77 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,097,97 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,097,97 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,104,104 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,104,104 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,114,114 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,114,114 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,127,127 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,127,127 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,137,137 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,137,137 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,147,147 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,147,147 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,157,157 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,157,157 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,167,167 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,167,167 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,177,177 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,187,187 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,187,187 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,197,197 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,234,234 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,234,234 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,244,244 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,244,244 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,254,254 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,254,254 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,264,264 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,264,264 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,274,274 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,274,274 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,284,284 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,284,284 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,294,294 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,294,294 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,304,304 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,304,304 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,314,314 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,314,314 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,322,322 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,322,322 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,332,332 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,332,332 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,342,342 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,342,342 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,349,349 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,349,349 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,359,359 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,359,359 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,369,369 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,369,369 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,377,377 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,377,377 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,387,387 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,387,387 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,397,397 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,397,397 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,404,404 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,404,404 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,414,414 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,414,414 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,424,424 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,424,424 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,434,434 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,434,434 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,444,444 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,444,444 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,454,454 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,454,454 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,464,464 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,464,464 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,474,474 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,474,474 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,484,484 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,484,484 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,494,494 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,494,494 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,504,504 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,504,504 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,514,514 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,514,514 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,524,524 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,524,524 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,534,534 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,534,534 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,544,544 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,544,544 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,554,554 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,554,554 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,564,564 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,602,602 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,602,602 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,652,652 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,662,662 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,672,672 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,672,672 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,682,682 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,692,692 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,692,692 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,702,702 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,702,702 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,712,712 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,712,712 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,722,722 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,722,722 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,732,732 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,732,732 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,742,742 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,742,742 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,769,769 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,769,769 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,779,779 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,779,779 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,789,789 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,789,789 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,799,799 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,799,799 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,809,809 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,809,809 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,819,819 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,819,819 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,829,829 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,829,829 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,839,839 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,839,839 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,849,849 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,849,849 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,859,859 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,859,859 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,869,869 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,869,869 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,877,877 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,877,877 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,887,887 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,887,887 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,897,897 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,897,897 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,907,907 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,907,907 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,914,914 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,914,914 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,924,924 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,924,924 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,934,934 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,934,934 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,944,944 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,944,944 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,952,952 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,952,952 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,962,962 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,962,962 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,972,972 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,972,972 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,979,979 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,979,979 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,989,989 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,989,989 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:53,999,999 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:53,999,999 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,007,7 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,007,7 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,017,17 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,017,17 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,027,27 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,027,27 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,037,37 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,037,37 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,047,47 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,047,47 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,054,54 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,054,54 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,064,64 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,064,64 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,074,74 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,074,74 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,082,82 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,082,82 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,092,92 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,092,92 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,102,102 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,102,102 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,109,109 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,109,109 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,119,119 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,119,119 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,137,137 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,137,137 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,147,147 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,147,147 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,157,157 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,157,157 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,162,162 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,162,162 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:54,167,167 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,167,167 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:54,172,172 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,172,172 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,172,172 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,172,172 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:54,177,177 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,177,177 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:54,184,184 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,184,184 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:54,187,187 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,189,189 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:54,192,192 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,192,192 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:54,197,197 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,197,197 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:54,199,199 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,202,202 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,202,202 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,202,202 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:54,207,207 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,207,207 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:54,212,212 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,212,212 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:54,219,219 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,219,219 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,227,227 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:54,227,227 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:54,229,229 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,229,229 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,239,239 DEBUG [plugin_fivesteps.py:500] Match found do remove matchedordermonitor below data
2019-05-12 16:28:54,239,239 DEBUG [plugin_fivesteps.py:501] [{'orderno': '572728', 'price': '4.74', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '791174', 'price': '4.76', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '368649', 'price': '4.78', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '635448', 'price': '4.80', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '522982', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '287752', 'price': '4.70', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '295850', 'price': '4.68', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '734122', 'price': '4.66', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '157402', 'price': '4.64', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '917261', 'price': '4.62', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '639653', 'price': '4.60', 'status': 'Pending(S)', 'referorderno': '588314'}]
2019-05-12 16:28:54,239,239 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,239,239 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,257,257 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,259,259 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,267,267 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:54,267,267 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-05-12 16:28:54,277,277 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:54,277,277 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:28:54', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:28:54,289,289 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,289,289 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,299,299 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,299,299 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,327,327 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,327,327 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,337,337 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,337,337 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,344,344 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,344,344 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,354,354 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,354,354 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,364,364 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,364,364 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,397,397 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,397,397 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,407,407 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,407,407 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,417,417 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,417,417 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,427,427 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,427,427 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,459,459 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,459,459 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,469,469 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,469,469 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,479,479 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,479,479 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,489,489 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,489,489 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,499,499 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,499,499 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,509,509 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,509,509 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,527,527 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,527,527 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,537,537 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,537,537 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,547,547 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,547,547 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,557,557 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,557,557 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,594,594 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,594,594 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,604,604 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,604,604 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,624,624 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,624,624 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,652,652 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,662,662 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,672,672 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,672,672 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,682,682 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,704,704 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,707,707 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,714,714 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,714,714 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,724,724 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,724,724 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,734,734 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,734,734 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,754,754 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,754,754 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,764,764 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,764,764 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,774,774 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,774,774 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,784,784 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,784,784 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,794,794 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,794,794 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,804,804 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,804,804 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,829,829 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,829,829 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,837,837 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,837,837 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,847,847 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,847,847 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,857,857 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,857,857 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,867,867 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,867,867 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,887,887 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,897,897 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,897,897 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,907,907 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,907,907 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,917,917 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,927,927 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,927,927 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,954,954 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,954,954 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,964,964 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,964,964 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,974,974 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,974,974 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:54,984,984 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:54,984,984 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,009,9 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,012,12 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,019,19 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,019,19 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,029,29 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,029,29 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,039,39 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,039,39 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,049,49 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,049,49 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,067,67 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,067,67 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,077,77 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,077,77 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,097,97 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,097,97 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,107,107 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,107,107 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,117,117 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,117,117 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,174,174 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,174,174 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,184,184 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,184,184 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,194,194 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,194,194 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,204,204 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,204,204 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,214,214 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,214,214 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,252,252 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,252,252 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,262,262 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,262,262 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,272,272 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,272,272 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,312,312 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,312,312 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,319,319 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,319,319 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,329,329 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,329,329 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,342,342 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,342,342 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,352,352 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,352,352 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,362,362 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,362,362 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,369,369 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,369,369 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,379,379 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,379,379 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,389,389 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,389,389 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,397,397 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,397,397 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,407,407 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,407,407 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,417,417 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,417,417 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,427,427 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,427,427 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,434,434 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,434,434 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,444,444 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,444,444 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,454,454 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,454,454 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,467,467 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,467,467 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,477,477 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,477,477 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,494,494 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,494,494 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,504,504 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,504,504 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,514,514 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,514,514 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,524,524 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,524,524 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,532,532 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,532,532 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,542,542 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,542,542 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,552,552 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,552,552 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,562,562 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,569,569 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,569,569 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,579,579 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,579,579 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,602,602 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,602,602 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,619,619 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,619,619 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,629,629 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,629,629 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,639,639 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,639,639 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,654,654 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,654,654 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,664,664 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,664,664 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,674,674 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,674,674 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,684,684 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,684,684 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,694,694 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,702,702 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,702,702 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,712,712 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,712,712 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,722,722 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,722,722 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,732,732 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,732,732 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,739,739 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,739,739 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,769,769 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,769,769 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,779,779 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,779,779 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,789,789 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,789,789 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,797,797 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,797,797 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,807,807 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,827,827 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,827,827 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,837,837 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,837,837 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,847,847 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,847,847 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,857,857 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,857,857 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,867,867 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,867,867 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,877,877 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,877,877 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,887,887 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,887,887 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,897,897 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,897,897 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,907,907 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,907,907 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,917,917 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,927,927 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,927,927 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,934,934 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,934,934 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,944,944 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,944,944 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,954,954 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,954,954 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,964,964 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,964,964 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,974,974 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,974,974 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,984,984 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,984,984 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:55,994,994 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:55,994,994 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,004,4 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,004,4 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,024,24 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,024,24 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,034,34 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,034,34 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,044,44 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,044,44 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,054,54 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,054,54 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,064,64 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,064,64 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,074,74 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,074,74 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,084,84 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,084,84 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,094,94 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,094,94 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,104,104 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,104,104 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,114,114 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,114,114 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,124,124 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,124,124 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,134,134 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,134,134 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,144,144 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,144,144 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,154,154 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,154,154 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,164,164 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,164,164 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,174,174 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,174,174 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,184,184 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,184,184 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,194,194 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,194,194 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,204,204 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,204,204 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,214,214 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,214,214 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,224,224 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,224,224 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,234,234 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,234,234 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,244,244 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,244,244 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,254,254 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,254,254 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,264,264 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,264,264 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,274,274 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,274,274 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,284,284 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,284,284 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,294,294 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,294,294 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,304,304 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,304,304 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,314,314 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,314,314 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,324,324 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,324,324 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,334,334 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,334,334 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,344,344 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,344,344 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,352,352 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,352,352 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,362,362 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,362,362 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,372,372 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,372,372 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,382,382 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,382,382 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,392,392 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,392,392 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,402,402 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,402,402 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,412,412 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,412,412 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,422,422 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,422,422 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,432,432 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,432,432 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,452,452 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,452,452 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,462,462 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,462,462 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,472,472 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,492,492 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,492,492 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,502,502 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,502,502 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,512,512 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,512,512 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,539,539 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,539,539 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,549,549 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,549,549 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,559,559 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,559,559 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,562,562 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,562,562 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:28:56,569,569 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,569,569 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,572,572 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,572,572 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:56,577,577 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,579,579 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,579,579 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,579,579 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:56,584,584 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,584,584 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:56,592,592 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,592,592 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:56,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,599,599 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,599,599 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:56,607,607 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,607,607 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:56,609,609 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,609,609 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,612,612 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,614,614 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:56,619,619 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,619,619 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,619,619 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,622,622 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:56,627,627 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,627,627 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:56,629,629 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,629,629 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,632,632 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,634,634 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:56,639,639 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,639,639 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:28:56,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,647,647 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:56,647,647 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:56,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,662,662 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,672,672 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,672,672 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,682,682 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,692,692 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,692,692 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,702,702 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,702,702 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,724,724 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,724,724 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,734,734 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,734,734 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,754,754 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:56,754,754 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '572728'}]}
2019-05-12 16:28:56,787,787 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,787,787 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,797,797 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,797,797 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,807,807 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,824,824 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,834,834 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,844,844 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,844,844 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,854,854 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,854,854 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,864,864 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,864,864 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,874,874 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,874,874 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,884,884 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,884,884 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,894,894 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,894,894 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,947,947 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,947,947 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,957,957 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,957,957 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,967,967 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,967,967 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,977,977 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,977,977 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,987,987 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,987,987 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:56,994,994 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:56,994,994 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,004,4 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,004,4 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,024,24 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,024,24 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,034,34 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,034,34 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,042,42 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,042,42 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,052,52 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,052,52 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,062,62 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,062,62 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,069,69 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,069,69 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,079,79 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,079,79 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,089,89 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,089,89 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,099,99 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,099,99 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,107,107 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,107,107 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,117,117 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,117,117 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,127,127 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,127,127 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,137,137 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,137,137 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,147,147 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,147,147 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,157,157 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,157,157 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,167,167 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,167,167 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,177,177 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,187,187 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,187,187 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,197,197 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,237,237 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,237,237 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,247,247 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,247,247 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,257,257 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,257,257 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,267,267 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,267,267 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,277,277 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,277,277 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,287,287 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,287,287 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,297,297 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,297,297 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,307,307 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,307,307 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,314,314 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,314,314 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,324,324 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,324,324 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,359,359 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,359,359 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,369,369 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,369,369 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,379,379 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,379,379 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,389,389 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,389,389 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,397,397 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,397,397 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,407,407 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,407,407 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,417,417 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,417,417 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,427,427 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,427,427 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,437,437 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,437,437 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,447,447 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,447,447 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,457,457 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,457,457 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,467,467 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,467,467 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,477,477 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,477,477 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,507,507 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,507,507 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,517,517 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,517,517 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,527,527 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,527,527 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,537,537 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,537,537 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,547,547 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,547,547 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,557,557 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,557,557 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,567,567 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,567,567 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,577,577 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,577,577 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,587,587 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,587,587 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,597,597 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,597,597 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,607,607 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,607,607 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,617,617 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,617,617 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,624,624 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,624,624 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,634,634 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,634,634 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,644,644 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,644,644 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,652,652 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,662,662 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,672,672 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,672,672 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,679,679 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,679,679 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,689,689 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,689,689 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,699,699 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,699,699 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,709,709 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,709,709 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,717,717 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,717,717 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,727,727 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,727,727 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,737,737 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,737,737 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,754,754 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,754,754 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,764,764 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,764,764 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,772,772 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,772,772 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,792,792 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,792,792 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,802,802 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,802,802 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,812,812 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,812,812 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,819,819 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,819,819 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,829,829 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,829,829 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,839,839 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,839,839 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,847,847 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,847,847 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,857,857 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,857,857 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,867,867 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,867,867 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,877,877 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,877,877 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,909,909 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,909,909 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,919,919 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,929,929 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,929,929 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,949,949 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,949,949 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,957,957 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,957,957 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,967,967 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,967,967 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,977,977 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,977,977 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,984,984 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,984,984 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:57,994,994 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:57,994,994 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,004,4 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,004,4 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,024,24 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,024,24 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,034,34 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,034,34 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,044,44 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,044,44 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,054,54 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,054,54 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:28:58,054,54 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,059,59 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,062,62 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:58,067,67 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,067,67 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:58,067,67 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,069,69 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,072,72 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,072,72 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:58,077,77 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,077,77 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:58,079,79 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,079,79 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,084,84 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,084,84 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:58,089,89 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,092,92 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:58,097,97 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,097,97 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:58,099,99 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,099,99 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,102,102 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,102,102 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:58,109,109 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,109,109 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:58,109,109 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,112,112 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,114,114 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,114,114 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:58,119,119 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,119,119 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:28:58,119,119 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,122,122 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,124,124 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:58,124,124 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:58,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,157,157 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,157,157 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,167,167 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:58,167,167 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:58,177,177 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,187,187 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,187,187 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,197,197 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,224,224 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,234,234 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,234,234 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,244,244 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,244,244 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,254,254 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,254,254 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,264,264 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,264,264 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,299,299 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,299,299 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,309,309 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,309,309 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,319,319 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,319,319 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,329,329 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,329,329 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,339,339 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,339,339 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,349,349 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,349,349 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,357,357 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,359,359 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,367,367 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,367,367 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,377,377 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,377,377 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,387,387 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,387,387 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,397,397 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,397,397 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,407,407 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,407,407 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,417,417 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,417,417 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,427,427 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,427,427 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,437,437 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,437,437 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,447,447 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,447,447 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,457,457 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,457,457 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,467,467 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,467,467 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,477,477 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,477,477 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,507,507 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,507,507 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,517,517 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,517,517 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,527,527 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,527,527 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,537,537 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,537,537 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,547,547 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,547,547 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,557,557 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,557,557 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,567,567 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,567,567 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,577,577 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,577,577 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,587,587 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,594,594 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,594,594 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,604,604 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,604,604 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,624,624 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,624,624 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,634,634 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,634,634 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,644,644 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,644,644 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,654,654 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,654,654 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,664,664 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,664,664 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,674,674 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,674,674 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,684,684 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,684,684 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,694,694 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,704,704 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,704,704 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,714,714 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,714,714 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,724,724 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,724,724 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,734,734 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,734,734 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,744,744 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,744,744 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,752,752 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,754,754 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,762,762 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,762,762 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,772,772 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,772,772 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,792,792 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,792,792 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,802,802 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,802,802 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,812,812 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,812,812 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,822,822 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,822,822 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,832,832 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,832,832 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,842,842 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,842,842 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,852,852 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,852,852 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,872,872 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,902,902 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,902,902 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,912,912 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,912,912 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,922,922 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,922,922 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,932,932 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,932,932 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,942,942 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,942,942 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,952,952 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,952,952 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,959,959 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,959,959 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,969,969 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,969,969 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,979,979 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,979,979 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,987,987 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,987,987 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:58,997,997 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:58,997,997 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,007,7 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,007,7 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,024,24 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,024,24 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,034,34 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,034,34 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,044,44 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,044,44 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,052,52 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,052,52 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,062,62 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,062,62 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,072,72 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,072,72 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,082,82 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,082,82 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,089,89 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,089,89 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,099,99 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,099,99 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,109,109 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,109,109 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,119,119 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,119,119 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,149,149 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,149,149 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,157,157 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,157,157 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,167,167 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,167,167 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,177,177 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,184,184 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,184,184 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,194,194 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,194,194 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,204,204 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,204,204 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,214,214 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,214,214 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,222,222 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,222,222 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,232,232 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,232,232 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,242,242 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,242,242 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,249,249 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,249,249 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,259,259 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,259,259 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,269,269 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,269,269 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,279,279 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,279,279 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,287,287 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,287,287 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,297,297 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,297,297 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,307,307 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,307,307 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,314,314 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,314,314 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,324,324 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,324,324 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,334,334 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,334,334 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,342,342 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,342,342 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,352,352 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,352,352 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,362,362 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,362,362 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,369,369 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,369,369 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,379,379 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,379,379 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,389,389 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,389,389 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,399,399 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,399,399 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,407,407 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,407,407 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,417,417 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,417,417 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,427,427 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,427,427 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,432,432 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,432,432 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:28:59,437,437 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,437,437 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:59,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,442,442 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,442,442 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:59,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,447,447 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,447,447 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:59,452,452 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,452,452 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:59,457,457 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,457,457 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,457,457 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,457,457 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:59,462,462 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,462,462 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:59,467,467 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,467,467 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:59,469,469 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,472,472 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:59,477,477 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,477,477 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:59,477,477 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,477,477 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,482,482 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,482,482 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:28:59,487,487 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,487,487 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:28:59,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,492,492 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:28:59,492,492 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:28:59,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,507,507 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,507,507 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,514,514 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:28:59,514,514 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:28:59,532,532 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,534,534 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,542,542 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,542,542 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,552,552 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,552,552 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,562,562 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,602,602 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,602,602 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,629,629 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,629,629 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,639,639 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,639,639 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,699,699 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,699,699 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,709,709 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,709,709 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,719,719 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,719,719 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,729,729 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,729,729 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,737,737 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,739,739 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,747,747 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,747,747 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,757,757 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,757,757 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,767,767 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,767,767 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,777,777 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,777,777 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,787,787 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,787,787 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,797,797 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,797,797 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,807,807 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,827,827 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,827,827 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,837,837 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,837,837 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,847,847 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,847,847 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,857,857 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,857,857 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,867,867 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,867,867 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,877,877 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,877,877 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,887,887 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,887,887 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,897,897 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,897,897 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,907,907 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,907,907 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,917,917 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,927,927 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,927,927 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,937,937 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,937,937 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,947,947 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,947,947 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,957,957 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,957,957 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,967,967 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,967,967 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,977,977 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,977,977 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,987,987 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,987,987 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:28:59,997,997 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:28:59,997,997 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,007,7 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,007,7 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,017,17 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,017,17 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,027,27 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,027,27 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,037,37 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,037,37 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,047,47 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,047,47 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,067,67 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,067,67 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,077,77 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,077,77 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,097,97 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,097,97 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,107,107 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,107,107 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,117,117 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,117,117 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,127,127 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,127,127 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,137,137 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,137,137 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,147,147 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,147,147 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,157,157 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,157,157 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,167,167 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,167,167 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,177,177 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,177,177 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,187,187 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,187,187 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,197,197 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,197,197 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,217,217 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,237,237 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,237,237 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,247,247 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,247,247 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,257,257 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,257,257 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,267,267 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,267,267 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,277,277 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,277,277 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,287,287 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,287,287 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,297,297 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,297,297 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,307,307 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,307,307 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,317,317 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,317,317 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,327,327 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,327,327 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,337,337 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,337,337 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,347,347 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,347,347 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,357,357 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,357,357 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,367,367 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,367,367 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,377,377 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,377,377 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,387,387 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,387,387 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,394,394 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,394,394 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,407,407 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,407,407 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,417,417 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,417,417 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,427,427 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,427,427 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,434,434 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,434,434 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,444,444 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,444,444 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,454,454 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,454,454 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,464,464 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,464,464 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,474,474 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,474,474 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,484,484 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,484,484 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,492,492 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,492,492 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,502,502 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,502,502 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,512,512 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,512,512 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,519,519 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,519,519 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,529,529 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,529,529 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,539,539 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,539,539 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,547,547 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,547,547 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,557,557 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,557,557 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,567,567 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,567,567 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,574,574 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,584,584 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,584,584 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,594,594 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,594,594 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,602,602 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,602,602 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,639,639 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,639,639 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,662,662 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,672,672 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,672,672 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,682,682 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,689,689 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,689,689 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,699,699 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,699,699 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,709,709 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,709,709 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,719,719 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,719,719 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,727,727 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,727,727 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,737,737 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,737,737 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,747,747 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,747,747 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,757,757 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,757,757 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,767,767 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,767,767 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,777,777 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,777,777 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,784,784 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,784,784 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,794,794 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,794,794 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,802,802 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,802,802 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:00,804,804 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,807,807 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,807,807 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:00,812,812 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,812,812 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:00,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,817,817 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,817,817 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:00,822,822 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,822,822 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:00,827,827 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,827,827 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,827,827 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,827,827 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:00,832,832 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,832,832 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:00,837,837 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,837,837 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:00,839,839 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,842,842 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:00,844,844 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,844,844 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,847,847 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,847,847 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:00,852,852 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,852,852 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:00,854,854 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,854,854 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,857,857 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,857,857 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:00,862,862 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:00,862,862 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:00,864,864 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,864,864 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,874,874 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,874,874 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,879,879 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,879,879 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,887,887 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:00,887,887 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:00,907,907 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,909,909 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,917,917 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,927,927 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,927,927 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,937,937 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,937,937 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,947,947 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,947,947 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,954,954 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,954,954 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,964,964 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,964,964 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,974,974 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,974,974 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,984,984 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,984,984 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:00,994,994 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:00,994,994 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,002,2 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,002,2 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,012,12 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,012,12 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,052,52 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,052,52 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,062,62 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,062,62 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,069,69 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,069,69 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,079,79 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,079,79 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,089,89 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,089,89 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,099,99 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,099,99 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,109,109 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,109,109 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,119,119 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,119,119 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,129,129 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,129,129 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,139,139 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,139,139 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,149,149 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,149,149 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,159,159 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,159,159 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,169,169 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,169,169 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,179,179 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,179,179 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,189,189 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,189,189 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,199,199 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,199,199 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,209,209 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,209,209 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,219,219 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,219,219 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,229,229 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,229,229 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,239,239 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,239,239 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,249,249 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,249,249 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,259,259 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,259,259 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,269,269 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,269,269 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,279,279 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,279,279 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,289,289 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,289,289 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,299,299 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,299,299 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,309,309 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,309,309 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,319,319 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,319,319 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,329,329 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,329,329 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,339,339 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,339,339 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,349,349 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,349,349 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,359,359 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,359,359 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,369,369 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,369,369 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,379,379 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,379,379 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,389,389 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,389,389 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,399,399 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,399,399 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,409,409 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,409,409 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,419,419 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,419,419 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,429,429 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,429,429 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,439,439 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,439,439 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,449,449 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,449,449 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,459,459 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,459,459 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,467,467 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,467,467 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,477,477 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,477,477 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,504,504 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,504,504 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,514,514 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,514,514 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,524,524 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,524,524 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,534,534 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,534,534 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,544,544 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,544,544 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,554,554 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,554,554 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,562,562 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,609,609 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,609,609 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,619,619 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,619,619 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,627,627 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,627,627 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,637,637 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,637,637 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,647,647 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,647,647 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,657,657 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,657,657 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,664,664 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,664,664 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,674,674 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,674,674 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,684,684 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,684,684 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,694,694 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,694,694 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,704,704 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,704,704 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,712,712 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,712,712 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,722,722 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,722,722 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,732,732 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,732,732 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,742,742 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,742,742 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,749,749 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,749,749 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,759,759 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,759,759 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,769,769 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,769,769 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,779,779 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,779,779 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,787,787 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,787,787 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,797,797 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,797,797 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,807,807 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,807,807 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,814,814 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,814,814 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,824,824 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,824,824 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,834,834 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,834,834 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,842,842 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,842,842 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,852,852 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,852,852 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,872,872 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,879,879 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,879,879 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,907,907 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,907,907 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,917,917 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,927,927 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,927,927 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,937,937 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,937,937 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,947,947 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,947,947 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,957,957 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,957,957 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,967,967 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,967,967 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,977,977 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,977,977 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,984,984 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,984,984 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:01,994,994 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:01,994,994 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,004,4 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,004,4 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,014,14 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,014,14 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,022,22 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,022,22 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,032,32 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,032,32 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,042,42 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,042,42 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,049,49 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,049,49 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,059,59 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,059,59 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,070,70 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,070,70 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,077,77 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,077,77 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,097,97 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,097,97 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,107,107 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,107,107 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,117,117 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,117,117 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,127,127 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,127,127 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,137,137 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,137,137 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:02,137,137 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,140,140 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,142,142 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,145,145 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:02,147,147 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,150,150 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:02,150,150 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,150,150 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,155,155 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,155,155 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:02,160,160 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,160,160 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:02,160,160 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,162,162 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,165,165 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,165,165 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:02,170,170 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,170,170 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:02,170,170 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,172,172 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,175,175 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,175,175 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:02,180,180 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,182,182 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:02,182,182 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,182,182 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,185,185 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,187,187 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:02,190,190 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,192,192 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:02,192,192 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,192,192 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,197,197 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,197,197 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:02,202,202 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:02,202,202 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:02,215,215 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,217,217 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:02,225,225 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:02,225,225 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:02,235,235 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:02,235,235 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:03,527,527 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,527,527 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:03,532,532 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,532,532 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:03,537,537 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,537,537 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:03,542,542 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,542,542 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:03,547,547 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,547,547 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:03,552,552 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,552,552 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:03,557,557 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,560,560 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:03,562,562 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,565,565 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:03,570,570 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,570,570 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:03,575,575 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,575,575 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:03,582,582 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,582,582 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:03,587,587 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,587,587 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:03,592,592 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:03,592,592 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:03,607,607 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:03,607,607 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:03,887,887 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:03,887,887 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:03,910,910 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:03,910,910 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:05,445,445 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,447,447 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:05,452,452 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,452,452 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:05,457,457 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,457,457 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:05,462,462 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,465,465 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:05,470,470 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,470,470 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:05,475,475 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,475,475 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:05,480,480 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,482,482 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:05,487,487 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,487,487 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:05,492,492 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,492,492 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:05,497,497 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,497,497 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:05,502,502 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,502,502 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:05,507,507 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,510,510 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:05,515,515 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:05,515,515 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:05,525,525 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:05,525,525 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:06,890,890 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:06,890,890 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:06,900,900 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:06,900,900 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:08,290,290 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,290,290 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:08,295,295 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,295,295 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:08,300,300 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,300,300 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:08,305,305 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,305,305 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:08,310,310 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,310,310 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:08,315,315 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,315,315 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:08,320,320 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,320,320 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:08,325,325 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,327,327 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:08,332,332 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,332,332 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:08,337,337 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,337,337 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:08,342,342 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,342,342 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:08,347,347 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,347,347 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:08,352,352 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:08,352,352 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:08,360,360 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:08,360,360 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:10,222,222 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:10,222,222 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:10,232,232 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:10,232,232 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:11,572,572 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,572,572 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:11,577,577 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,577,577 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:11,585,585 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,585,585 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:11,590,590 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,592,592 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:11,597,597 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,597,597 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:11,602,602 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,602,602 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:11,607,607 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,607,607 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:11,612,612 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,612,612 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:11,617,617 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,620,620 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:11,625,625 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,625,625 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:11,630,630 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,630,630 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:11,635,635 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,635,635 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:11,642,642 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:11,642,642 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:11,652,652 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:11,652,652 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:13,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:13,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:13,237,237 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:13,237,237 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:14,637,637 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,637,637 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:14,642,642 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,645,645 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:14,647,647 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,650,650 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:14,652,652 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,652,652 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:14,657,657 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,657,657 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:14,662,662 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,662,662 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:14,667,667 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,667,667 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:14,672,672 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,672,672 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:14,677,677 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,677,677 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:14,682,682 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,685,685 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:14,687,687 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,690,690 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:14,695,695 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,695,695 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:14,700,700 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:14,700,700 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:14,707,707 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:14,707,707 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:16,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:16,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:16,237,237 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:16,237,237 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:16,245,245 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:16,245,245 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:17,490,490 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,490,490 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:17,495,495 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,495,495 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:17,500,500 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,500,500 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:17,505,505 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,505,505 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:17,510,510 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,510,510 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:17,515,515 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,515,515 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:17,520,520 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,520,520 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:17,522,522 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,525,525 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:17,527,527 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,527,527 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:17,532,532 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,532,532 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:17,537,537 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,537,537 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:17,542,542 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,542,542 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:17,547,547 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:17,547,547 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:17,562,562 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:17,562,562 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:19,565,565 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:19,565,565 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:19,575,575 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:19,575,575 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:19,600,600 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:19,600,600 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:20,900,900 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,902,902 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:20,907,907 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,907,907 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:20,912,912 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,912,912 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:20,917,917 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,920,920 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:20,925,925 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,925,925 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:20,930,930 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,930,930 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:20,935,935 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,935,935 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:20,940,940 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,940,940 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:20,947,947 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,947,947 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:20,952,952 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,952,952 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:20,957,957 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,960,960 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:20,965,965 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,965,965 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:20,970,970 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:20,970,970 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:20,985,985 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:20,985,985 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:22,567,567 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:22,567,567 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:22,597,597 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:22,597,597 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:23,850,850 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,850,850 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:23,855,855 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,855,855 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:23,860,860 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,860,860 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:23,865,865 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,865,865 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:23,870,870 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,870,870 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:23,875,875 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,875,875 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:23,880,880 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,880,880 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:23,885,885 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,885,885 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:23,890,890 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,890,890 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:23,895,895 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,895,895 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:23,900,900 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,900,900 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:23,905,905 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,905,905 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:23,910,910 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:23,910,910 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:23,917,917 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:23,917,917 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:25,567,567 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:25,567,567 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:25,590,590 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:25,590,590 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:25,597,597 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:25,597,597 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:27,000,0 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,000,0 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:27,005,5 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,005,5 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:27,010,10 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,012,12 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:27,017,17 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,017,17 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:27,022,22 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,022,22 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:27,027,27 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,027,27 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:27,032,32 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,032,32 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:27,040,40 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,040,40 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:27,045,45 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,045,45 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:27,050,50 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,052,52 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:27,057,57 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,057,57 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:27,062,62 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,062,62 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:27,067,67 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:27,067,67 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:27,080,80 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:27,080,80 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:28,570,570 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:28,570,570 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:30,000,0 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,000,0 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:30,005,5 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,005,5 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:30,010,10 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,012,12 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:30,017,17 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,017,17 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:30,022,22 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,022,22 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:30,027,27 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,027,27 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:30,032,32 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,032,32 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:30,037,37 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,037,37 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:30,042,42 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,042,42 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:30,047,47 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,047,47 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:30,052,52 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,052,52 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:30,057,57 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,057,57 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:30,062,62 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:30,062,62 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:30,075,75 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:30,075,75 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:31,912,912 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:31,912,912 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:33,475,475 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,475,475 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:33,480,480 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,480,480 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:33,485,485 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,485,485 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:33,492,492 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,492,492 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:33,497,497 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,497,497 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:33,502,502 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,502,502 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:33,507,507 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,507,507 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:33,512,512 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,512,512 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:33,520,520 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,520,520 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:33,527,527 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,527,527 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:33,535,535 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,535,535 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:33,542,542 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,542,542 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:33,550,550 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:33,550,550 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:33,570,570 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:33,570,570 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:35,248,248 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:35,248,248 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:35,258,258 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:35,258,258 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:35,268,268 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:35,268,268 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:36,553,553 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,555,555 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:36,560,560 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,560,560 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:36,565,565 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,565,565 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:36,570,570 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,570,570 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:36,575,575 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,575,575 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:36,580,580 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,580,580 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:36,585,585 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,585,585 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:36,590,590 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,590,590 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:36,595,595 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,595,595 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:36,600,600 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,600,600 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:36,605,605 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,605,605 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:36,610,610 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,613,613 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:36,615,615 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:36,618,618 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:36,628,628 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:36,628,628 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:38,250,250 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:38,250,250 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:38,258,258 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:38,258,258 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:39,555,555 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,558,558 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:39,560,560 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,560,560 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:39,565,565 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,568,568 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:39,570,570 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,573,573 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:39,578,578 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,578,578 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:39,583,583 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,583,583 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:39,588,588 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,588,588 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:39,593,593 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,593,593 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:39,598,598 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,598,598 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:39,603,603 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,603,603 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:39,608,608 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,608,608 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:39,613,613 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,613,613 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:39,618,618 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:39,620,620 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:39,625,625 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:39,625,625 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:41,253,253 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:41,253,253 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:41,263,263 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:41,263,263 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:42,598,598 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,600,600 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:42,605,605 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,605,605 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:42,615,615 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,615,615 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:42,623,623 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,623,623 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:42,628,628 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,628,628 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:42,635,635 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,635,635 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:42,640,640 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,643,643 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:42,648,648 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,650,650 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:42,655,655 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,655,655 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:42,663,663 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,663,663 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:42,668,668 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,670,670 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:42,675,675 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,675,675 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:42,680,680 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:42,680,680 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:42,695,695 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:42,698,698 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:44,593,593 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:44,593,593 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:44,600,600 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:44,600,600 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:44,610,610 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:44,610,610 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:46,058,58 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,058,58 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:46,065,65 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,065,65 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:46,070,70 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,073,73 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:46,078,78 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,078,78 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:46,085,85 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,085,85 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:46,093,93 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,093,93 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:46,100,100 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,100,100 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:46,105,105 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,108,108 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:46,115,115 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,115,115 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:46,123,123 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,123,123 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:46,130,130 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,133,133 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:46,140,140 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,140,140 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:46,145,145 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:46,148,148 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:46,158,158 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:46,158,158 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:49,135,135 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,138,138 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:49,143,143 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,143,143 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:49,150,150 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,153,153 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:49,158,158 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,158,158 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:49,163,163 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,163,163 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:49,168,168 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,170,170 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:49,175,175 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,175,175 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:49,180,180 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,180,180 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:49,188,188 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,188,188 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:49,193,193 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,193,193 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:49,200,200 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,200,200 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:49,205,205 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,205,205 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:49,213,213 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:49,213,213 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:49,218,218 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:49,220,220 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:50,973,973 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:50,973,973 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:50,983,983 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:50,983,983 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:52,313,313 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,315,315 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:52,320,320 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,320,320 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:52,325,325 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,325,325 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:52,330,330 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,330,330 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:52,335,335 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,335,335 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:52,340,340 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,340,340 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:52,345,345 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,345,345 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:52,350,350 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,350,350 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:52,355,355 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,358,358 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:52,363,363 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,363,363 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:52,368,368 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,368,368 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:52,373,373 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,373,373 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:52,378,378 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:52,378,378 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:52,393,393 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:52,393,393 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:29:54,268,268 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:54,268,268 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:54,278,278 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:54,278,278 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:54,288,288 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:54,288,288 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:54,298,298 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:54,298,298 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:55,560,560 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,560,560 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:55,565,565 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,568,568 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:55,573,573 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,573,573 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:55,578,578 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,578,578 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:55,580,580 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,583,583 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:55,585,585 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,585,585 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:55,593,593 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,593,593 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:55,608,608 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,608,608 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:55,615,615 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,615,615 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:55,623,623 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,623,623 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:55,628,628 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,630,630 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:55,635,635 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,638,638 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:55,643,643 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:55,645,645 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:55,658,658 DEBUG [plugin_fivesteps.py:500] Match found do remove matchedordermonitor below data
2019-05-12 16:29:55,658,658 DEBUG [plugin_fivesteps.py:501] [{'orderno': '791174', 'price': '4.76', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '368649', 'price': '4.78', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '635448', 'price': '4.80', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '522982', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '287752', 'price': '4.70', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '295850', 'price': '4.68', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '734122', 'price': '4.66', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '157402', 'price': '4.64', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '917261', 'price': '4.62', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '639653', 'price': '4.60', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '393196', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '572728'}]
2019-05-12 16:29:55,658,658 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:55,658,658 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-05-12 16:29:55,670,670 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:55,670,670 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:29:55', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:29:57,275,275 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,275,275 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,285,285 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,285,285 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,295,295 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,295,295 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,305,305 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,305,305 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,313,313 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,313,313 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,338,338 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,338,338 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,348,348 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,348,348 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,358,358 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,358,358 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,368,368 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,368,368 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,378,378 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,378,378 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,388,388 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,388,388 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,398,398 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,398,398 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,408,408 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,408,408 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,418,418 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,418,418 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,428,428 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,428,428 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,435,435 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,438,438 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,445,445 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,445,445 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,455,455 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,455,455 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,465,465 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,465,465 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,475,475 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,475,475 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,485,485 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,485,485 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,493,493 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,493,493 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,503,503 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,503,503 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,513,513 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,513,513 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,523,523 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,523,523 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,533,533 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,533,533 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,543,543 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,543,543 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,553,553 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,553,553 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,563,563 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,563,563 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,573,573 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,573,573 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,583,583 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,583,583 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,593,593 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,593,593 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,603,603 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,603,603 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,613,613 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,613,613 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,620,620 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,620,620 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,630,630 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,630,630 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,640,640 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,640,640 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,650,650 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,650,650 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,660,660 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,660,660 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,670,670 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,670,670 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,680,680 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,680,680 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,690,690 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,690,690 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,700,700 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,700,700 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,710,710 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,710,710 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,720,720 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,720,720 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,730,730 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,730,730 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,738,738 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,738,738 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,748,748 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,748,748 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,758,758 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,758,758 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,765,765 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,765,765 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:29:57,768,768 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,768,768 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,775,775 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,775,775 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:57,778,778 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,780,780 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,783,783 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,783,783 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:57,788,788 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,788,788 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,790,790 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,790,790 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:57,798,798 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,798,798 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,800,800 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,800,800 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:57,805,805 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,808,808 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:57,808,808 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,810,810 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,813,813 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,813,813 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:57,820,820 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,820,820 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:29:57,828,828 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,828,828 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:57,828,828 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,830,830 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,833,833 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,833,833 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:57,838,838 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,840,840 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:57,840,840 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,843,843 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,845,845 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,845,845 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:57,850,850 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,850,850 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,853,853 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,853,853 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:57,860,860 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:57,860,860 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:57,860,860 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,863,863 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,873,873 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:29:57,873,873 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:29:57,890,890 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:57,890,890 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '999784', 'time': '16:29:44', 'symbole': 'WHA', 'side': 'S', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '287752'}]}
2019-05-12 16:29:59,330,330 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,330,330 DEBUG [packsel_model.py:163] <QuerySet [{'id': 110, 'orderno': '999784', 'time': '16:29:44', 'symbole': 'WHA', 'side': 'S', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '287752'}]>
2019-05-12 16:29:59,338,338 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,338,338 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:29:59,345,345 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,345,345 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:59,353,353 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,353,353 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:59,360,360 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,360,360 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:59,365,365 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,368,368 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:59,373,373 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,373,373 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:59,380,380 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,380,380 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:29:59,388,388 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,388,388 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:59,395,395 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,395,395 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:59,403,403 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,403,403 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:59,408,408 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,410,410 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:29:59,415,415 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,415,415 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:29:59,423,423 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:29:59,423,423 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:29:59,435,435 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:29:59,435,435 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:00,288,288 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:00,288,288 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:00,295,295 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:00,295,295 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:02,003,3 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,005,5 DEBUG [packsel_model.py:163] <QuerySet [{'id': 110, 'orderno': '999784', 'time': '16:29:44', 'symbole': 'WHA', 'side': 'S', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '287752'}]>
2019-05-12 16:30:02,010,10 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,010,10 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:02,018,18 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,018,18 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:02,025,25 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,025,25 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:02,030,30 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,033,33 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:02,038,38 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,038,38 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:02,045,45 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,045,45 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:02,053,53 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,053,53 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:02,058,58 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,058,58 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:02,063,63 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,063,63 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:02,068,68 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,068,68 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:02,075,75 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,075,75 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:02,083,83 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,083,83 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:02,090,90 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:02,090,90 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:02,103,103 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:02,103,103 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:03,610,610 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:03,610,610 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:03,638,638 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:03,638,638 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:05,005,5 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,005,5 DEBUG [packsel_model.py:163] <QuerySet [{'id': 110, 'orderno': '999784', 'time': '16:29:44', 'symbole': 'WHA', 'side': 'S', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '287752'}]>
2019-05-12 16:30:05,013,13 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,013,13 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:05,018,18 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,018,18 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:05,020,20 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,023,23 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:05,025,25 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,025,25 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:05,030,30 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,030,30 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:05,035,35 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,035,35 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:05,040,40 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,040,40 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:05,045,45 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,045,45 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:05,050,50 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,053,53 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:05,058,58 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,058,58 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:05,060,60 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,063,63 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:05,065,65 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,065,65 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:05,070,70 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:05,070,70 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:05,080,80 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:05,080,80 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:06,890,890 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:06,890,890 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:06,900,900 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:06,900,900 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:08,406,406 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,406,406 DEBUG [packsel_model.py:163] <QuerySet [{'id': 110, 'orderno': '999784', 'time': '16:29:44', 'symbole': 'WHA', 'side': 'S', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '287752'}]>
2019-05-12 16:30:08,413,413 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,413,413 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:08,418,418 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,421,421 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:08,426,426 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,426,426 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:08,431,431 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,431,431 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:08,436,436 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,436,436 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:08,443,443 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,443,443 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:08,451,451 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,451,451 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:08,458,458 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,458,458 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:08,466,466 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,466,466 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:08,471,471 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,473,473 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:08,478,478 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,478,478 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:08,483,483 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,483,483 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:08,488,488 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:08,491,491 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:08,498,498 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:08,501,501 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:10,228,228 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:10,228,228 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:10,253,253 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:10,253,253 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:10,263,263 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:10,263,263 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:11,543,543 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,543,543 DEBUG [packsel_model.py:163] <QuerySet [{'id': 110, 'orderno': '999784', 'time': '16:29:44', 'symbole': 'WHA', 'side': 'S', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '287752'}]>
2019-05-12 16:30:11,548,548 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,548,548 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:11,553,553 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,556,556 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:11,558,558 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,561,561 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:11,563,563 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,566,566 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:11,568,568 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,571,571 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:11,573,573 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,573,573 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:11,578,578 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,578,578 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:11,583,583 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,583,583 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:11,588,588 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,591,591 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:11,596,596 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,596,596 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:11,601,601 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,601,601 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:11,606,606 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,606,606 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:11,611,611 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:11,611,611 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:11,618,618 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:11,618,618 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:13,228,228 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:13,228,228 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:14,711,711 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,713,713 DEBUG [packsel_model.py:163] <QuerySet [{'id': 110, 'orderno': '999784', 'time': '16:29:44', 'symbole': 'WHA', 'side': 'S', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '287752'}]>
2019-05-12 16:30:14,718,718 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,718,718 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:14,723,723 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,726,726 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:14,731,731 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,731,731 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:14,738,738 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,738,738 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:14,746,746 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,746,746 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:14,753,753 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,753,753 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:14,758,758 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,758,758 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:14,766,766 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,766,766 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:14,773,773 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,773,773 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:14,781,781 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,781,781 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:14,786,786 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,786,786 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:14,793,793 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,796,796 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:14,801,801 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:14,801,801 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:14,828,828 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:14,828,828 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:16,566,566 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:16,566,566 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:16,576,576 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:16,576,576 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:16,586,586 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:16,586,586 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:18,026,26 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,026,26 DEBUG [packsel_model.py:163] <QuerySet [{'id': 110, 'orderno': '999784', 'time': '16:29:44', 'symbole': 'WHA', 'side': 'S', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '287752'}]>
2019-05-12 16:30:18,033,33 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,033,33 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:18,041,41 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,041,41 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:18,048,48 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,048,48 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:18,056,56 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,058,58 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:18,063,63 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,066,66 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:18,073,73 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,073,73 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:18,083,83 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,083,83 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:18,091,91 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,091,91 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:18,098,98 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,098,98 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:18,106,106 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,106,106 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:18,113,113 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,113,113 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:18,118,118 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,118,118 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:18,126,126 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:18,126,126 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:18,143,143 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:18,143,143 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:19,568,568 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:19,568,568 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:19,578,578 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:19,578,578 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:20,838,838 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,838,838 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:20,843,843 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,843,843 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:20,851,851 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,851,851 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:20,856,856 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,856,856 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:20,861,861 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,861,861 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:20,866,866 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,866,866 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:20,871,871 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,871,871 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:20,876,876 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,876,876 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:20,881,881 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,881,881 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:20,886,886 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,886,886 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:20,891,891 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,891,891 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:20,896,896 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,896,896 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:20,901,901 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:20,901,901 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:20,908,908 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:20,908,908 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:22,566,566 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:22,566,566 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:22,576,576 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:22,576,576 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:23,866,866 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,868,868 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:23,873,873 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,873,873 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:23,878,878 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,878,878 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:23,886,886 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,888,888 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:23,893,893 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,893,893 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:23,901,901 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,901,901 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:23,906,906 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,906,906 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:23,913,913 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,913,913 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:23,921,921 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,921,921 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:23,928,928 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,928,928 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:23,936,936 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,936,936 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:23,941,941 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,941,941 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:23,948,948 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:23,948,948 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:23,961,961 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:23,961,961 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:25,908,908 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:25,908,908 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:25,918,918 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:25,918,918 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:25,928,928 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:25,928,928 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:27,208,208 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,208,208 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:27,213,213 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,213,213 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:27,218,218 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,218,218 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:27,223,223 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,223,223 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:27,228,228 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,228,228 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:27,243,243 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,243,243 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:27,248,248 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,248,248 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:27,253,253 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,253,253 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:27,258,258 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,258,258 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:27,263,263 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,266,266 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:27,271,271 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,271,271 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:27,276,276 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,276,276 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:27,281,281 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:27,281,281 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:27,291,291 DEBUG [plugin_fivesteps.py:500] Match found do remove matchedordermonitor below data
2019-05-12 16:30:27,291,291 DEBUG [plugin_fivesteps.py:501] [{'orderno': '791174', 'price': '4.76', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '368649', 'price': '4.78', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '635448', 'price': '4.80', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '522982', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '295850', 'price': '4.68', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '734122', 'price': '4.66', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '157402', 'price': '4.64', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '917261', 'price': '4.62', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '639653', 'price': '4.60', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '393196', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '572728'}, {'orderno': '999784', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '287752'}]
2019-05-12 16:30:27,296,296 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:27,296,296 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:30:27', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:30:27,308,308 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:27,308,308 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:30:27', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:30:28,913,913 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:28,913,913 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:28,923,923 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:28,923,923 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:28,933,933 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:28,933,933 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:28,943,943 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:28,943,943 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:28,953,953 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:28,953,953 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:28,963,963 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:28,963,963 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:28,988,988 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:28,988,988 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:28,998,998 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:28,998,998 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,008,8 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,008,8 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,018,18 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,018,18 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,028,28 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,028,28 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,038,38 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,038,38 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,048,48 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,048,48 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,058,58 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,058,58 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,068,68 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,068,68 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,078,78 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,078,78 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,088,88 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,088,88 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,098,98 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,098,98 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,108,108 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,108,108 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,118,118 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,118,118 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,128,128 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,128,128 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,138,138 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,138,138 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,148,148 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,148,148 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,158,158 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,158,158 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,168,168 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,168,168 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,178,178 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,178,178 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,188,188 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,188,188 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,198,198 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,198,198 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,208,208 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,208,208 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,218,218 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,218,218 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,228,228 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,228,228 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,238,238 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,238,238 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,248,248 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,248,248 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,258,258 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,258,258 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,268,268 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,268,268 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,278,278 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,278,278 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,288,288 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,288,288 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,298,298 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,298,298 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,308,308 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,308,308 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,316,316 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,316,316 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,326,326 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,326,326 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,336,336 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,336,336 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,343,343 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,346,346 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,356,356 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,356,356 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,366,366 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,366,366 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,373,373 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,373,373 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,383,383 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,383,383 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,393,393 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,393,393 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,403,403 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,403,403 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,413,413 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,413,413 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,423,423 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,423,423 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,431,431 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,431,431 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,441,441 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,441,441 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,451,451 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,451,451 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,461,461 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,461,461 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,471,471 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,471,471 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,481,481 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,481,481 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,488,488 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,491,491 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,498,498 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,498,498 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,508,508 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,508,508 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,518,518 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,518,518 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,528,528 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,528,528 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,538,538 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,538,538 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,548,548 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,548,548 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,558,558 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,558,558 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,568,568 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,568,568 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,578,578 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,578,578 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,586,586 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,586,586 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,596,596 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,596,596 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,606,606 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,606,606 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,616,616 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,616,616 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,623,623 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,623,623 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,633,633 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,633,633 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,643,643 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,643,643 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,648,648 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,648,648 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:30:29,653,653 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,653,653 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,663,663 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,663,663 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:29,671,671 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,671,671 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:29,673,673 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,673,673 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,678,678 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,678,678 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:29,683,683 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,683,683 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,686,686 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,686,686 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:29,691,691 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,691,691 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:29,693,693 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,696,696 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,698,698 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,698,698 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:29,703,703 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,706,706 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,706,706 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,706,706 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:29,713,713 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,713,713 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:29,713,713 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,716,716 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,721,721 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,721,721 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:29,728,728 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,728,728 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:29,733,733 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,733,733 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,733,733 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,736,736 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:29,741,741 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,741,741 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:29,743,743 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,743,743 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,748,748 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:29,748,748 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:29,753,753 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,756,756 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:29,763,763 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:29,763,763 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '110300', 'time': '16:30:03', 'symbole': 'WHA', 'side': 'S', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '734122'}]}
2019-05-12 16:30:29,796,796 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:29,796,796 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:31,103,103 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,103,103 DEBUG [packsel_model.py:163] <QuerySet [{'id': 111, 'orderno': '110300', 'time': '16:30:03', 'symbole': 'WHA', 'side': 'S', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '734122'}]>
2019-05-12 16:30:31,108,108 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,108,108 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:31,113,113 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,113,113 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:31,118,118 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,118,118 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:31,123,123 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,123,123 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:31,131,131 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,131,131 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:31,133,133 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,136,136 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:31,141,141 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,141,141 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:31,146,146 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,146,146 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:31,151,151 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,151,151 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:31,156,156 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,156,156 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:31,161,161 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,161,161 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:31,166,166 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,166,166 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:31,171,171 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:31,173,173 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:31,186,186 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:31,186,186 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:33,288,288 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,288,288 DEBUG [packsel_model.py:163] <QuerySet [{'id': 111, 'orderno': '110300', 'time': '16:30:03', 'symbole': 'WHA', 'side': 'S', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '734122'}]>
2019-05-12 16:30:33,293,293 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,293,293 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:33,298,298 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,298,298 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:33,303,303 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,303,303 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:33,311,311 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,311,311 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:33,316,316 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,316,316 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:33,318,318 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,321,321 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:33,323,323 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,326,326 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:33,328,328 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,331,331 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:33,338,338 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,338,338 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:33,343,343 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,343,343 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:33,348,348 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,348,348 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:33,353,353 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,353,353 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:33,358,358 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:33,358,358 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:33,368,368 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:33,368,368 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:35,251,251 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:35,251,251 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:35,261,261 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:35,261,261 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:35,268,268 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:35,268,268 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:35,291,291 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:35,291,291 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:36,576,576 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,578,578 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:36,583,583 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,583,583 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:36,588,588 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,591,591 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:36,596,596 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,596,596 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:36,601,601 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,601,601 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:36,606,606 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,608,608 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:36,611,611 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,613,613 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:36,618,618 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,618,618 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:36,623,623 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,623,623 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:36,628,628 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,628,628 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:36,633,633 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,636,636 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:36,648,648 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,648,648 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:36,653,653 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:36,656,656 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:36,666,666 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:36,666,666 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-05-12 16:30:36,668,668 DEBUG [plugin_fivesteps.py:500] Match found do remove matchedordermonitor below data
2019-05-12 16:30:36,668,668 DEBUG [plugin_fivesteps.py:501] [{'orderno': '791174', 'price': '4.76', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '368649', 'price': '4.78', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '635448', 'price': '4.80', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '522982', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '295850', 'price': '4.68', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '157402', 'price': '4.64', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '917261', 'price': '4.62', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '639653', 'price': '4.60', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '393196', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '572728'}, {'orderno': '999784', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '287752'}, {'orderno': '110300', 'price': '4.68', 'status': 'Pending(S)', 'referorderno': '734122'}]
2019-05-12 16:30:36,678,678 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:36,678,678 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:30:36', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:30:38,251,251 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,251,251 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,261,261 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,261,261 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,286,286 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,286,286 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,296,296 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,296,296 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,306,306 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,306,306 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,316,316 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,316,316 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,326,326 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,326,326 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,336,336 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,336,336 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,346,346 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,346,346 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,356,356 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,356,356 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,366,366 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,366,366 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,376,376 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,376,376 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,386,386 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,386,386 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,396,396 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,396,396 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,406,406 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,406,406 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,416,416 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,416,416 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,423,423 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,423,423 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,433,433 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,433,433 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,443,443 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,443,443 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,453,453 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,453,453 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,463,463 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,463,463 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,473,473 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,473,473 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,483,483 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,483,483 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,491,491 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,491,491 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,501,501 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,501,501 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,511,511 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,511,511 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,521,521 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,521,521 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,531,531 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,531,531 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,541,541 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,541,541 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,551,551 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,551,551 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,561,561 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,561,561 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,571,571 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,571,571 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,581,581 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,581,581 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,588,588 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,591,591 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,598,598 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,598,598 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,608,608 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,608,608 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,618,618 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,618,618 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,628,628 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,628,628 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,638,638 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,638,638 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,648,648 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,648,648 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,656,656 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,656,656 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,666,666 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,666,666 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,676,676 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,676,676 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,686,686 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,686,686 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,696,696 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,696,696 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,706,706 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,706,706 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,716,716 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,716,716 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,726,726 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,726,726 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,733,733 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,733,733 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,743,743 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,743,743 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,753,753 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,753,753 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,763,763 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,763,763 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,773,773 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,773,773 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,783,783 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,783,783 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,793,793 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,793,793 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,803,803 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,803,803 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,813,813 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,813,813 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,821,821 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,821,821 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,831,831 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,831,831 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,841,841 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,841,841 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,851,851 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,851,851 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,861,861 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,861,861 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,866,866 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,868,868 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:30:38,871,871 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,871,871 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,881,881 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,881,881 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,888,888 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,888,888 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,891,891 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,891,891 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:38,898,898 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,898,898 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:38,903,903 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,906,906 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:38,906,906 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,908,908 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,911,911 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,913,913 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:38,918,918 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,918,918 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,918,918 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,921,921 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:38,926,926 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,926,926 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:38,928,928 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,928,928 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,933,933 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,933,933 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:38,938,938 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,938,938 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,941,941 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,941,941 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:38,946,946 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,948,948 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:38,948,948 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,951,951 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,953,953 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,956,956 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:38,963,963 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,963,963 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:30:38,968,968 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,968,968 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,971,971 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,971,971 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:38,976,976 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:38,978,978 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:38,978,978 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,981,981 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:38,991,991 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:38,991,991 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:39,001,1 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:39,001,1 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '763507', 'time': '16:30:08', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '791174'}]}
2019-05-12 16:30:40,369,369 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,369,369 DEBUG [packsel_model.py:163] <QuerySet [{'id': 112, 'orderno': '763507', 'time': '16:30:08', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '791174'}]>
2019-05-12 16:30:40,374,374 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,376,376 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:40,379,379 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,379,379 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:40,384,384 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,384,384 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:40,389,389 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,389,389 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:40,394,394 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,394,394 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:40,396,396 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,399,399 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:40,401,401 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,401,401 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:40,406,406 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,406,406 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:40,414,414 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,414,414 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:40,419,419 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,419,419 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:40,424,424 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,424,424 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:30:40,429,429 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,429,429 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:40,434,434 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:40,434,434 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:40,446,446 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:40,446,446 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:41,589,589 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:41,589,589 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:41,599,599 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:41,599,599 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:43,044,44 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,044,44 DEBUG [packsel_model.py:163] <QuerySet [{'id': 112, 'orderno': '763507', 'time': '16:30:08', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '791174'}]>
2019-05-12 16:30:43,051,51 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,051,51 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:43,056,56 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,056,56 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:43,061,61 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,061,61 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:43,066,66 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,066,66 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:43,071,71 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,071,71 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:43,076,76 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,076,76 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:43,079,79 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,081,81 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:43,086,86 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,086,86 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:43,091,91 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,091,91 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:43,096,96 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,096,96 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:43,101,101 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,101,101 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:30:43,106,106 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,106,106 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:43,111,111 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:43,111,111 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:43,121,121 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:43,121,121 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:44,591,591 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:44,591,591 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:44,601,601 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:44,601,601 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:46,314,314 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,316,316 DEBUG [packsel_model.py:163] <QuerySet [{'id': 112, 'orderno': '763507', 'time': '16:30:08', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '791174'}]>
2019-05-12 16:30:46,321,321 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,324,324 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:46,326,326 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,329,329 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:46,334,334 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,334,334 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:46,339,339 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,341,341 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:46,346,346 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,349,349 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:46,356,356 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,356,356 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:46,364,364 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,364,364 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:46,371,371 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,371,371 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:46,379,379 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,379,379 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:46,386,386 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,386,386 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:46,394,394 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,396,396 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:30:46,401,401 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,404,404 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:46,411,411 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:46,411,411 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:46,426,426 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:46,429,429 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:47,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:47,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:47,624,624 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:47,624,624 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:49,014,14 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,014,14 DEBUG [packsel_model.py:163] <QuerySet [{'id': 112, 'orderno': '763507', 'time': '16:30:08', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '791174'}]>
2019-05-12 16:30:49,021,21 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,021,21 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:49,026,26 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,026,26 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:49,031,31 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,031,31 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:49,036,36 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,036,36 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:49,041,41 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,041,41 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:49,046,46 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,046,46 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:49,054,54 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,054,54 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:49,059,59 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,059,59 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:49,064,64 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,064,64 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:49,069,69 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,069,69 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:49,074,74 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,074,74 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:30:49,079,79 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,079,79 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:49,086,86 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:49,086,86 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:49,096,96 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:49,096,96 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:50,939,939 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:50,939,939 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:50,949,949 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:50,949,949 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:52,461,461 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,461,461 DEBUG [packsel_model.py:163] <QuerySet [{'id': 112, 'orderno': '763507', 'time': '16:30:08', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '791174'}]>
2019-05-12 16:30:52,469,469 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,469,469 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:52,476,476 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,476,476 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:52,484,484 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,484,484 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:52,491,491 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,491,491 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:52,499,499 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,499,499 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:52,506,506 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,506,506 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:52,514,514 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,514,514 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:52,521,521 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,524,524 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:52,529,529 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,531,531 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:52,536,536 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,539,539 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:52,546,546 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,546,546 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:30:52,554,554 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,554,554 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:52,561,561 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:52,561,561 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:52,594,594 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:52,596,596 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:53,971,971 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:53,971,971 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:53,981,981 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:53,981,981 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:55,366,366 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,366,366 DEBUG [packsel_model.py:163] <QuerySet [{'id': 112, 'orderno': '763507', 'time': '16:30:08', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '791174'}]>
2019-05-12 16:30:55,371,371 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,371,371 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:55,376,376 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,379,379 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:55,384,384 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,384,384 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:55,389,389 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,391,391 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:55,396,396 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,396,396 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:55,401,401 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,401,401 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:55,406,406 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,409,409 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:55,411,411 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,414,414 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:55,419,419 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,419,419 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:55,421,421 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,424,424 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:55,426,426 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,429,429 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:30:55,431,431 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,431,431 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:55,436,436 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:55,436,436 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:55,444,444 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:55,444,444 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:30:57,401,401 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:30:57,401,401 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:30:58,779,779 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,779,779 DEBUG [packsel_model.py:163] <QuerySet [{'id': 112, 'orderno': '763507', 'time': '16:30:08', 'symbole': 'WHA', 'side': 'B', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '791174'}]>
2019-05-12 16:30:58,784,784 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,786,786 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:30:58,791,791 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,791,791 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:58,796,796 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,796,796 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:58,801,801 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,801,801 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:58,806,806 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,806,806 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:30:58,811,811 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,811,811 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:58,816,816 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,816,816 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:30:58,821,821 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,821,821 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:58,824,824 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,826,826 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:58,829,829 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,829,829 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:30:58,834,834 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,834,834 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:30:58,839,839 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,839,839 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:30:58,844,844 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:30:58,846,846 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:30:58,854,854 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:30:58,854,854 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:00,654,654 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:00,654,654 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:00,664,664 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:00,664,664 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:02,089,89 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,091,91 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:02,096,96 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,096,96 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:02,101,101 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,101,101 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:02,109,109 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,109,109 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:02,114,114 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,114,114 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:02,119,119 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,119,119 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:02,124,124 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,124,124 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:02,129,129 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,131,131 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:02,136,136 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,136,136 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:02,141,141 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,141,141 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:02,146,146 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,146,146 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:02,149,149 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,151,151 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:02,154,154 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:02,156,156 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:02,174,174 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:02,174,174 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-05-12 16:31:03,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:03,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:03,901,901 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:03,901,901 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:05,234,234 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,234,234 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:05,241,241 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,241,241 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:05,249,249 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,249,249 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:05,254,254 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,254,254 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:05,259,259 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,261,261 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:05,264,264 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,264,264 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:05,269,269 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,269,269 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:05,271,271 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,271,271 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:05,276,276 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,276,276 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:05,281,281 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,281,281 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:05,286,286 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,286,286 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:05,291,291 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,291,291 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:05,296,296 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:05,296,296 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:05,309,309 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:05,311,311 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:06,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:06,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:08,324,324 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,324,324 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:08,329,329 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,329,329 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:08,334,334 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,334,334 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:08,341,341 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,341,341 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:08,344,344 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,346,346 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:08,351,351 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,351,351 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:08,354,354 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,354,354 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:08,359,359 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,361,361 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:08,364,364 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,364,364 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:08,369,369 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,369,369 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:08,374,374 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,374,374 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:08,379,379 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,379,379 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:08,384,384 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:08,384,384 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:08,399,399 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:08,399,399 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:09,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:09,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:09,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:09,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:09,909,909 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:09,909,909 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:11,171,171 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,171,171 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:11,176,176 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,179,179 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:11,184,184 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,184,184 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:11,186,186 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,189,189 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:11,194,194 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,194,194 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:11,199,199 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,199,199 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:11,201,201 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,204,204 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:11,206,206 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,206,206 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:11,211,211 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,211,211 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:11,216,216 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,216,216 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:11,221,221 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,221,221 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:11,226,226 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,226,226 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:11,231,231 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:11,231,231 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:11,239,239 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:11,239,239 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:14,302,302 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,304,304 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:14,307,307 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,309,309 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:14,314,314 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,314,314 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:14,319,319 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,319,319 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:14,324,324 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,324,324 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:14,329,329 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,332,332 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:14,334,334 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,337,337 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:14,342,342 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,344,344 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:14,349,349 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,349,349 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:14,354,354 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,354,354 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:14,359,359 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,359,359 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:14,364,364 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,364,364 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:14,369,369 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:14,369,369 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:14,407,407 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:14,407,407 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-05-12 16:31:15,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:15,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:17,432,432 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,432,432 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:17,439,439 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,442,442 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:17,447,447 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,447,447 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:17,452,452 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,452,452 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:17,457,457 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,457,457 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:17,462,462 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,462,462 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:17,469,469 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,469,469 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:17,474,474 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,474,474 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:17,477,477 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,479,479 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:17,482,482 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,482,482 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:17,487,487 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,487,487 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:17,494,494 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,494,494 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:17,499,499 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:17,499,499 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:17,512,512 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:17,512,512 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:18,889,889 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:18,889,889 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:18,899,899 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:18,899,899 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:20,224,224 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,224,224 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:20,232,232 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,232,232 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:20,234,234 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,237,237 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:20,242,242 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,242,242 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:20,247,247 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,247,247 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:20,252,252 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,252,252 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:20,257,257 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,257,257 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:20,264,264 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,264,264 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:20,269,269 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,269,269 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:20,274,274 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,274,274 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:20,282,282 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,282,282 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:20,287,287 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,287,287 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:20,292,292 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:20,292,292 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:20,337,337 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:20,337,337 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:21,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:21,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:23,204,204 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,204,204 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:23,209,209 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,209,209 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:23,214,214 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,217,217 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:23,219,219 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,219,219 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:23,224,224 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,224,224 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:23,229,229 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,232,232 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:23,234,234 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,237,237 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:23,239,239 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,239,239 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:23,244,244 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,244,244 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:23,249,249 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,249,249 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:23,252,252 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,254,254 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:23,257,257 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,257,257 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:23,262,262 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:23,262,262 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:23,279,279 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:23,279,279 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:25,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:25,227,227 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:25,237,237 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:25,237,237 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:25,284,284 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:25,284,284 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:26,569,569 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,572,572 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:26,577,577 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,577,577 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:26,582,582 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,582,582 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:26,587,587 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,587,587 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:26,592,592 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,592,592 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:26,599,599 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,599,599 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:26,604,604 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,604,604 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:26,609,609 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,609,609 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:26,614,614 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,614,614 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:26,617,617 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,619,619 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:26,622,622 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,622,622 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:26,627,627 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,629,629 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:26,632,632 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:26,632,632 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:26,664,664 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:26,664,664 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:28,234,234 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:28,234,234 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:29,577,577 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,577,577 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:29,582,582 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,582,582 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:29,587,587 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,589,589 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:29,592,592 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,592,592 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:29,599,599 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,599,599 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:29,604,604 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,604,604 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:29,609,609 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,609,609 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:29,614,614 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,617,617 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:29,619,619 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,619,619 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:29,624,624 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,624,624 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:29,629,629 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,629,629 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:29,634,634 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,634,634 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:29,639,639 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:29,639,639 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:29,647,647 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:29,647,647 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:32,924,924 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,924,924 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:32,929,929 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,932,932 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:32,934,934 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,937,937 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:32,944,944 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,944,944 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:32,949,949 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,949,949 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:32,954,954 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,954,954 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:32,962,962 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,962,962 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:32,967,967 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,967,967 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:32,974,974 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,974,974 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:32,979,979 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,979,979 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:32,987,987 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,987,987 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:32,992,992 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,994,994 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:32,999,999 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:32,999,999 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:33,017,17 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:33,017,17 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:34,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:34,919,919 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:34,927,927 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:34,927,927 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:34,937,937 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:34,937,937 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:36,377,377 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,377,377 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:36,382,382 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,384,384 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:36,389,389 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,389,389 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:36,397,397 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,397,397 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:36,402,402 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,402,402 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:36,407,407 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,409,409 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:36,414,414 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,414,414 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:36,419,419 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,419,419 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:36,427,427 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,427,427 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:36,434,434 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,434,434 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:36,442,442 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,442,442 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:36,447,447 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,449,449 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:36,457,457 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:36,459,459 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:36,512,512 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:36,512,512 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:38,104,104 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:38,104,104 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:38,112,112 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:38,112,112 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:39,527,527 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,527,527 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:39,532,532 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,532,532 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:39,537,537 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,537,537 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:39,542,542 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,542,542 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:39,547,547 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,547,547 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:39,552,552 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,554,554 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:39,559,559 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,559,559 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:39,567,567 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,567,567 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:39,572,572 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,572,572 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:39,577,577 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,579,579 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:39,584,584 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,587,587 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:39,592,592 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,592,592 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:39,594,594 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:39,597,597 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:39,629,629 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:39,629,629 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:41,254,254 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:41,254,254 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:42,629,629 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,629,629 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:42,634,634 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,634,634 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:42,642,642 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,642,642 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:42,647,647 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,647,647 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:42,652,652 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,652,652 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:42,657,657 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,657,657 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:42,662,662 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,662,662 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:42,667,667 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,667,667 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:42,672,672 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,672,672 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:42,677,677 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,677,677 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:42,679,679 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,682,682 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:42,684,684 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,684,684 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:42,692,692 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:42,692,692 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:42,699,699 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:42,699,699 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:44,274,274 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:44,274,274 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:44,289,289 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:44,289,289 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:45,660,660 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,660,660 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:45,665,665 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,665,665 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:45,670,670 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,672,672 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:45,677,677 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,680,680 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:45,685,685 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,685,685 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:45,690,690 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,690,690 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:45,695,695 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,695,695 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:45,700,700 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,700,700 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:45,705,705 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,705,705 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:45,712,712 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,712,712 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:45,720,720 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,720,720 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:45,727,727 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,727,727 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:45,732,732 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:45,735,735 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:45,747,747 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:45,747,747 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:47,400,400 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:47,400,400 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:48,935,935 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:48,935,935 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '572728'}]>
2019-05-12 16:31:48,952,952 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:48,952,952 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:48,957,957 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:48,957,957 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:48,962,962 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:48,965,965 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:48,967,967 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:48,967,967 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:48,972,972 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:48,972,972 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:48,980,980 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:48,980,980 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:48,985,985 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:48,985,985 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:48,990,990 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:48,990,990 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:48,995,995 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:48,995,995 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:49,002,2 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:49,002,2 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:49,007,7 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:49,007,7 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:49,012,12 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:49,012,12 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:49,022,22 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:49,022,22 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-05-12 16:31:49,027,27 DEBUG [plugin_fivesteps.py:500] Match found do remove matchedordermonitor below data
2019-05-12 16:31:49,027,27 DEBUG [plugin_fivesteps.py:501] [{'orderno': '368649', 'price': '4.78', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '635448', 'price': '4.80', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '522982', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '295850', 'price': '4.68', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '157402', 'price': '4.64', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '917261', 'price': '4.62', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '639653', 'price': '4.60', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '393196', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '572728'}, {'orderno': '999784', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '287752'}, {'orderno': '110300', 'price': '4.68', 'status': 'Pending(S)', 'referorderno': '734122'}, {'orderno': '763507', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '791174'}]
2019-05-12 16:31:49,085,85 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:49,085,85 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:31:49', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:31:50,607,607 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,607,607 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,670,670 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,670,670 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,682,682 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,692,692 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,692,692 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,702,702 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,702,702 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,712,712 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,712,712 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,722,722 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,722,722 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,742,742 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,742,742 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,787,787 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,787,787 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,812,812 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,812,812 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,822,822 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,822,822 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,842,842 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,842,842 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,872,872 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,887,887 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,887,887 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,907,907 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,907,907 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,917,917 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,932,932 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,932,932 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,947,947 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,947,947 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,967,967 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,967,967 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,987,987 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,987,987 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:50,997,997 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:50,997,997 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,010,10 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,010,10 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,020,20 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,020,20 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,030,30 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,030,30 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,040,40 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,040,40 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,050,50 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,050,50 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,060,60 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,060,60 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,070,70 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,070,70 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,080,80 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,080,80 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,097,97 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,097,97 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,107,107 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,107,107 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,117,117 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,117,117 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,127,127 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,127,127 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,135,135 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,137,137 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,145,145 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,145,145 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,155,155 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,155,155 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,165,165 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,165,165 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,175,175 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,175,175 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,185,185 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,185,185 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,195,195 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,195,195 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,205,205 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,205,205 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,215,215 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,215,215 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,225,225 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,225,225 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,235,235 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,235,235 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,245,245 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,245,245 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,255,255 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,255,255 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,265,265 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,265,265 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,275,275 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,275,275 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,285,285 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,285,285 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,295,295 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,295,295 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,305,305 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,305,305 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,315,315 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,315,315 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,325,325 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,325,325 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,335,335 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,335,335 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,345,345 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,345,345 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,355,355 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,355,355 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,365,365 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,365,365 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,375,375 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,375,375 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,385,385 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,385,385 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,395,395 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,395,395 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,405,405 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,405,405 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,412,412 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,412,412 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:31:51,415,415 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,415,415 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,425,425 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,425,425 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,427,427 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,427,427 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:31:51,435,435 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,435,435 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,437,437 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,440,440 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:51,445,445 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,447,447 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:51,447,447 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,450,450 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,452,452 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,452,452 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:51,457,457 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,457,457 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:51,462,462 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,462,462 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:51,467,467 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,467,467 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,470,470 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,470,470 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:51,477,477 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,477,477 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,480,480 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,480,480 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:51,487,487 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,490,490 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:51,490,490 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,492,492 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,497,497 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,500,500 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:51,502,502 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,505,505 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,505,505 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,507,507 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:51,512,512 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,515,515 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:51,522,522 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:51,522,522 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:51,552,552 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:51,555,555 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:51,565,565 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:51,565,565 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '663809', 'time': '16:31:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '393196'}]}
2019-05-12 16:31:52,997,997 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:52,997,997 DEBUG [packsel_model.py:163] <QuerySet [{'id': 113, 'orderno': '663809', 'time': '16:31:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '393196'}]>
2019-05-12 16:31:53,002,2 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,002,2 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:31:53,007,7 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,007,7 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:53,012,12 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,015,15 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:53,020,20 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,020,20 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:53,025,25 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,025,25 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:53,030,30 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,030,30 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:53,035,35 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,035,35 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:53,040,40 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,040,40 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:53,045,45 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,047,47 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:53,052,52 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,052,52 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:53,057,57 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,057,57 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:53,062,62 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,062,62 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:53,067,67 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:53,070,70 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:53,107,107 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:53,107,107 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:53,937,937 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:53,937,937 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:55,410,410 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,410,410 DEBUG [packsel_model.py:163] <QuerySet [{'id': 113, 'orderno': '663809', 'time': '16:31:34', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '393196'}]>
2019-05-12 16:31:55,415,415 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,415,415 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:31:55,422,422 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,422,422 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:55,430,430 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,430,430 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:55,435,435 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,437,437 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:55,442,442 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,442,442 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:55,450,450 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,450,450 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:55,455,455 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,457,457 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:55,462,462 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,462,462 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:55,470,470 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,470,470 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:55,477,477 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,477,477 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:55,482,482 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,485,485 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:55,490,490 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,490,490 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:55,497,497 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:55,497,497 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:55,542,542 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:55,542,542 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:31:56,977,977 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:31:56,977,977 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:31:58,347,347 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,350,350 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:31:58,352,352 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,355,355 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:58,357,357 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,360,360 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:58,362,362 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,362,362 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:58,370,370 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,370,370 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:31:58,372,372 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,375,375 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:58,377,377 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,380,380 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:31:58,385,385 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,385,385 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:58,387,387 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,390,390 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:58,392,392 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,395,395 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:31:58,397,397 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,397,397 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:31:58,402,402 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,402,402 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:31:58,407,407 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:31:58,407,407 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:31:58,420,420 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:31:58,420,420 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:01,795,795 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,795,795 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:01,800,800 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,800,800 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:01,807,807 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,807,807 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:01,812,812 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,812,812 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:01,817,817 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,820,820 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:01,825,825 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,825,825 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:01,830,830 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,830,830 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:01,835,835 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,835,835 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:01,840,840 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,840,840 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:01,845,845 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,845,845 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:01,847,847 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,850,850 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:01,855,855 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,855,855 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:01,862,862 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:01,862,862 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:01,872,872 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:01,872,872 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:04,932,932 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,932,932 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:04,937,937 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,937,937 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:04,940,940 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,942,942 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:04,952,952 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,952,952 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:04,962,962 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,965,965 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:04,967,967 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,967,967 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:04,972,972 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,972,972 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:04,977,977 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,977,977 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:04,980,980 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,980,980 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:04,985,985 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,985,985 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:04,990,990 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,992,992 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:04,995,995 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:04,995,995 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:05,000,0 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:05,002,2 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:05,017,17 DEBUG [plugin_fivesteps.py:500] Match found do remove matchedordermonitor below data
2019-05-12 16:32:05,017,17 DEBUG [plugin_fivesteps.py:501] [{'orderno': '368649', 'price': '4.78', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '635448', 'price': '4.80', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '522982', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '295850', 'price': '4.68', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '157402', 'price': '4.64', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '917261', 'price': '4.62', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '639653', 'price': '4.60', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '999784', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '287752'}, {'orderno': '110300', 'price': '4.68', 'status': 'Pending(S)', 'referorderno': '734122'}, {'orderno': '763507', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '791174'}, {'orderno': '663809', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '393196'}]
2019-05-12 16:32:05,042,42 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:05,042,42 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': 'matchtime', 'referorderno': 'None'}, {'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-05-12 16:32:05,055,55 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:05,055,55 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:32:05', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:32:07,267,267 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,267,267 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,277,277 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,277,277 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,345,345 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,345,345 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,355,355 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,355,355 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,412,412 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,412,412 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,422,422 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,422,422 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,432,432 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,432,432 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,447,447 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,447,447 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,457,457 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,457,457 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,467,467 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,467,467 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,477,477 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,477,477 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,507,507 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,507,507 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,515,515 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,515,515 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,525,525 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,525,525 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,535,535 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,535,535 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,545,545 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,545,545 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,555,555 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,555,555 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,565,565 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,600,600 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,600,600 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:32:07,602,602 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,602,602 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,612,612 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,612,612 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:07,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,615,615 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,620,620 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,620,620 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:07,625,625 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,625,625 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,627,627 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,627,627 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:07,632,632 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,632,632 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:07,637,637 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,637,637 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:07,640,640 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,642,642 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:07,645,645 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,645,645 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:07,650,650 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,650,650 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:07,655,655 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,655,655 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:07,660,660 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,660,660 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:07,662,662 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,665,665 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:07,667,667 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,667,667 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,670,670 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,670,670 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:07,675,675 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:07,677,677 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:07,677,677 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,680,680 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,690,690 DEBUG [plugin_fivesteps.py:500] Match found do remove matchedordermonitor below data
2019-05-12 16:32:07,690,690 DEBUG [plugin_fivesteps.py:501] [{'orderno': '368649', 'price': '4.78', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '635448', 'price': '4.80', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '522982', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '295850', 'price': '4.68', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '157402', 'price': '4.64', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '639653', 'price': '4.60', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '999784', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '287752'}, {'orderno': '110300', 'price': '4.68', 'status': 'Pending(S)', 'referorderno': '734122'}, {'orderno': '763507', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '791174'}, {'orderno': '663809', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '393196'}, {'orderno': '598391', 'price': '4.64', 'status': 'Pending(S)', 'referorderno': '917261'}]
2019-05-12 16:32:07,727,727 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,730,730 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,740,740 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:07,740,740 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '917261'}]}
2019-05-12 16:32:07,805,805 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:07,805,805 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:32:05', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:32:07,855,855 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,855,855 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,865,865 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,865,865 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,915,915 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,915,915 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,925,925 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,925,925 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,935,935 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,935,935 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,945,945 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,945,945 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,955,955 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,955,955 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,965,965 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,965,965 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,972,972 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,975,975 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,982,982 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,982,982 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:07,992,992 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:07,992,992 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,002,2 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,005,5 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,012,12 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,012,12 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,022,22 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,022,22 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,032,32 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,032,32 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,042,42 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,042,42 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,052,52 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,052,52 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,062,62 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,062,62 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,070,70 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,070,70 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,080,80 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,080,80 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,090,90 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,090,90 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,100,100 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,100,100 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,305,305 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,305,305 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,495,495 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,495,495 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,507,507 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,510,510 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,517,517 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,517,517 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,620,620 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,630,630 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,630,630 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,640,640 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,640,640 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,650,650 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,650,650 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,660,660 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,660,660 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,670,670 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,670,670 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,680,680 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,680,680 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,690,690 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,690,690 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,700,700 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,700,700 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,707,707 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,707,707 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,717,717 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,717,717 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,727,727 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,727,727 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,737,737 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,737,737 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,747,747 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,747,747 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,755,755 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,755,755 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,765,765 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,765,765 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,775,775 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,775,775 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:08,980,980 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:08,980,980 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,147,147 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,147,147 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,300,300 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,300,300 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,510,510 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,510,510 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,520,520 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,520,520 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,585,585 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,585,585 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,595,595 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,595,595 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,605,605 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,605,605 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,615,615 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,615,615 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,625,625 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,625,625 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,635,635 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,635,635 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,645,645 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,645,645 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,655,655 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,655,655 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,665,665 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,665,665 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,675,675 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,675,675 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,682,682 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,685,685 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,695,695 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,695,695 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,705,705 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,705,705 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,715,715 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,715,715 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,725,725 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,725,725 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,735,735 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,735,735 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,745,745 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,745,745 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,755,755 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,755,755 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,765,765 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,765,765 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,775,775 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,775,775 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,785,785 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,785,785 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,795,795 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,795,795 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,805,805 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,805,805 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,815,815 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,815,815 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,825,825 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,825,825 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,835,835 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,835,835 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,845,845 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,845,845 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,855,855 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,855,855 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,872,872 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,872,872 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,882,882 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,882,882 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,902,902 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,902,902 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,912,912 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,912,912 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,922,922 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,922,922 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,932,932 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,932,932 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,942,942 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,942,942 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,952,952 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,952,952 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,962,962 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,962,962 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,972,972 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,972,972 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,982,982 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,982,982 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:09,992,992 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:09,992,992 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:10,000,0 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:10,000,0 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:10,010,10 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:10,010,10 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:10,020,20 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:10,020,20 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:10,030,30 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:10,030,30 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:10,040,40 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:10,040,40 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:10,050,50 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:10,050,50 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:10,235,235 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:10,235,235 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:10,287,287 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,290,290 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:32:10,302,302 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,305,305 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:10,310,310 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,312,312 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:10,320,320 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,320,320 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:10,327,327 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,327,327 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:10,335,335 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,335,335 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:10,342,342 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,342,342 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:10,350,350 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,350,350 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:10,357,357 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,357,357 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:10,365,365 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,365,365 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:10,372,372 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,372,372 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:10,380,380 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,380,380 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:10,387,387 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,390,390 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:10,397,397 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,397,397 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:10,405,405 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:10,405,405 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:10,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:10,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:10,592,592 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:10,592,592 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '157402'}]}
2019-05-12 16:32:11,460,460 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,460,460 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,467,467 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,467,467 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,477,477 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,477,477 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,487,487 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,487,487 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,497,497 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,497,497 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,505,505 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,505,505 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,515,515 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,515,515 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,525,525 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,525,525 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,535,535 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,535,535 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,545,545 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,545,545 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,555,555 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,555,555 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,562,562 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,562,562 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,590,590 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,590,590 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,600,600 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,600,600 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,610,610 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,610,610 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,620,620 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,620,620 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,627,627 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,627,627 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,637,637 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,637,637 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,647,647 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,647,647 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,657,657 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,657,657 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,667,667 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,667,667 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,677,677 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,677,677 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,687,687 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,687,687 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,697,697 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,697,697 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,705,705 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,705,705 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,715,715 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,715,715 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,725,725 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,725,725 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,732,732 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,732,732 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,742,742 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,742,742 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,752,752 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,752,752 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,762,762 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,762,762 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,772,772 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,772,772 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,782,782 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,782,782 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,792,792 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,792,792 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,802,802 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,802,802 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,812,812 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,812,812 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,822,822 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,822,822 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,832,832 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,832,832 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,842,842 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,842,842 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,852,852 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,852,852 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,870,870 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,870,870 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,880,880 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,880,880 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:11,890,890 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:11,890,890 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:12,112,112 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:12,112,112 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:12,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:12,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:12,295,295 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,297,297 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:12,302,302 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,302,302 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:12,307,307 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,307,307 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:12,312,312 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,312,312 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:12,317,317 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,320,320 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:12,325,325 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,325,325 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:12,330,330 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,330,330 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:12,335,335 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,337,337 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:12,342,342 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,342,342 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:12,347,347 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,347,347 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:12,355,355 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,355,355 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:12,360,360 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,360,360 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:12,365,365 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,365,365 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:12,372,372 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,372,372 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:12,380,380 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:12,380,380 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:12,530,530 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:12,530,530 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:13,727,727 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:13,727,727 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:13,910,910 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:13,910,910 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:14,220,220 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:14,220,220 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:14,347,347 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:14,347,347 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:14,467,467 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,467,467 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:14,475,475 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,475,475 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:14,482,482 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,482,482 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:14,490,490 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,490,490 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:14,497,497 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,497,497 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:14,505,505 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,505,505 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:14,512,512 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,512,512 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:14,517,517 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,520,520 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:14,525,525 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,527,527 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:14,532,532 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,535,535 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:14,540,540 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,542,542 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:14,547,547 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,550,550 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:14,555,555 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,557,557 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:14,562,562 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,565,565 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:14,570,570 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:14,572,572 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:14,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:14,652,652 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:14,902,902 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:14,902,902 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:16,185,185 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,185,185 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:16,190,190 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,190,190 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:16,195,195 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,195,195 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:16,200,200 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,200,200 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:16,205,205 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,207,207 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:16,210,210 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,212,212 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:16,217,217 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,217,217 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:16,222,222 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,222,222 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:16,227,227 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,227,227 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:16,232,232 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,232,232 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:16,237,237 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,237,237 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:16,242,242 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,242,242 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:16,245,245 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,247,247 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:16,250,250 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,250,250 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:16,255,255 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:16,255,255 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:16,272,272 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:16,272,272 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:16,570,570 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:16,570,570 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:16,580,580 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:16,580,580 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:16,590,590 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:16,590,590 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:16,597,597 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:16,597,597 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:16,607,607 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:16,607,607 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:16,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:16,655,655 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:18,020,20 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,020,20 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:18,025,25 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,025,25 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:18,030,30 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,030,30 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:18,033,33 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,035,35 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:18,038,38 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,040,40 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:18,043,43 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,043,43 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:18,048,48 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,048,48 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:18,053,53 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,053,53 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:18,055,55 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,055,55 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:18,060,60 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,060,60 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:18,065,65 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,065,65 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:18,070,70 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,070,70 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:18,075,75 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,075,75 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:18,080,80 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,080,80 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:18,083,83 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:18,085,85 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:18,093,93 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:18,093,93 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:19,913,913 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:19,913,913 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:19,965,965 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:19,965,965 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:19,975,975 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:19,975,975 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:21,395,395 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,395,395 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:21,400,400 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,400,400 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:21,405,405 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,405,405 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:21,410,410 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,410,410 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:21,415,415 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,415,415 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:21,418,418 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,420,420 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:21,423,423 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,423,423 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:21,428,428 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,428,428 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:21,433,433 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,433,433 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:21,438,438 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,438,438 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:21,443,443 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,443,443 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:21,448,448 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,448,448 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:21,453,453 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,453,453 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:21,458,458 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,458,458 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:21,463,463 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:21,463,463 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:21,473,473 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:21,473,473 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:24,248,248 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,248,248 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:24,253,253 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,253,253 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:24,258,258 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,260,260 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:24,263,263 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,265,265 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:24,268,268 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,268,268 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:24,275,275 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,275,275 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:24,280,280 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,280,280 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:24,288,288 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,288,288 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:24,293,293 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,293,293 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:24,300,300 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,300,300 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:24,305,305 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,308,308 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:24,313,313 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,313,313 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:24,315,315 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,318,318 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:24,320,320 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,320,320 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:24,325,325 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:24,325,325 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:24,333,333 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:24,333,333 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:25,915,915 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:25,915,915 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:27,448,448 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,448,448 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:27,453,453 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,453,453 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:27,458,458 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,458,458 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:27,465,465 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,465,465 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:27,473,473 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,473,473 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:27,478,478 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,478,478 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:27,480,480 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,480,480 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:27,485,485 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,485,485 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:27,488,488 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,490,490 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:27,495,495 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,495,495 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:27,500,500 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,500,500 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:27,505,505 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,505,505 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:27,510,510 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,510,510 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:27,515,515 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,515,515 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:27,520,520 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:27,523,523 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:27,568,568 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:27,568,568 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:28,910,910 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:28,910,910 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:30,328,328 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,330,330 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:30,335,335 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,335,335 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:30,340,340 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,340,340 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:30,345,345 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,345,345 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:30,350,350 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,350,350 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:30,355,355 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,355,355 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:30,360,360 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,360,360 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:30,365,365 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,365,365 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:30,370,370 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,370,370 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:30,375,375 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,375,375 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:30,380,380 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,380,380 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:30,385,385 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,385,385 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:30,390,390 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,390,390 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:30,398,398 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,398,398 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:30,403,403 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:30,403,403 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:30,438,438 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:30,438,438 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:32,253,253 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:32,253,253 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:32,260,260 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:32,263,263 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:32,270,270 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:32,270,270 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:33,710,710 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,710,710 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:33,715,715 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,715,715 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:33,723,723 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,723,723 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:33,728,728 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,728,728 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:33,733,733 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,733,733 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:33,738,738 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,738,738 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:33,743,743 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,743,743 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:33,748,748 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,748,748 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:33,753,753 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,753,753 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:33,758,758 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,758,758 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:33,763,763 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,763,763 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:33,768,768 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,768,768 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:33,773,773 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,775,775 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:33,778,778 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,780,780 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:33,783,783 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:33,783,783 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:33,810,810 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:33,810,810 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:35,253,253 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:35,253,253 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:36,690,690 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,693,693 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:36,695,695 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,695,695 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:36,700,700 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,700,700 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:36,705,705 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,705,705 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:36,710,710 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,710,710 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:36,713,713 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,715,715 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:36,718,718 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,718,718 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:36,723,723 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,723,723 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:36,728,728 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,728,728 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:36,733,733 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,733,733 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:36,735,735 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,738,738 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:36,740,740 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,740,740 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:36,745,745 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,745,745 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:36,750,750 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,753,753 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:36,758,758 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:36,758,758 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:36,763,763 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:36,763,763 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:38,593,593 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:38,593,593 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:40,120,120 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,120,120 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:40,125,125 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,125,125 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:40,130,130 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,130,130 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:40,135,135 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,135,135 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:40,143,143 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,143,143 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:40,150,150 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,150,150 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:40,155,155 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,155,155 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:40,163,163 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,163,163 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:40,168,168 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,168,168 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:40,175,175 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,175,175 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:40,180,180 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,180,180 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:40,185,185 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,185,185 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:40,190,190 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,190,190 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:40,195,195 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,195,195 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:40,203,203 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:40,203,203 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:40,235,235 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:40,235,235 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:41,605,605 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:41,605,605 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:41,613,613 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:41,613,613 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:43,065,65 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,068,68 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:43,070,70 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,073,73 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:43,075,75 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,075,75 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:43,080,80 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,080,80 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:43,085,85 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,085,85 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:43,090,90 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,090,90 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:43,095,95 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,095,95 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:43,100,100 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,100,100 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:43,105,105 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,105,105 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:43,108,108 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,108,108 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:43,113,113 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,115,115 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:43,118,118 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,120,120 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:43,125,125 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,125,125 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:43,130,130 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,130,130 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:43,135,135 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:43,135,135 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:43,170,170 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:43,170,170 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:44,945,945 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:44,945,945 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:44,955,955 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:44,955,955 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:46,618,618 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,618,618 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:46,623,623 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,623,623 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:46,628,628 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,628,628 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:46,633,633 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,633,633 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:46,638,638 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,638,638 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:46,643,643 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,643,643 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:46,648,648 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,650,650 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:46,655,655 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,655,655 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:46,660,660 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,660,660 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:46,665,665 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,665,665 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:46,670,670 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,670,670 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:46,675,675 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,675,675 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:46,680,680 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,683,683 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:46,688,688 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,688,688 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:46,693,693 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:46,693,693 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:46,728,728 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:46,728,728 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:48,275,275 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:48,278,278 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:48,285,285 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:48,285,285 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:49,650,650 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,653,653 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:49,655,655 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,655,655 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:49,660,660 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,663,663 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:49,665,665 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,665,665 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:49,670,670 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,670,670 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:49,675,675 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,675,675 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:49,680,680 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,680,680 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:49,685,685 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,685,685 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:49,690,690 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,690,690 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:49,695,695 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,695,695 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:49,700,700 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,700,700 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:49,705,705 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,705,705 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:49,708,708 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,708,708 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:49,713,713 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,713,713 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:49,718,718 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:49,718,718 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:49,730,730 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:49,730,730 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:51,621,621 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:51,621,621 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:51,633,633 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:51,633,633 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:53,086,86 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,086,86 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:53,091,91 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,093,93 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:53,096,96 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,098,98 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:53,103,103 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,103,103 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:53,106,106 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,108,108 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:53,111,111 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,113,113 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:53,116,116 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,116,116 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:53,121,121 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,121,121 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:53,126,126 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,126,126 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:53,128,128 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,128,128 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:53,133,133 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,133,133 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:53,138,138 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,138,138 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:53,141,141 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,141,141 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:53,146,146 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,146,146 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:53,151,151 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:53,151,151 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:53,161,161 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:53,161,161 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:54,613,613 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:54,613,613 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:54,623,623 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:54,623,623 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:55,991,991 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:55,991,991 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:55,996,996 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:55,996,996 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:56,001,1 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,001,1 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:56,006,6 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,006,6 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:56,011,11 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,011,11 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:56,016,16 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,016,16 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:56,021,21 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,021,21 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:56,026,26 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,028,28 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:56,031,31 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,033,33 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:56,036,36 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,036,36 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:56,041,41 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,043,43 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:56,046,46 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,048,48 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:56,053,53 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,053,53 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:56,058,58 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,058,58 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:56,063,63 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:56,063,63 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:56,088,88 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:56,088,88 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:32:57,618,618 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:32:57,618,618 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:32:59,126,126 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,126,126 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:32:59,131,131 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,131,131 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:32:59,136,136 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,136,136 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:32:59,143,143 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,143,143 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:59,148,148 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,148,148 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:59,153,153 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,153,153 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:32:59,158,158 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,158,158 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:32:59,163,163 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,163,163 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:59,168,168 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,171,171 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:32:59,173,173 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,176,176 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:59,178,178 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,181,181 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:59,186,186 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,186,186 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:32:59,191,191 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,191,191 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:32:59,196,196 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,196,196 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:32:59,201,201 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:32:59,201,201 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:32:59,208,208 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:32:59,211,211 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:00,636,636 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:00,636,636 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:00,646,646 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:00,646,646 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:02,061,61 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,061,61 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:02,066,66 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,068,68 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:02,073,73 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,073,73 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:02,078,78 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,078,78 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:02,083,83 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,083,83 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:02,088,88 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,088,88 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:02,093,93 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,093,93 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:02,098,98 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,098,98 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:02,103,103 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,103,103 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:02,108,108 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,108,108 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:02,113,113 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,113,113 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:02,118,118 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,118,118 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:02,121,121 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,121,121 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:02,126,126 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,126,126 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:02,128,128 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:02,131,131 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:02,141,141 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:02,141,141 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:03,891,891 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:03,891,891 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:03,901,901 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:03,901,901 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:03,951,951 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:03,953,953 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:05,421,421 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,423,423 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:05,426,426 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,426,426 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:05,431,431 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,433,433 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:05,436,436 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,436,436 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:05,441,441 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,441,441 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:05,446,446 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,446,446 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:05,451,451 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,451,451 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:05,456,456 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,456,456 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:05,461,461 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,461,461 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:05,466,466 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,466,466 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:05,471,471 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,473,473 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:05,476,476 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,476,476 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:05,481,481 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,481,481 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:05,486,486 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,486,486 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:05,491,491 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:05,491,491 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:05,508,508 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:05,508,508 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:06,893,893 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:06,893,893 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:06,903,903 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:06,903,903 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:08,333,333 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,333,333 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:08,338,338 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,338,338 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:08,343,343 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,343,343 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:08,348,348 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,348,348 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:08,353,353 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,353,353 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:08,358,358 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,358,358 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:08,363,363 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,363,363 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:08,368,368 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,368,368 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:08,371,371 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,373,373 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:08,376,376 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,376,376 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:08,381,381 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,381,381 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:08,388,388 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,388,388 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:08,393,393 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,393,393 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:08,398,398 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,398,398 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:08,403,403 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:08,406,406 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:08,443,443 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:08,443,443 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:10,226,226 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:10,226,226 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:10,236,236 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:10,236,236 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:10,246,246 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:10,246,246 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:10,253,253 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:10,253,253 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:11,661,661 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,661,661 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:11,666,666 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,666,666 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:11,671,671 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,673,673 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:11,676,676 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,676,676 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:11,681,681 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,681,681 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:11,686,686 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,688,688 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:11,691,691 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,693,693 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:11,696,696 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,698,698 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:11,701,701 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,703,703 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:11,706,706 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,706,706 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:11,711,711 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,711,711 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:11,716,716 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,716,716 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:11,721,721 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,721,721 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:11,726,726 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,726,726 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:11,731,731 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:11,731,731 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:11,746,746 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:11,748,748 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:13,233,233 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:13,233,233 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:13,243,243 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:13,243,243 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:13,253,253 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:13,253,253 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:14,683,683 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,686,686 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:14,688,688 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,691,691 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:14,696,696 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,696,696 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:14,701,701 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,701,701 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:14,706,706 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,706,706 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:14,713,713 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,713,713 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:14,718,718 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,718,718 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:14,726,726 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,726,726 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:14,731,731 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,733,733 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:14,738,738 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,738,738 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:14,746,746 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,746,746 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:14,751,751 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,751,751 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:14,756,756 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,758,758 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:14,763,763 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,763,763 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:14,766,766 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:14,766,766 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:14,803,803 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:14,803,803 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:16,571,571 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:16,571,571 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:16,581,581 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:16,581,581 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:16,591,591 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:16,591,591 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:16,601,601 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:16,601,601 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:16,608,608 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:16,608,608 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:16,618,618 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:16,618,618 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:17,953,953 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:17,953,953 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:17,956,956 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:17,958,958 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:17,961,961 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:17,961,961 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:17,966,966 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:17,966,966 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:17,971,971 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:17,971,971 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:17,976,976 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:17,976,976 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:17,981,981 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:17,981,981 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:17,986,986 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:17,986,986 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:17,991,991 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:17,991,991 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:17,996,996 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:17,996,996 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:17,998,998 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:18,001,1 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:18,006,6 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:18,006,6 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:18,011,11 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:18,011,11 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:18,013,13 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:18,016,16 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:18,018,18 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:18,021,21 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:18,048,48 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:18,048,48 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:19,916,916 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:19,916,916 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:19,926,926 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:19,926,926 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:19,936,936 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:19,936,936 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:21,368,368 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,368,368 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:21,373,373 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,373,373 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:21,378,378 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,381,381 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:21,383,383 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,386,386 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:21,388,388 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,388,388 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:21,393,393 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,393,393 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:21,398,398 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,398,398 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:21,403,403 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,403,403 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:21,408,408 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,408,408 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:21,413,413 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,413,413 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:21,418,418 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,418,418 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:21,423,423 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,423,423 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:21,428,428 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,428,428 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:21,433,433 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,433,433 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:21,438,438 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:21,438,438 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:21,481,481 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:21,481,481 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:22,914,914 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:22,914,914 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:24,249,249 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,249,249 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:24,251,251 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,254,254 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:24,259,259 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,259,259 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:24,264,264 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,264,264 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:24,269,269 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,269,269 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:24,274,274 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,274,274 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:24,279,279 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,279,279 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:24,284,284 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,284,284 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:24,289,289 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,291,291 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:24,294,294 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,296,296 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:24,299,299 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,301,301 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:24,306,306 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,306,306 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:24,311,311 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,311,311 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:24,316,316 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,316,316 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:24,321,321 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:24,321,321 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:24,351,351 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:24,351,351 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:25,911,911 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:25,911,911 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:25,921,921 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:25,921,921 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:27,499,499 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,499,499 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:27,504,504 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,504,504 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:27,509,509 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,509,509 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:27,514,514 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,514,514 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:27,519,519 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,519,519 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:27,524,524 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,524,524 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:27,526,526 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,529,529 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:27,531,531 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,531,531 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:27,536,536 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,536,536 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:27,541,541 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,541,541 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:27,546,546 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,546,546 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:27,551,551 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,551,551 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:27,556,556 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,556,556 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:27,561,561 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,561,561 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:27,566,566 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:27,566,566 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:27,596,596 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:27,596,596 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:30,361,361 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,361,361 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:30,366,366 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,366,366 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:30,371,371 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,371,371 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:30,376,376 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,376,376 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:30,381,381 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,381,381 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:30,386,386 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,386,386 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:30,389,389 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,391,391 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:30,394,394 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,396,396 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:30,399,399 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,401,401 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:30,404,404 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,406,406 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:30,409,409 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,411,411 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:30,416,416 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,416,416 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:30,421,421 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,421,421 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:30,426,426 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,426,426 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:30,431,431 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:30,431,431 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:30,466,466 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:30,466,466 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:32,251,251 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:32,251,251 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:32,261,261 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:32,261,261 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:33,721,721 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,721,721 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:33,729,729 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,729,729 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:33,736,736 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,736,736 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:33,744,744 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,746,746 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:33,751,751 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,751,751 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:33,759,759 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,759,759 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:33,766,766 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,766,766 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:33,771,771 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,771,771 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:33,779,779 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,781,781 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:33,786,786 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,786,786 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:33,794,794 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,796,796 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:33,801,801 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,804,804 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:33,809,809 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,811,811 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:33,816,816 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,816,816 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:33,824,824 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:33,824,824 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:33,836,836 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:33,836,836 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:35,266,266 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:35,269,269 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:35,276,276 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:35,276,276 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:36,701,701 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,701,701 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:36,706,706 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,706,706 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:36,711,711 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,711,711 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:36,716,716 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,716,716 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:36,721,721 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,721,721 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:36,726,726 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,726,726 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:36,731,731 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,731,731 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:36,736,736 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,736,736 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:36,739,739 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,739,739 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:36,744,744 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,744,744 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:36,749,749 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,749,749 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:36,754,754 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,754,754 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:36,756,756 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,756,756 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:36,761,761 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,761,761 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:36,766,766 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:36,766,766 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:36,771,771 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:36,771,771 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:38,596,596 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:38,596,596 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:38,646,646 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:38,649,649 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:40,104,104 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,104,104 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:40,111,111 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,111,111 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:40,116,116 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,116,116 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:40,121,121 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,121,121 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:40,126,126 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,126,126 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:40,131,131 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,131,131 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:40,136,136 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,139,139 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:40,144,144 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,144,144 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:40,151,151 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,151,151 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:40,159,159 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,159,159 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:40,164,164 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,164,164 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:40,171,171 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,171,171 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:40,179,179 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,179,179 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:40,184,184 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,184,184 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:40,191,191 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:40,191,191 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:40,204,204 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:40,204,204 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:41,604,604 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:41,604,604 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:41,614,614 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:41,614,614 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:43,094,94 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,094,94 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:43,099,99 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,099,99 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:43,104,104 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,104,104 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:43,109,109 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,109,109 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:43,111,111 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,114,114 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:43,119,119 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,119,119 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:43,124,124 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,124,124 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:43,129,129 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,129,129 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:43,134,134 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,134,134 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:43,139,139 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,139,139 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:43,144,144 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,144,144 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:43,151,151 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,151,151 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:43,154,154 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,156,156 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:43,161,161 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,161,161 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:43,164,164 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:43,164,164 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:43,196,196 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:43,196,196 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:46,056,56 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,056,56 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:46,064,64 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,064,64 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:46,071,71 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,071,71 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:46,076,76 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,079,79 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:46,084,84 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,084,84 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:46,091,91 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,091,91 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:46,099,99 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,101,101 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:46,106,106 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,106,106 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:46,114,114 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,114,114 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:46,119,119 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,119,119 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:46,126,126 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,126,126 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:46,134,134 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,134,134 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:46,139,139 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,141,141 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:46,146,146 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,146,146 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:46,154,154 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:46,154,154 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:46,191,191 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:46,191,191 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:47,969,969 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:47,969,969 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:49,536,536 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,536,536 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:49,539,539 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,541,541 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:49,544,544 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,544,544 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:49,551,551 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,551,551 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:49,556,556 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,556,556 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:49,559,559 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,561,561 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:49,566,566 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,566,566 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:49,571,571 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,571,571 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:49,576,576 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,576,576 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:49,584,584 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,584,584 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:49,589,589 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,589,589 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:49,591,591 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,594,594 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:49,596,596 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,599,599 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:49,601,601 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,601,601 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:49,606,606 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:49,606,606 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:49,624,624 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:49,624,624 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:51,271,271 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:51,271,271 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:51,281,281 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:51,281,281 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:52,956,956 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:52,956,956 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:52,961,961 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:52,961,961 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:52,966,966 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:52,966,966 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:52,971,971 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:52,971,971 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:52,976,976 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:52,976,976 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:52,984,984 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:52,984,984 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:52,989,989 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:52,991,991 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:52,996,996 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:52,996,996 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:53,004,4 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:53,004,4 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:53,009,9 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:53,011,11 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:53,016,16 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:53,016,16 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:53,024,24 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:53,024,24 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:53,031,31 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:53,031,31 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:53,039,39 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:53,039,39 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:53,046,46 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:53,046,46 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:53,056,56 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:53,056,56 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:54,279,279 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:54,279,279 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:54,289,289 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:54,289,289 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:54,299,299 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:54,299,299 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:54,309,309 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:54,309,309 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:54,319,319 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:54,319,319 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:54,374,374 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:54,374,374 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:55,802,802 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,802,802 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:55,807,807 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,807,807 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:55,812,812 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,812,812 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:55,814,814 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,817,817 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:55,819,819 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,822,822 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:55,827,827 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,827,827 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:55,829,829 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,829,829 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:55,834,834 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,837,837 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:55,842,842 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,842,842 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:55,844,844 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,847,847 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:55,849,849 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,849,849 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:55,854,854 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,854,854 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:55,859,859 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,859,859 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:55,864,864 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,864,864 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:55,869,869 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:55,869,869 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:55,874,874 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:55,874,874 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:33:57,292,292 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:33:57,292,292 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:33:58,684,684 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,684,684 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:33:58,689,689 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,689,689 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:33:58,697,697 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,697,697 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:33:58,702,702 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,702,702 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:58,707,707 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,707,707 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:58,709,709 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,712,712 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:33:58,714,714 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,714,714 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:33:58,719,719 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,719,719 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:58,724,724 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,724,724 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:33:58,729,729 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,729,729 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:58,734,734 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,734,734 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:58,739,739 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,739,739 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:33:58,744,744 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,744,744 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:33:58,749,749 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,749,749 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:33:58,754,754 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:33:58,754,754 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:33:58,797,797 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:33:58,797,797 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:00,619,619 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:00,619,619 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:00,629,629 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:00,629,629 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:02,187,187 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,187,187 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:02,192,192 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,192,192 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:02,197,197 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,197,197 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:02,202,202 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,202,202 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:02,207,207 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,207,207 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:02,212,212 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,212,212 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:02,214,214 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,217,217 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:02,219,219 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,222,222 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:02,224,224 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,227,227 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:02,229,229 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,232,232 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:02,234,234 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,237,237 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:02,239,239 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,242,242 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:02,247,247 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,247,247 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:02,252,252 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,252,252 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:02,257,257 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:02,257,257 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:02,292,292 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:02,294,294 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:03,657,657 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:03,657,657 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:05,052,52 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,052,52 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:05,057,57 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,057,57 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:05,062,62 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,062,62 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:05,067,67 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,067,67 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:05,072,72 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,072,72 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:05,077,77 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,077,77 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:05,079,79 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,082,82 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:05,084,84 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,087,87 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:05,089,89 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,089,89 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:05,094,94 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,094,94 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:05,099,99 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,099,99 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:05,104,104 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,104,104 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:05,109,109 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,109,109 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:05,114,114 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,114,114 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:05,119,119 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:05,122,122 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:05,164,164 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:05,164,164 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:06,894,894 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:06,894,894 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:06,904,904 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:06,904,904 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:08,462,462 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,462,462 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:08,467,467 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,467,467 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:08,472,472 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,472,472 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:08,477,477 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,477,477 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:08,482,482 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,482,482 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:08,487,487 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,487,487 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:08,492,492 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,492,492 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:08,497,497 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,497,497 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:08,502,502 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,502,502 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:08,507,507 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,507,507 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:08,509,509 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,512,512 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:08,514,514 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,514,514 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:08,519,519 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,519,519 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:08,524,524 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,524,524 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:08,529,529 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:08,529,529 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:08,534,534 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:08,534,534 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:09,894,894 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:09,894,894 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:09,904,904 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:09,904,904 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:11,339,339 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,339,339 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:11,344,344 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,344,344 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:11,349,349 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,349,349 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:11,354,354 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,354,354 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:11,357,357 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,359,359 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:11,362,362 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,362,362 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:11,367,367 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,367,367 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:11,372,372 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,372,372 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:11,377,377 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,377,377 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:11,382,382 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,382,382 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:11,387,387 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,387,387 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:11,389,389 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,389,389 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:11,394,394 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,394,394 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:11,399,399 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,399,399 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:11,404,404 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:11,404,404 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:11,412,412 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:11,412,412 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:12,894,894 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:12,894,894 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:14,289,289 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,289,289 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:14,294,294 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,294,294 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:14,299,299 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,302,302 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:14,304,304 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,304,304 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:14,309,309 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,312,312 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:14,314,314 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,317,317 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:14,322,322 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,322,322 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:14,327,327 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,327,327 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:14,332,332 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,332,332 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:14,337,337 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,337,337 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:14,342,342 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,344,344 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:14,349,349 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,349,349 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:14,354,354 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,354,354 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:14,359,359 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,359,359 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:14,364,364 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:14,364,364 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:14,397,397 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:14,397,397 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:16,232,232 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:16,232,232 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:16,242,242 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:16,242,242 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:17,744,744 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,747,747 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:17,749,749 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,752,752 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:17,757,757 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,757,757 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:17,762,762 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,762,762 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:17,767,767 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,767,767 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:17,772,772 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,772,772 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:17,777,777 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,777,777 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:17,782,782 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,782,782 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:17,787,787 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,787,787 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:17,792,792 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,792,792 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:17,797,797 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,797,797 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:17,802,802 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,802,802 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:17,807,807 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,807,807 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:17,809,809 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,809,809 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:17,814,814 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:17,814,814 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:17,829,829 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:17,829,829 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:19,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:19,574,574 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:19,582,582 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:19,582,582 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:19,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:19,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:21,122,122 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,122,122 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:21,129,129 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,129,129 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:21,134,134 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,137,137 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:21,142,142 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,144,144 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:21,147,147 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,149,149 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:21,154,154 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,154,154 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:21,159,159 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,159,159 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:21,167,167 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,167,167 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:21,174,174 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,174,174 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:21,182,182 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,182,182 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:21,189,189 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,189,189 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:21,197,197 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,197,197 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:21,204,204 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,204,204 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:21,209,209 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,212,212 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:21,217,217 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:21,217,217 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:21,262,262 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:21,262,262 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:22,572,572 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:22,572,572 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:23,994,994 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:23,994,994 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:24,002,2 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,002,2 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:24,007,7 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,007,7 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:24,012,12 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,012,12 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:24,017,17 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,017,17 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:24,022,22 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,022,22 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:24,027,27 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,029,29 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:24,032,32 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,034,34 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:24,039,39 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,039,39 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:24,044,44 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,047,47 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:24,052,52 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,052,52 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:24,057,57 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,059,59 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:24,064,64 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,064,64 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:24,072,72 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,072,72 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:24,077,77 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:24,077,77 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:24,082,82 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:24,082,82 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:25,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:25,917,917 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:25,927,927 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:25,927,927 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:25,934,934 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:25,934,934 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:27,329,329 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,329,329 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:27,337,337 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,337,337 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:27,342,342 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,342,342 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:27,347,347 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,347,347 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:27,352,352 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,352,352 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:27,357,357 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,357,357 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:27,362,362 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,364,364 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:27,369,369 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,369,369 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:27,374,374 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,374,374 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:27,379,379 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,379,379 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:27,384,384 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,384,384 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:27,389,389 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,389,389 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:27,394,394 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,394,394 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:27,399,399 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,399,399 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:27,404,404 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:27,404,404 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:27,442,442 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:27,442,442 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:28,915,915 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:28,915,915 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:30,380,380 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,380,380 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:30,385,385 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,385,385 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:30,390,390 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,390,390 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:30,395,395 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,395,395 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:30,400,400 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,400,400 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:30,402,402 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,405,405 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:30,407,407 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,407,407 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:30,412,412 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,412,412 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:30,417,417 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,417,417 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:30,420,420 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,420,420 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:30,425,425 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,425,425 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:30,430,430 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,430,430 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:30,435,435 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,435,435 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:30,440,440 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,440,440 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:30,445,445 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:30,445,445 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:30,457,457 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:30,457,457 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:33,762,762 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,762,762 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:33,767,767 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,770,770 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:33,775,775 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,775,775 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:33,780,780 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,780,780 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:33,787,787 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,787,787 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:33,795,795 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,797,797 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:33,802,802 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,805,805 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:33,810,810 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,812,812 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:33,820,820 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,820,820 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:33,827,827 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,827,827 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:33,832,832 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,835,835 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:33,840,840 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,842,842 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:33,847,847 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,850,850 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:33,855,855 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,855,855 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:33,862,862 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:33,862,862 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:33,870,870 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:33,870,870 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:35,255,255 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:35,255,255 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:35,310,310 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:35,310,310 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:36,775,775 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,777,777 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:36,782,782 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,782,782 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:36,787,787 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,787,787 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:36,792,792 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,792,792 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:36,797,797 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,797,797 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:36,802,802 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,802,802 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:36,807,807 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,807,807 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:36,812,812 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,812,812 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:36,817,817 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,817,817 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:36,822,822 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,822,822 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:36,827,827 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,827,827 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:36,832,832 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,832,832 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:36,837,837 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,837,837 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:36,842,842 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,842,842 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:36,847,847 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:36,850,850 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:36,880,880 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:36,880,880 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:38,280,280 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:38,280,280 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:39,825,825 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,825,825 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:39,832,832 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,832,832 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:39,840,840 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,840,840 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:39,847,847 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,847,847 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:39,855,855 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,855,855 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:39,862,862 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,862,862 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:39,872,872 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,872,872 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:39,880,880 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,880,880 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:39,887,887 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,890,890 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:39,897,897 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,897,897 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:39,905,905 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,905,905 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:39,912,912 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,912,912 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:39,920,920 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,920,920 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:39,932,932 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,932,932 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:39,940,940 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:39,940,940 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:39,987,987 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:39,987,987 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:41,472,472 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:41,472,472 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:41,480,480 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:41,480,480 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:41,490,490 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:41,490,490 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:43,020,20 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,020,20 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:43,027,27 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,027,27 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:43,035,35 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,035,35 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:43,042,42 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,042,42 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:43,050,50 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,050,50 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:43,057,57 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,057,57 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:43,062,62 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,062,62 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:43,080,80 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,080,80 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:43,087,87 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,087,87 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:43,095,95 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,095,95 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:43,102,102 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,102,102 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:43,112,112 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,112,112 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:43,117,117 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,120,120 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:43,125,125 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,127,127 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:43,135,135 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:43,135,135 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:43,167,167 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:43,167,167 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-05-12 16:34:44,605,605 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:44,605,605 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:44,615,615 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:44,615,615 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:46,135,135 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,135,135 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:46,140,140 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,140,140 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:46,145,145 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,145,145 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:46,152,152 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,152,152 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:46,157,157 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,157,157 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:46,165,165 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,165,165 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:46,170,170 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,170,170 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:46,175,175 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,175,175 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:46,182,182 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,182,182 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:46,187,187 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,187,187 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:46,195,195 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,195,195 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:46,200,200 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,202,202 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:46,207,207 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,207,207 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:46,212,212 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,215,215 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:46,220,220 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:46,220,220 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:46,225,225 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:46,225,225 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:47,600,600 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:47,600,600 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:47,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:47,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:47,652,652 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:47,652,652 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:47,662,662 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:47,662,662 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:49,035,35 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,035,35 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:49,040,40 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,040,40 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:49,047,47 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,047,47 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:49,050,50 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,050,50 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:49,057,57 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,057,57 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:49,060,60 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,062,62 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:49,065,65 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,067,67 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:49,070,70 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,070,70 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:49,075,75 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,075,75 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:49,077,77 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,080,80 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:49,082,82 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,082,82 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:49,087,87 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,087,87 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:49,092,92 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,092,92 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:49,097,97 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,097,97 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:49,102,102 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:49,102,102 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:49,157,157 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:49,157,157 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:50,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:50,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:50,622,622 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:50,622,622 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:50,632,632 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:50,632,632 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:52,087,87 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,087,87 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:52,095,95 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,095,95 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:52,102,102 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,102,102 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:52,110,110 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,110,110 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:52,117,117 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,117,117 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:52,125,125 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,127,127 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:52,132,132 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,135,135 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:52,140,140 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,140,140 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:52,147,147 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,147,147 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:52,155,155 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,157,157 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:52,162,162 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,165,165 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:52,170,170 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,172,172 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:52,177,177 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,177,177 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:52,182,182 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,182,182 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:52,187,187 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:52,187,187 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:52,212,212 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:52,212,212 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:53,777,777 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:53,777,777 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:55,317,317 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,317,317 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:55,325,325 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,325,325 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:55,332,332 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,332,332 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:55,337,337 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,337,337 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:55,345,345 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,345,345 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:55,352,352 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,352,352 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:55,360,360 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,360,360 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:55,365,365 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,365,365 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:55,370,370 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,370,370 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:55,375,375 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,375,375 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:55,380,380 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,380,380 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:55,385,385 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,387,387 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:55,392,392 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,395,395 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:55,402,402 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,402,402 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:55,405,405 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:55,407,407 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:55,417,417 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:55,417,417 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:34:56,940,940 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:34:56,942,942 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:34:58,312,312 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,312,312 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '157402'}]>
2019-05-12 16:34:58,327,327 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,327,327 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:34:58,330,330 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,332,332 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:34:58,335,335 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,335,335 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:58,340,340 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,340,340 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:58,345,345 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,345,345 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:34:58,350,350 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,350,350 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:34:58,355,355 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,355,355 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:58,360,360 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,360,360 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:34:58,362,362 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,365,365 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:58,367,367 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,367,367 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:58,372,372 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,372,372 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:34:58,377,377 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,377,377 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:34:58,382,382 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,382,382 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:34:58,387,387 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:34:58,387,387 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:34:58,400,400 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:58,400,400 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:34:58', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:34:58,400,400 DEBUG [plugin_fivesteps.py:500] Match found do remove matchedordermonitor below data
2019-05-12 16:34:58,402,402 DEBUG [plugin_fivesteps.py:501] [{'orderno': '368649', 'price': '4.78', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '635448', 'price': '4.80', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '522982', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '295850', 'price': '4.68', 'status': 'Open(O)', 'referorderno': '588314'}, {'orderno': '639653', 'price': '4.60', 'status': 'Pending(S)', 'referorderno': '588314'}, {'orderno': '999784', 'price': '4.72', 'status': 'Pending(S)', 'referorderno': '287752'}, {'orderno': '110300', 'price': '4.68', 'status': 'Pending(S)', 'referorderno': '734122'}, {'orderno': '763507', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '791174'}, {'orderno': '663809', 'price': '4.74', 'status': 'Pending(S)', 'referorderno': '393196'}, {'orderno': '598391', 'price': '4.64', 'status': 'Pending(S)', 'referorderno': '917261'}, {'orderno': '759750', 'price': '4.66', 'status': 'Pending(S)', 'referorderno': '157402'}]
2019-05-12 16:34:58,412,412 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:34:58,412,412 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '16:34:58', 'referorderno': 'None', 'matcheddate': '2019-05-12'}]}
2019-05-12 16:35:00,575,575 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:00,575,575 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:00,963,963 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:00,963,963 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,163,163 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,163,163 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,173,173 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,173,173 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,253,253 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,253,253 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,260,260 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,263,263 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,270,270 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,270,270 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,280,280 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,280,280 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,293,293 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,293,293 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,303,303 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,303,303 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,313,313 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,313,313 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,323,323 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,323,323 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,333,333 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,333,333 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,343,343 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,343,343 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,353,353 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,353,353 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,363,363 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,363,363 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,373,373 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,373,373 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,383,383 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,383,383 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,393,393 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,393,393 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,403,403 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,403,403 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,413,413 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,413,413 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,423,423 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,423,423 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,433,433 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,433,433 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,443,443 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,443,443 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,453,453 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,453,453 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,463,463 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,463,463 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,473,473 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,473,473 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,483,483 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,483,483 DEBUG [packsel_model.py:163] <QuerySet []>
2019-05-12 16:35:01,483,483 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,485,485 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,495,495 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,495,495 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,498,498 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,498,498 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:34:58', 'referorderno': '157402'}]>
2019-05-12 16:35:01,505,505 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,505,505 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:35:01,505,505 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,508,508 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,513,513 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,513,513 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:35:01,518,518 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,520,520 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,520,520 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,520,520 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:01,528,528 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,528,528 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:35:01,533,533 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,533,533 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,535,535 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,538,538 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:35:01,545,545 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,545,545 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:35:01,553,553 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,553,553 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:01,560,560 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,560,560 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:35:01,568,568 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,568,568 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:01,575,575 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,575,575 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:01,578,578 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,578,578 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,583,583 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,583,583 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:01,588,588 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,588,588 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:35:01,588,588 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,590,590 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,593,593 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,595,595 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:35:01,600,600 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:01,600,600 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:35:01,640,640 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,640,640 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:01,650,650 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:35:01,650,650 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '999833', 'time': '16:34:51', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '759750'}]}
2019-05-12 16:35:01,713,713 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-05-12 16:35:01,713,713 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-05-12 16:35:03,323,323 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,323,323 DEBUG [packsel_model.py:163] <QuerySet [{'id': 116, 'orderno': '999833', 'time': '16:34:51', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '759750'}]>
2019-05-12 16:35:03,328,328 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,330,330 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:34:58', 'referorderno': '157402'}]>
2019-05-12 16:35:03,335,335 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,335,335 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:35:03,340,340 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,340,340 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:35:03,345,345 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,345,345 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:03,350,350 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,350,350 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:35:03,355,355 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,358,358 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:35:03,363,363 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,363,363 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:35:03,370,370 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,370,370 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:03,375,375 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,375,375 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:35:03,378,378 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,378,378 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:03,383,383 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,383,383 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:03,388,388 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,390,390 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:03,395,395 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,395,395 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:35:03,400,400 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,400,400 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:35:03,405,405 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:03,408,408 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:35:03,703,703 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:35:03,705,705 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-05-12 16:35:05,368,368 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,368,368 DEBUG [packsel_model.py:163] <QuerySet [{'id': 116, 'orderno': '999833', 'time': '16:34:51', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '759750'}]>
2019-05-12 16:35:05,375,375 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,375,375 DEBUG [packsel_model.py:163] <QuerySet [{'id': 115, 'orderno': '759750', 'time': '16:31:45', 'symbole': 'WHA', 'side': 'S', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:34:58', 'referorderno': '157402'}]>
2019-05-12 16:35:05,383,383 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,383,383 DEBUG [packsel_model.py:163] <QuerySet [{'id': 114, 'orderno': '598391', 'time': '16:31:43', 'symbole': 'WHA', 'side': 'S', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '917261'}]>
2019-05-12 16:35:05,390,390 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,393,393 DEBUG [packsel_model.py:163] <QuerySet [{'id': 109, 'orderno': '393196', 'time': '16:28:26', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:31:49', 'referorderno': '572728'}]>
2019-05-12 16:35:05,398,398 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,400,400 DEBUG [packsel_model.py:163] <QuerySet [{'id': 108, 'orderno': '639653', 'time': '16:28:17', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:05,405,405 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,405,405 DEBUG [packsel_model.py:163] <QuerySet [{'id': 107, 'orderno': '917261', 'time': '16:28:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:35:05,410,410 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,410,410 DEBUG [packsel_model.py:163] <QuerySet [{'id': 106, 'orderno': '157402', 'time': '16:28:15', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:32:05', 'referorderno': '588314'}]>
2019-05-12 16:35:05,415,415 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,415,415 DEBUG [packsel_model.py:163] <QuerySet [{'id': 105, 'orderno': '734122', 'time': '16:28:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:27', 'referorderno': '588314'}]>
2019-05-12 16:35:05,420,420 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,420,420 DEBUG [packsel_model.py:163] <QuerySet [{'id': 104, 'orderno': '295850', 'time': '16:28:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:05,423,423 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,425,425 DEBUG [packsel_model.py:163] <QuerySet [{'id': 103, 'orderno': '287752', 'time': '16:28:11', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:29:55', 'referorderno': '588314'}]>
2019-05-12 16:35:05,428,428 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,428,428 DEBUG [packsel_model.py:163] <QuerySet [{'id': 102, 'orderno': '522982', 'time': '16:28:10', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:05,433,433 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,433,433 DEBUG [packsel_model.py:163] <QuerySet [{'id': 101, 'orderno': '635448', 'time': '16:28:09', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:05,435,435 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,438,438 DEBUG [packsel_model.py:163] <QuerySet [{'id': 100, 'orderno': '368649', 'time': '16:28:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 5, 12), 'matchedtime': 'matchtime', 'referorderno': '588314'}]>
2019-05-12 16:35:05,440,440 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,443,443 DEBUG [packsel_model.py:163] <QuerySet [{'id': 99, 'orderno': '791174', 'time': '16:28:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:30:36', 'referorderno': '588314'}]>
2019-05-12 16:35:05,448,448 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,448,448 DEBUG [packsel_model.py:163] <QuerySet [{'id': 98, 'orderno': '572728', 'time': '16:28:06', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:54', 'referorderno': '588314'}]>
2019-05-12 16:35:05,453,453 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-05-12 16:35:05,453,453 DEBUG [packsel_model.py:163] <QuerySet [{'id': 97, 'orderno': '588314', 'time': '16:27:55', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 5, 12), 'matchedtime': '16:28:20', 'referorderno': 'None'}]>
2019-05-12 16:35:05,460,460 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-05-12 16:35:05,460,460 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
