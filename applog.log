2019-04-28 19:27:12,290,290 INFO [plugin_fivesteps.py:13] Initialize of plugin_fivesteps
2019-04-28 19:27:12,305,305 INFO [packsel_model.py:10] Initialize log of packsel_model
2019-04-28 19:27:12,711,711 DEBUG [plugin_fivesteps.py:33] Print initial All Stockname Parameter
2019-04-28 19:27:12,711,711 DEBUG [plugin_fivesteps.py:34] None
2019-04-28 19:27:15,659,659 INFO [monitor.py:117] Start Login
2019-04-28 19:27:15,659,659 DEBUG [monitor.py:127] Login Parameter
2019-04-28 19:27:15,659,659 DEBUG [monitor.py:128] {'mybrokeId': '013', 'myuser': '014xxxx', 'mypassword': ''}
2019-04-28 19:27:22,002,2 INFO [monitor.py:159] Login seem to be succeeded , start to refresh all data from database with refresh all condition
2019-04-28 19:27:22,007,7 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:22,007,7 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'all'}
2019-04-28 19:27:22,022,22 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:22,022,22 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'all'}
2019-04-28 19:27:22,030,30 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:22,030,30 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'all'}
2019-04-28 19:27:22,035,35 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:22,035,35 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'all'}
2019-04-28 19:27:23,480,480 DEBUG [packsel.py:615] Do full update refresh all with below data in var mytable
2019-04-28 19:27:23,480,480 DEBUG [packsel.py:616] [['408456', '19:25:24', 'WHA', 'B', '4.60', '100', '0', '0', '0', 'Pending(S)'], ['638100', '19:25:22', 'WHA', 'B', '4.62', '100', '0', '0', '0', 'Pending(S)'], ['861997', '19:25:20', 'WHA', 'B', '4.64', '100', '0', '0', '0', 'Pending(S)'], ['127130', '19:25:18', 'WHA', 'B', '4.66', '100', '0', '0', '0', 'Pending(S)'], ['157699', '19:25:16', 'WHA', 'B', '4.68', '100', '0', '0', '0', 'Open(O)'], ['456048', '19:25:14', 'WHA', 'B', '4.70', '100', '0', '0', '0', 'Open(O)'], ['315548', '19:25:12', 'WHA', 'B', '4.72', '100', '0', '0', '0', 'Pending(S)'], ['190845', '19:25:10', 'WHA', 'S', '4.80', '100', '0', '0', '0', 'Open(O)'], ['211170', '19:25:08', 'WHA', 'S', '4.78', '100', '0', '0', '0', 'Open(O)'], ['238924', '19:25:07', 'WHA', 'S', '4.76', '100', '0', '0', '0', 'Open(O)'], ['951838', '19:25:05', 'WHA', 'S', '4.74', '100', '0', '0', '0', 'Matched(M)'], ['182241', '19:24:53', 'WHA', 'B', '4.72', '400', '0', '0', '0', 'Matched(M)']]
2019-04-28 19:27:23,482,482 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,485,485 DEBUG [packsel_model.py:163] <QuerySet [{'id': 36, 'orderno': '408456', 'time': '19:25:24', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,490,490 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,490,490 DEBUG [packsel_model.py:186] <QuerySet [{'id': 36, 'orderno': '408456', 'time': '19:25:24', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,492,492 DEBUG [packsel_model.py:187] Pending(S)
2019-04-28 19:27:23,495,495 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,495,495 DEBUG [packsel_model.py:163] <QuerySet [{'id': 35, 'orderno': '638100', 'time': '19:25:22', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,497,497 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,500,500 DEBUG [packsel_model.py:186] <QuerySet [{'id': 35, 'orderno': '638100', 'time': '19:25:22', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,500,500 DEBUG [packsel_model.py:187] Pending(S)
2019-04-28 19:27:23,502,502 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,502,502 DEBUG [packsel_model.py:163] <QuerySet [{'id': 34, 'orderno': '861997', 'time': '19:25:20', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,507,507 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,507,507 DEBUG [packsel_model.py:186] <QuerySet [{'id': 34, 'orderno': '861997', 'time': '19:25:20', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,510,510 DEBUG [packsel_model.py:187] Pending(S)
2019-04-28 19:27:23,512,512 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,512,512 DEBUG [packsel_model.py:163] <QuerySet [{'id': 33, 'orderno': '127130', 'time': '19:25:18', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,517,517 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,517,517 DEBUG [packsel_model.py:186] <QuerySet [{'id': 33, 'orderno': '127130', 'time': '19:25:18', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,520,520 DEBUG [packsel_model.py:187] Pending(S)
2019-04-28 19:27:23,522,522 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,522,522 DEBUG [packsel_model.py:163] <QuerySet [{'id': 32, 'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,525,525 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,525,525 DEBUG [packsel_model.py:186] <QuerySet [{'id': 32, 'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,527,527 DEBUG [packsel_model.py:187] Open(O)
2019-04-28 19:27:23,530,530 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,530,530 DEBUG [packsel_model.py:163] <QuerySet [{'id': 31, 'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,535,535 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,535,535 DEBUG [packsel_model.py:186] <QuerySet [{'id': 31, 'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,537,537 DEBUG [packsel_model.py:187] Open(O)
2019-04-28 19:27:23,537,537 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,537,537 DEBUG [packsel_model.py:163] <QuerySet [{'id': 30, 'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,542,542 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,542,542 DEBUG [packsel_model.py:186] <QuerySet [{'id': 30, 'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,545,545 DEBUG [packsel_model.py:187] Pending(S)
2019-04-28 19:27:23,547,547 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,547,547 DEBUG [packsel_model.py:163] <QuerySet [{'id': 29, 'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,550,550 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,550,550 DEBUG [packsel_model.py:186] <QuerySet [{'id': 29, 'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,552,552 DEBUG [packsel_model.py:187] Open(O)
2019-04-28 19:27:23,555,555 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,555,555 DEBUG [packsel_model.py:163] <QuerySet [{'id': 28, 'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,557,557 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,557,557 DEBUG [packsel_model.py:186] <QuerySet [{'id': 28, 'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,560,560 DEBUG [packsel_model.py:187] Open(O)
2019-04-28 19:27:23,562,562 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,562,562 DEBUG [packsel_model.py:163] <QuerySet [{'id': 27, 'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,567,567 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,567,567 DEBUG [packsel_model.py:186] <QuerySet [{'id': 27, 'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,570,570 DEBUG [packsel_model.py:187] Open(O)
2019-04-28 19:27:23,572,572 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,572,572 DEBUG [packsel_model.py:163] <QuerySet [{'id': 26, 'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,577,577 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,577,577 DEBUG [packsel_model.py:186] <QuerySet [{'id': 26, 'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:23,580,580 DEBUG [packsel_model.py:187] Matched(M)
2019-04-28 19:27:23,582,582 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:23,582,582 DEBUG [packsel_model.py:163] <QuerySet [{'id': 25, 'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:25:04', 'referorderno': 'None'}]>
2019-04-28 19:27:23,585,585 DEBUG [packsel_model.py:185] Refresh each row case chkorderno already existing in database and status
2019-04-28 19:27:23,585,585 DEBUG [packsel_model.py:186] <QuerySet [{'id': 25, 'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:25:04', 'referorderno': 'None'}]>
2019-04-28 19:27:23,587,587 DEBUG [packsel_model.py:187] Matched(M)
2019-04-28 19:27:23,590,590 DEBUG [packsel.py:622] Get all data from database in var rowupdaterefresh
2019-04-28 19:27:23,590,590 DEBUG [packsel.py:623] [{'id': 36, 'orderno': '408456', 'time': '19:25:24', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 35, 'orderno': '638100', 'time': '19:25:22', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 34, 'orderno': '861997', 'time': '19:25:20', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 33, 'orderno': '127130', 'time': '19:25:18', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 32, 'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 31, 'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 30, 'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 29, 'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 28, 'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 27, 'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 26, 'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 25, 'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:25:04', 'referorderno': 'None'}]
2019-04-28 19:27:23,595,595 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-04-28 19:27:23,595,595 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'id': 36, 'orderno': '408456', 'time': '19:25:24', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 35, 'orderno': '638100', 'time': '19:25:22', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 34, 'orderno': '861997', 'time': '19:25:20', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 33, 'orderno': '127130', 'time': '19:25:18', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 32, 'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 31, 'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 30, 'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 29, 'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 28, 'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 27, 'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 26, 'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}, {'id': 25, 'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:25:04', 'referorderno': 'None'}]}
2019-04-28 19:27:27,470,470 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,470,470 DEBUG [packsel_model.py:163] <QuerySet [{'id': 36, 'orderno': '408456', 'time': '19:25:24', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:27,477,477 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,477,477 DEBUG [packsel_model.py:163] <QuerySet [{'id': 35, 'orderno': '638100', 'time': '19:25:22', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:27,485,485 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,485,485 DEBUG [packsel_model.py:163] <QuerySet [{'id': 34, 'orderno': '861997', 'time': '19:25:20', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:27,495,495 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,495,495 DEBUG [packsel_model.py:163] <QuerySet [{'id': 33, 'orderno': '127130', 'time': '19:25:18', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:27,500,500 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,500,500 DEBUG [packsel_model.py:163] <QuerySet [{'id': 32, 'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:27,505,505 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,505,505 DEBUG [packsel_model.py:163] <QuerySet [{'id': 31, 'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:27,510,510 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,510,510 DEBUG [packsel_model.py:163] <QuerySet [{'id': 30, 'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:27,517,517 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,517,517 DEBUG [packsel_model.py:163] <QuerySet [{'id': 29, 'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:27,522,522 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,522,522 DEBUG [packsel_model.py:163] <QuerySet [{'id': 28, 'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:27,530,530 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,530,530 DEBUG [packsel_model.py:163] <QuerySet [{'id': 27, 'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:27,537,537 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,537,537 DEBUG [packsel_model.py:163] <QuerySet [{'id': 26, 'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:27,542,542 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:27,545,545 DEBUG [packsel_model.py:163] <QuerySet [{'id': 25, 'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:25:04', 'referorderno': 'None'}]>
2019-04-28 19:27:27,572,572 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-04-28 19:27:27,572,572 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-04-28 19:27:29,365,365 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:29,365,365 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:30,690,690 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,690,690 DEBUG [packsel_model.py:163] <QuerySet [{'id': 36, 'orderno': '408456', 'time': '19:25:24', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:30,695,695 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,695,695 DEBUG [packsel_model.py:163] <QuerySet [{'id': 35, 'orderno': '638100', 'time': '19:25:22', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:30,700,700 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,700,700 DEBUG [packsel_model.py:163] <QuerySet [{'id': 34, 'orderno': '861997', 'time': '19:25:20', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:30,705,705 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,705,705 DEBUG [packsel_model.py:163] <QuerySet [{'id': 33, 'orderno': '127130', 'time': '19:25:18', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:30,710,710 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,710,710 DEBUG [packsel_model.py:163] <QuerySet [{'id': 32, 'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:30,715,715 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,715,715 DEBUG [packsel_model.py:163] <QuerySet [{'id': 31, 'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:30,720,720 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,720,720 DEBUG [packsel_model.py:163] <QuerySet [{'id': 30, 'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:30,725,725 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,725,725 DEBUG [packsel_model.py:163] <QuerySet [{'id': 29, 'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:30,730,730 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,730,730 DEBUG [packsel_model.py:163] <QuerySet [{'id': 28, 'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:30,737,737 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,737,737 DEBUG [packsel_model.py:163] <QuerySet [{'id': 27, 'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:30,742,742 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,742,742 DEBUG [packsel_model.py:163] <QuerySet [{'id': 26, 'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:30,747,747 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:30,750,750 DEBUG [packsel_model.py:163] <QuerySet [{'id': 25, 'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:25:04', 'referorderno': 'None'}]>
2019-04-28 19:27:30,797,797 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-04-28 19:27:30,797,797 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-04-28 19:27:32,412,412 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:32,412,412 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:32,417,417 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:32,417,417 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:32,442,442 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:32,442,442 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:32,450,450 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:32,450,450 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:32,455,455 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:32,455,455 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:33,665,665 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,667,667 DEBUG [packsel_model.py:163] <QuerySet [{'id': 36, 'orderno': '408456', 'time': '19:25:24', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:33,672,672 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,672,672 DEBUG [packsel_model.py:163] <QuerySet [{'id': 35, 'orderno': '638100', 'time': '19:25:22', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:33,675,675 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,675,675 DEBUG [packsel_model.py:163] <QuerySet [{'id': 34, 'orderno': '861997', 'time': '19:25:20', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:33,680,680 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,680,680 DEBUG [packsel_model.py:163] <QuerySet [{'id': 33, 'orderno': '127130', 'time': '19:25:18', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:33,685,685 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,685,685 DEBUG [packsel_model.py:163] <QuerySet [{'id': 32, 'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:33,690,690 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,690,690 DEBUG [packsel_model.py:163] <QuerySet [{'id': 31, 'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:33,695,695 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,695,695 DEBUG [packsel_model.py:163] <QuerySet [{'id': 30, 'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:33,707,707 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,707,707 DEBUG [packsel_model.py:163] <QuerySet [{'id': 29, 'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:33,712,712 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,715,715 DEBUG [packsel_model.py:163] <QuerySet [{'id': 28, 'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:33,717,717 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,720,720 DEBUG [packsel_model.py:163] <QuerySet [{'id': 27, 'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:33,722,722 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,725,725 DEBUG [packsel_model.py:163] <QuerySet [{'id': 26, 'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:33,727,727 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:33,727,727 DEBUG [packsel_model.py:163] <QuerySet [{'id': 25, 'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:25:04', 'referorderno': 'None'}]>
2019-04-28 19:27:33,745,745 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-04-28 19:27:33,745,745 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': 'None'}, {'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-04-28 19:27:35,457,457 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:35,460,460 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:35,465,465 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:35,465,465 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:35,470,470 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:35,470,470 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:35,477,477 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:35,477,477 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:35,482,482 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:35,482,482 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:35,500,500 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:35,500,500 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:36,730,730 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,732,732 DEBUG [packsel_model.py:163] <QuerySet [{'id': 36, 'orderno': '408456', 'time': '19:25:24', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:36,735,735 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,735,735 DEBUG [packsel_model.py:163] <QuerySet [{'id': 35, 'orderno': '638100', 'time': '19:25:22', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:36,740,740 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,740,740 DEBUG [packsel_model.py:163] <QuerySet [{'id': 34, 'orderno': '861997', 'time': '19:25:20', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:36,745,745 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,747,747 DEBUG [packsel_model.py:163] <QuerySet [{'id': 33, 'orderno': '127130', 'time': '19:25:18', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:36,750,750 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,752,752 DEBUG [packsel_model.py:163] <QuerySet [{'id': 32, 'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:36,755,755 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,755,755 DEBUG [packsel_model.py:163] <QuerySet [{'id': 31, 'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:36,760,760 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,760,760 DEBUG [packsel_model.py:163] <QuerySet [{'id': 30, 'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:36,765,765 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,765,765 DEBUG [packsel_model.py:163] <QuerySet [{'id': 29, 'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:36,770,770 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,772,772 DEBUG [packsel_model.py:163] <QuerySet [{'id': 28, 'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:36,775,775 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,777,777 DEBUG [packsel_model.py:163] <QuerySet [{'id': 27, 'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:36,782,782 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,782,782 DEBUG [packsel_model.py:163] <QuerySet [{'id': 26, 'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:36,787,787 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:36,787,787 DEBUG [packsel_model.py:163] <QuerySet [{'id': 25, 'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:25:04', 'referorderno': 'None'}]>
2019-04-28 19:27:36,802,802 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-04-28 19:27:36,802,802 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': []}
2019-04-28 19:27:38,492,492 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:38,495,495 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:38,502,502 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:38,502,502 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:39,757,757 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,757,757 DEBUG [packsel_model.py:163] <QuerySet [{'id': 36, 'orderno': '408456', 'time': '19:25:24', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:39,762,762 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,762,762 DEBUG [packsel_model.py:163] <QuerySet [{'id': 35, 'orderno': '638100', 'time': '19:25:22', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:39,767,767 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,767,767 DEBUG [packsel_model.py:163] <QuerySet [{'id': 34, 'orderno': '861997', 'time': '19:25:20', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:39,772,772 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,772,772 DEBUG [packsel_model.py:163] <QuerySet [{'id': 33, 'orderno': '127130', 'time': '19:25:18', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:39,777,777 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,777,777 DEBUG [packsel_model.py:163] <QuerySet [{'id': 32, 'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:39,782,782 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,782,782 DEBUG [packsel_model.py:163] <QuerySet [{'id': 31, 'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:39,787,787 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,790,790 DEBUG [packsel_model.py:163] <QuerySet [{'id': 30, 'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:39,800,800 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,800,800 DEBUG [packsel_model.py:163] <QuerySet [{'id': 29, 'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:39,805,805 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,805,805 DEBUG [packsel_model.py:163] <QuerySet [{'id': 28, 'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:39,810,810 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,810,810 DEBUG [packsel_model.py:163] <QuerySet [{'id': 27, 'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:39,815,815 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,815,815 DEBUG [packsel_model.py:163] <QuerySet [{'id': 26, 'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:39,822,822 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:39,822,822 DEBUG [packsel_model.py:163] <QuerySet [{'id': 25, 'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:25:04', 'referorderno': 'None'}]>
2019-04-28 19:27:39,837,837 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-04-28 19:27:39,837,837 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '19:27:39', 'referorderno': 'None', 'matcheddate': '2019-04-28'}, {'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
2019-04-28 19:27:39,840,840 DEBUG [plugin_fivesteps.py:500] Match found do remove matchedordermonitor below data
2019-04-28 19:27:39,840,840 DEBUG [plugin_fivesteps.py:501] [{'orderno': '408456', 'price': '4.60', 'status': 'Pending(S)', 'referorderno': '182241'}, {'orderno': '638100', 'price': '4.62', 'status': 'Pending(S)', 'referorderno': '182241'}, {'orderno': '861997', 'price': '4.64', 'status': 'Pending(S)', 'referorderno': '182241'}, {'orderno': '127130', 'price': '4.66', 'status': 'Pending(S)', 'referorderno': '182241'}, {'orderno': '157699', 'price': '4.68', 'status': 'Open(O)', 'referorderno': '182241'}, {'orderno': '456048', 'price': '4.70', 'status': 'Open(O)', 'referorderno': '182241'}, {'orderno': '315548', 'price': '4.72', 'status': 'Open(O)', 'referorderno': '182241'}, {'orderno': '190845', 'price': '4.80', 'status': 'Open(O)', 'referorderno': '182241'}, {'orderno': '211170', 'price': '4.78', 'status': 'Open(O)', 'referorderno': '182241'}, {'orderno': '238924', 'price': '4.76', 'status': 'Open(O)', 'referorderno': '182241'}]
2019-04-28 19:27:39,855,855 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-04-28 19:27:39,855,855 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'matchedtime': '19:27:39', 'referorderno': 'None', 'matcheddate': '2019-04-28'}]}
2019-04-28 19:27:41,580,580 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,580,580 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,587,587 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,587,587 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,592,592 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,592,592 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,600,600 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,600,600 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,605,605 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,605,605 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,612,612 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,612,612 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,617,617 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,617,617 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,625,625 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,625,625 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,630,630 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,630,630 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,637,637 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,637,637 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,642,642 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,642,642 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,650,650 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,650,650 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,655,655 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,655,655 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,660,660 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,660,660 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,667,667 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,667,667 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,672,672 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,672,672 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,680,680 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,680,680 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,685,685 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,685,685 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,692,692 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,692,692 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,697,697 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,697,697 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,705,705 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,705,705 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,712,712 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,712,712 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,717,717 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,717,717 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,725,725 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,725,725 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,730,730 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,730,730 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,737,737 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,737,737 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,745,745 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,745,745 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,750,750 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,750,750 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,757,757 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,757,757 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,762,762 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,762,762 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,770,770 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,770,770 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,775,775 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,775,775 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,780,780 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,780,780 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,787,787 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,787,787 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,792,792 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,792,792 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,800,800 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,800,800 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,805,805 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,805,805 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,812,812 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,812,812 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,817,817 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,817,817 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,825,825 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,825,825 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,830,830 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,830,830 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,837,837 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,837,837 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,842,842 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,842,842 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,850,850 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,850,850 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,855,855 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,855,855 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,862,862 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,862,862 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,867,867 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,867,867 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,875,875 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,875,875 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,880,880 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,880,880 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,887,887 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,887,887 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,892,892 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,892,892 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,900,900 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,900,900 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,905,905 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,905,905 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,912,912 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,912,912 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,917,917 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,917,917 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,925,925 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,925,925 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,932,932 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,932,932 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,937,937 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,937,937 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,945,945 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,945,945 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,950,950 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,950,950 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,957,957 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,957,957 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,965,965 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,965,965 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,970,970 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,970,970 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,975,975 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,975,975 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,982,982 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,982,982 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,987,987 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,987,987 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:41,995,995 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:41,995,995 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,000,0 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,000,0 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,007,7 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,007,7 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,012,12 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,012,12 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,020,20 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,020,20 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,025,25 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,025,25 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,032,32 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,032,32 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,037,37 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,037,37 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,045,45 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,045,45 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,050,50 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,050,50 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,057,57 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,057,57 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,062,62 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,062,62 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,070,70 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,070,70 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,075,75 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,075,75 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,082,82 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,082,82 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,087,87 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,087,87 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,095,95 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,095,95 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,100,100 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,100,100 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,107,107 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,107,107 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,112,112 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,112,112 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,120,120 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,120,120 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,125,125 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,125,125 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,132,132 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,132,132 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,137,137 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,137,137 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,145,145 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,145,145 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,150,150 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,150,150 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,157,157 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,157,157 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,162,162 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,162,162 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,170,170 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,170,170 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,175,175 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,175,175 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,182,182 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,182,182 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,187,187 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,187,187 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,195,195 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,195,195 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,197,197 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,200,200 DEBUG [packsel_model.py:163] <QuerySet []>
2019-04-28 19:27:42,200,200 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,200,200 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,207,207 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,207,207 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,210,210 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,210,210 DEBUG [packsel_model.py:163] <QuerySet [{'id': 36, 'orderno': '408456', 'time': '19:25:24', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:42,212,212 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,212,212 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,215,215 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,217,217 DEBUG [packsel_model.py:163] <QuerySet [{'id': 35, 'orderno': '638100', 'time': '19:25:22', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:42,220,220 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,220,220 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,220,220 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,222,222 DEBUG [packsel_model.py:163] <QuerySet [{'id': 34, 'orderno': '861997', 'time': '19:25:20', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:42,227,227 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,227,227 DEBUG [packsel_model.py:163] <QuerySet [{'id': 33, 'orderno': '127130', 'time': '19:25:18', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:42,227,227 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,230,230 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,232,232 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,235,235 DEBUG [packsel_model.py:163] <QuerySet [{'id': 32, 'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:42,237,237 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,237,237 DEBUG [packsel_model.py:163] <QuerySet [{'id': 31, 'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:42,242,242 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,242,242 DEBUG [packsel_model.py:163] <QuerySet [{'id': 30, 'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:27:39', 'referorderno': '182241'}]>
2019-04-28 19:27:42,245,245 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,245,245 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,247,247 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,250,250 DEBUG [packsel_model.py:163] <QuerySet [{'id': 29, 'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:42,252,252 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,252,252 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,252,252 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,255,255 DEBUG [packsel_model.py:163] <QuerySet [{'id': 28, 'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:42,257,257 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,260,260 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,260,260 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,260,260 DEBUG [packsel_model.py:163] <QuerySet [{'id': 27, 'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:42,265,265 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,265,265 DEBUG [packsel_model.py:163] <QuerySet [{'id': 26, 'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:42,265,265 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,270,270 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,270,270 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:42,272,272 DEBUG [packsel_model.py:163] <QuerySet [{'id': 25, 'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:25:04', 'referorderno': 'None'}]>
2019-04-28 19:27:42,277,277 DEBUG [tkconsole.py:883] If not tk GUI do update back refresh DB according to queue with qrefresh qrefresh=refreshdb
2019-04-28 19:27:42,277,277 DEBUG [tkconsole.py:884] {'qrefresh': 'refreshdb', 'refreshtype': 'partial'}
2019-04-28 19:27:42,285,285 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-04-28 19:27:42,285,285 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '616536', 'time': '19:27:40', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': '315548'}]}
2019-04-28 19:27:43,647,647 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,647,647 DEBUG [packsel_model.py:163] <QuerySet [{'id': 37, 'orderno': '616536', 'time': '19:27:40', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '315548'}]>
2019-04-28 19:27:43,652,652 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,652,652 DEBUG [packsel_model.py:163] <QuerySet [{'id': 36, 'orderno': '408456', 'time': '19:25:24', 'symbole': 'WHA', 'side': 'B', 'price': '4.60', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:43,660,660 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,660,660 DEBUG [packsel_model.py:163] <QuerySet [{'id': 35, 'orderno': '638100', 'time': '19:25:22', 'symbole': 'WHA', 'side': 'B', 'price': '4.62', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:43,667,667 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,667,667 DEBUG [packsel_model.py:163] <QuerySet [{'id': 34, 'orderno': '861997', 'time': '19:25:20', 'symbole': 'WHA', 'side': 'B', 'price': '4.64', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:43,675,675 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,675,675 DEBUG [packsel_model.py:163] <QuerySet [{'id': 33, 'orderno': '127130', 'time': '19:25:18', 'symbole': 'WHA', 'side': 'B', 'price': '4.66', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:43,682,682 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,682,682 DEBUG [packsel_model.py:163] <QuerySet [{'id': 32, 'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:43,697,697 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,700,700 DEBUG [packsel_model.py:163] <QuerySet [{'id': 31, 'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:43,712,712 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,712,712 DEBUG [packsel_model.py:163] <QuerySet [{'id': 30, 'orderno': '315548', 'time': '19:25:12', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:27:39', 'referorderno': '182241'}]>
2019-04-28 19:27:43,722,722 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,722,722 DEBUG [packsel_model.py:163] <QuerySet [{'id': 29, 'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:43,740,740 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,742,742 DEBUG [packsel_model.py:163] <QuerySet [{'id': 28, 'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:43,755,755 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,757,757 DEBUG [packsel_model.py:163] <QuerySet [{'id': 27, 'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Open(O)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:43,770,770 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,772,772 DEBUG [packsel_model.py:163] <QuerySet [{'id': 26, 'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': 'matchtime', 'referorderno': '182241'}]>
2019-04-28 19:27:43,787,787 DEBUG [packsel_model.py:162] Result from query database filter by orderno
2019-04-28 19:27:43,787,787 DEBUG [packsel_model.py:163] <QuerySet [{'id': 25, 'orderno': '182241', 'time': '19:24:53', 'symbole': 'WHA', 'side': 'B', 'price': '4.72', 'volume': '400', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Matched(M)', 'date': datetime.date(2019, 4, 28), 'matchedtime': '19:25:04', 'referorderno': 'None'}]>
2019-04-28 19:27:43,797,797 DEBUG [tkconsole.py:783] Do update refresh GUI tk according to queue with qrefresh qrefresh=refreshtk and chkrefresh != None
2019-04-28 19:27:43,800,800 DEBUG [tkconsole.py:784] {'qrefresh': 'refreshtk', 'doupdatetk': [{'orderno': '157699', 'time': '19:25:16', 'symbole': 'WHA', 'side': 'B', 'price': '4.68', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': 'None'}, {'orderno': '456048', 'time': '19:25:14', 'symbole': 'WHA', 'side': 'B', 'price': '4.70', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': 'None'}, {'orderno': '190845', 'time': '19:25:10', 'symbole': 'WHA', 'side': 'S', 'price': '4.80', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': 'None'}, {'orderno': '211170', 'time': '19:25:08', 'symbole': 'WHA', 'side': 'S', 'price': '4.78', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': 'None'}, {'orderno': '238924', 'time': '19:25:07', 'symbole': 'WHA', 'side': 'S', 'price': '4.76', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': 'None'}, {'orderno': '951838', 'time': '19:25:05', 'symbole': 'WHA', 'side': 'S', 'price': '4.74', 'volume': '100', 'matched': '0', 'balance': '0', 'cancelled': '0', 'status': 'Pending(S)', 'matchedtime': 'matchtime', 'referorderno': 'None'}]}
